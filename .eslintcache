[{"/Users/fengjiqiang/practice/react-queationnaire-demo/src/index.js":"1","/Users/fengjiqiang/practice/react-queationnaire-demo/src/config.js":"2","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/index.js":"3","/Users/fengjiqiang/practice/react-queationnaire-demo/src/libs/plugins.js":"4","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/login/Login.js":"5","/Users/fengjiqiang/practice/react-queationnaire-demo/src/reportWebVitals.js":"6","/Users/fengjiqiang/practice/react-queationnaire-demo/src/App.js":"7","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/commonActions.js":"8","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/actionLogin.js":"9","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/reducers/index.js":"10","/Users/fengjiqiang/practice/react-queationnaire-demo/src/libs/images/index.js":"11","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/BaseCmp.js":"12","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/index.js":"13","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actionTypes.js":"14","/Users/fengjiqiang/practice/react-queationnaire-demo/src/libs/Uploader.js":"15","/Users/fengjiqiang/practice/react-queationnaire-demo/src/libs/EventBus.js":"16","/Users/fengjiqiang/practice/react-queationnaire-demo/src/libs/utils.js":"17","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/layout/LayoutWindow.js":"18","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/layout/LayoutMenu.js":"19","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/DraggableModal.js":"20","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/CopyInviteModal.js":"21","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/infoManage/actionInfoManage.js":"22","/Users/fengjiqiang/practice/react-queationnaire-demo/src/libs/IframeMessage.js":"23","/Users/fengjiqiang/practice/react-queationnaire-demo/src/api/interfaces.js":"24","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/layout/LayoutHeader.js":"25","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/VODManage/actionVODManage.js":"26","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/VODManage/actionVideoManage.js":"27","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/personalInfo/actionPersonalInfo.js":"28","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/reducers/storeCommon.js":"29","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLSelect.js":"30","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLTabs.js":"31","/Users/fengjiqiang/practice/react-queationnaire-demo/src/libs/images/commonImg.js":"32","/Users/fengjiqiang/practice/react-queationnaire-demo/src/libs/images/menuIcon.js":"33","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLForm.js":"34","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLRadio.js":"35","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLFilterTool.js":"36","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLTable.js":"37","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLButton.js":"38","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLPageTabs.js":"39","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLRadioGroup.js":"40","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLTipList.js":"41","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLModal.js":"42","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLPagination.js":"43","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/LargeModal.js":"44","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLCheckbox.js":"45","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLInputGroup.js":"46","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLCheckboxGroup.js":"47","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLDisplayBoard.js":"48","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLBoard.js":"49","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLRangePicker.js":"50","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLTag.js":"51","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLTooltip.js":"52","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLRenameModal.js":"53","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLDropdown.js":"54","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLRadioGroupCustom.js":"55","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLSwitch.js":"56","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLDatePicker.js":"57","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLFormItem.js":"58","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLTextarea.js":"59","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLKVList.js":"60","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLInput.js":"61","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLRadioCustom.js":"62","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/reducers/common/memberManage.js":"63","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/reducers/myMeeting/personalMeeting.js":"64","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/reducers/userManage/userList.js":"65","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/reducers/personalInfo/personalInfo.js":"66","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/reducers/userManage/roleManage.js":"67","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/layout/PageTabs.js":"68","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/route_cmp.js":"69","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLMenu.js":"70","/Users/fengjiqiang/practice/react-queationnaire-demo/src/libs/Task.js":"71","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/myMeeting/actionMeetingList.js":"72","/Users/fengjiqiang/practice/react-queationnaire-demo/src/libs/mimeType.js":"73","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/common/actionMemberManage.js":"74","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/system/AdManagement/AdManagement.js":"75","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/system/handleLog/HandleLog.js":"76","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/system/loginLog/LoginLog.js":"77","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/system/messageManagement/messageManagementNet/messageManagementNet.js":"78","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/system/messageManagement/messageManagementMail/messageManagementMail.js":"79","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/WindowContainer.js":"80","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/system/system.js":"81","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/system/AdManagement/components/ADDetail.js":"82","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/system/AdManagement/components/ADOnlineLists.js":"83","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/system/AdManagement/components/ADOfflineList.js":"84","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/system/AdManagement/components/AddAD.js":"85","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/system/AdManagement/components/addRoom.js":"86","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/system/AdManagement/components/SystemUpload.js":"87","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/ImgCropper.js":"88","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/seminarManage/seminarManage/SeminarManage.js":"89","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/seminarManage/examineSeminarList/ExamineSeminarList.js":"90","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/seminarManage/mySeminar/MySeminar.js":"91","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/myMeeting/personalMeeting/PersonalMeeting.js":"92","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/myMeeting/seminar/Seminar.js":"93","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/myMeeting/meetingList/MeeingList.js":"94","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/marketingTool/Questionnaire.js":"95","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/marketingTool/EventRegistration.js":"96","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/marketingTool/QAManage.js":"97","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/AddActivityUser.js":"98","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/MemberManage.js":"99","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/meetingManage/actionMeeting.js":"100","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/AddUser.js":"101","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/seminar/actionSeminar.js":"102","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/AddPhone.js":"103","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/liveCom/CreateLive.js":"104","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/liveCom/LiveCmpMeetingList.js":"105","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/document/DocumentDetail.js":"106","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/liveCom/LiveDetail.js":"107","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/Appointment.js":"108","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/MeetingDetail.js":"109","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/myMeeting/actionPersonalMeeting.js":"110","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/myMeeting/meetingList/component/CmpMeetingList.js":"111","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/seminar/mySeminar/MySeminar.js":"112","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/PrivateRoute.js":"113","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/ExamineDetail.js":"114","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/meetingManage/myMeeting/MyMeeting.js":"115","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/meetingManage/meetingDocument/MeetingDocument.js":"116","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/meetingManage/meetingManage/MeetingManage.js":"117","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/meetingManage/examineMeetingList/ExamineMeetingList.js":"118","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/document/RLDocument.js":"119","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/ComExamineMeetingList.js":"120","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/liveCom/AllLiveList.js":"121","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/liveCom/ExamineList.js":"122","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/marketingTool/actionEventRegistration.js":"123","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/marketingTool/components/EventRegistration/CmpRegistrationList.js":"124","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/marketingTool/components/QAManage/CmpQuestionEdit.js":"125","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/marketingTool/components/QAManage/CmpQuestionList.js":"126","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/UpcomingMeeting.js":"127","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/HistoryMeeting.js":"128","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/CurrentMeeting.js":"129","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/marketingTool/components/EventRegistration/CmpEventEdit.js":"130","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/marketingTool/components/EventRegistration/CmpEventList.js":"131","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/userManage/actionGroupManage.js":"132","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/userManage/actionPhoneList.js":"133","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/marketingTool/components/Questionnaire/CmpQnaireEdit.js":"134","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/marketingTool/components/Questionnaire/CmpQnaireList.js":"135","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/marketingTool/components/Questionnaire/CmpQnaireResList.js":"136","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/PhoneRegionView.js":"137","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/document/DocumentProgress.js":"138","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/DocumentsList.js":"139","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/DocumentsMeetingList.js":"140","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/listManage/CmpMeetingList.js":"141","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/marketingTool/actionQAManage.js":"142","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/marketingTool/components/QAManage/CmpFile.js":"143","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/CmpUpload.js":"144","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/seminar/mySeminar/components/SeminarEdit.js":"145","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/seminar/mySeminar/components/SeminarList.js":"146","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/seminar/mySeminar/components/SeminarDetail.js":"147","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/marketingTool/actionQuestionnaire.js":"148","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/infoManage/InfoManage.js":"149","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/infoManage/InfoClassify.js":"150","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/phoneList/CmpPhoneImport.js":"151","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/seminar/mySeminar/components/UpcomingSeminar.js":"152","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/seminar/mySeminar/components/HistorySeminar.js":"153","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/infoManage/components/InfoClassify/CmpInfoClassifyEdit.js":"154","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/infoManage/components/InfoManage/CmpDocList.js":"155","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/infoManage/components/InfoManage/CmpInfoEdit.js":"156","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/infoManage/components/InfoManage/CmpInfoList.js":"157","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/infoManage/components/InfoClassify/CmpInfoClassifyList.js":"158","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/seminar/mySeminar/components/CancelSeminar.js":"159","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/infoManage/actionInfoClassify.js":"160","/Users/fengjiqiang/practice/react-queationnaire-demo/src/libs/citys.js":"161","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/InviteModal.js":"162","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/GroupManage.js":"163","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/PhoneList.js":"164","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/UserFieldsSetting.js":"165","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/VODManage/VideoManage.js":"166","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/VODManage/VODManage.js":"167","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/UnauthedUserList.js":"168","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/AuthorityManage.js":"169","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/UserList.js":"170","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/personalInfo/PersonalInfo.js":"171","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/RLTree.js":"172","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/phoneList/CmpPhoneList.js":"173","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/userManage/actionUserList.js":"174","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/unauthedUser/CmpAuthedDetail.js":"175","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/groupManage/AddGroupUser.js":"176","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/unauthedUser/CmpUnauthedUserList.js":"177","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/unauthedUser/CmpAuthed.js":"178","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/userFieldsSetting/CmpUserFieldsSetting.js":"179","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/authorityManage/CmpMemberList.js":"180","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/authorityManage/CmpRoleDetail.js":"181","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/authorityManage/CmpRoleEdit.js":"182","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/authorityManage/CmpRoleList.js":"183","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/userList/CmpUserEdit.js":"184","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/userList/CmpUserList.js":"185","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/userList/CmpUserDetail.js":"186","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/userList/CmpUserImport.js":"187","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/VODManage/components/VODManage/CmpVODEdit.js":"188","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/VODManage/components/VODManage/CmpCommentEdit.js":"189","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/VODManage/components/VODManage/CmpChapterEdit.js":"190","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/VODManage/components/VODManage/CmpChapterList.js":"191","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/VODManage/components/VODManage/CmpCommentList.js":"192","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/VODManage/components/VODManage/CmpPlayList.js":"193","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/VODManage/components/VODManage/CmpVODList.js":"194","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/VODManage/components/VODManage/CmpResourceList.js":"195","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/VODManage/components/videoManage/CmpVideoList.js":"196","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/userManage/actionRoleManage.js":"197","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/unauthedUser/UnauthedList.js":"198","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/userManage/actionUnauthedUserList.js":"199","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/userFieldsSetting/RegisterField.js":"200","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/userFieldsSetting/CertificationField.js":"201","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/unauthedUser/ProcessedList.js":"202","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/authorityManage/CmpAuthTree.js":"203","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/VODManage/components/videoManage/CmpVideoPlayer.js":"204","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/VODManage/components/videoManage/CmpVideoUpload.js":"205","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/VODManage/components/VODManage/CmpAddVideo.js":"206","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/roomDevice/actionAdvertiseManage.js":"207","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/roomDevice/actionDeviceManage.js":"208","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/userManage/actionUserFieldsSetting.js":"209","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/marketingTool/components/Questionnaire/components/QuestionnaireEditor.js":"210"},{"size":1782,"mtime":1614674726636,"results":"211","hashOfConfig":"212"},{"size":4819,"mtime":1624171711612,"results":"213","hashOfConfig":"212"},{"size":609,"mtime":1614216894140,"results":"214","hashOfConfig":"212"},{"size":1854,"mtime":1614216894128,"results":"215","hashOfConfig":"212"},{"size":4438,"mtime":1624173636761,"results":"216","hashOfConfig":"212"},{"size":362,"mtime":1614216894139,"results":"217","hashOfConfig":"212"},{"size":12097,"mtime":1619492171526,"results":"218","hashOfConfig":"212"},{"size":9988,"mtime":1615981564048,"results":"219","hashOfConfig":"212"},{"size":692,"mtime":1618302413797,"results":"220","hashOfConfig":"212"},{"size":682,"mtime":1624172669555,"results":"221","hashOfConfig":"212"},{"size":141,"mtime":1614216894128,"results":"222","hashOfConfig":"212"},{"size":4299,"mtime":1614216894125,"results":"223","hashOfConfig":"212"},{"size":1823,"mtime":1614216894127,"results":"224","hashOfConfig":"212"},{"size":1767,"mtime":1615981564048,"results":"225","hashOfConfig":"212"},{"size":4336,"mtime":1621067245213,"results":"226","hashOfConfig":"212"},{"size":1142,"mtime":1614216894128,"results":"227","hashOfConfig":"212"},{"size":11882,"mtime":1624171762685,"results":"228","hashOfConfig":"212"},{"size":4248,"mtime":1624173018026,"results":"229","hashOfConfig":"212"},{"size":3448,"mtime":1614216997017,"results":"230","hashOfConfig":"212"},{"size":1471,"mtime":1616552630300,"results":"231","hashOfConfig":"212"},{"size":7929,"mtime":1616461943935,"results":"232","hashOfConfig":"212"},{"size":2318,"mtime":1617161214908,"results":"233","hashOfConfig":"212"},{"size":1572,"mtime":1614216894128,"results":"234","hashOfConfig":"212"},{"size":18530,"mtime":1624174272716,"results":"235","hashOfConfig":"212"},{"size":2412,"mtime":1624173766218,"results":"236","hashOfConfig":"212"},{"size":3558,"mtime":1618918273525,"results":"237","hashOfConfig":"212"},{"size":1394,"mtime":1618448813082,"results":"238","hashOfConfig":"212"},{"size":1430,"mtime":1614674726639,"results":"239","hashOfConfig":"212"},{"size":3313,"mtime":1615981564052,"results":"240","hashOfConfig":"212"},{"size":2075,"mtime":1614216894127,"results":"241","hashOfConfig":"212"},{"size":1393,"mtime":1614216894127,"results":"242","hashOfConfig":"212"},{"size":2460,"mtime":1620612032407,"results":"243","hashOfConfig":"212"},{"size":667,"mtime":1614735429003,"results":"244","hashOfConfig":"212"},{"size":416,"mtime":1614216894126,"results":"245","hashOfConfig":"212"},{"size":370,"mtime":1614216894126,"results":"246","hashOfConfig":"212"},{"size":1090,"mtime":1614216894126,"results":"247","hashOfConfig":"212"},{"size":1913,"mtime":1619160621094,"results":"248","hashOfConfig":"212"},{"size":1924,"mtime":1614216894125,"results":"249","hashOfConfig":"212"},{"size":1670,"mtime":1614216894126,"results":"250","hashOfConfig":"212"},{"size":1370,"mtime":1614216894126,"results":"251","hashOfConfig":"212"},{"size":1438,"mtime":1614216894127,"results":"252","hashOfConfig":"212"},{"size":377,"mtime":1614216894126,"results":"253","hashOfConfig":"212"},{"size":383,"mtime":1614216894126,"results":"254","hashOfConfig":"212"},{"size":1045,"mtime":1614669609313,"results":"255","hashOfConfig":"212"},{"size":466,"mtime":1614216894125,"results":"256","hashOfConfig":"212"},{"size":403,"mtime":1614216894126,"results":"257","hashOfConfig":"212"},{"size":1638,"mtime":1618309172922,"results":"258","hashOfConfig":"212"},{"size":1528,"mtime":1618626548971,"results":"259","hashOfConfig":"212"},{"size":468,"mtime":1614216894125,"results":"260","hashOfConfig":"212"},{"size":474,"mtime":1614216894126,"results":"261","hashOfConfig":"212"},{"size":403,"mtime":1614216894127,"results":"262","hashOfConfig":"212"},{"size":620,"mtime":1614216894127,"results":"263","hashOfConfig":"212"},{"size":3663,"mtime":1614216894127,"results":"264","hashOfConfig":"212"},{"size":1634,"mtime":1617351065239,"results":"265","hashOfConfig":"212"},{"size":1247,"mtime":1614216894126,"results":"266","hashOfConfig":"212"},{"size":374,"mtime":1614216894127,"results":"267","hashOfConfig":"212"},{"size":903,"mtime":1614327530832,"results":"268","hashOfConfig":"212"},{"size":451,"mtime":1614216894126,"results":"269","hashOfConfig":"212"},{"size":447,"mtime":1614216894127,"results":"270","hashOfConfig":"212"},{"size":2467,"mtime":1614218430926,"results":"271","hashOfConfig":"212"},{"size":2629,"mtime":1614735429003,"results":"272","hashOfConfig":"212"},{"size":382,"mtime":1614216894126,"results":"273","hashOfConfig":"212"},{"size":344,"mtime":1614216894140,"results":"274","hashOfConfig":"212"},{"size":515,"mtime":1614216894141,"results":"275","hashOfConfig":"212"},{"size":904,"mtime":1614327530838,"results":"276","hashOfConfig":"212"},{"size":863,"mtime":1624171868948,"results":"277","hashOfConfig":"212"},{"size":338,"mtime":1614327530838,"results":"278","hashOfConfig":"212"},{"size":1602,"mtime":1614216997017,"results":"279","hashOfConfig":"212"},{"size":4780,"mtime":1624176381892,"results":"280","hashOfConfig":"212"},{"size":3001,"mtime":1617766902506,"results":"281","hashOfConfig":"212"},{"size":806,"mtime":1614216894128,"results":"282","hashOfConfig":"212"},{"size":4334,"mtime":1624171841468,"results":"283","hashOfConfig":"212"},{"size":622,"mtime":1621067245213,"results":"284","hashOfConfig":"212"},{"size":2729,"mtime":1615980502330,"results":"285","hashOfConfig":"212"},{"size":5786,"mtime":1618794316069,"results":"286","hashOfConfig":"212"},{"size":4548,"mtime":1618448813081,"results":"287","hashOfConfig":"212"},{"size":4696,"mtime":1618448813082,"results":"288","hashOfConfig":"212"},{"size":17823,"mtime":1619259990948,"results":"289","hashOfConfig":"212"},{"size":10563,"mtime":1619259990947,"results":"290","hashOfConfig":"212"},{"size":1927,"mtime":1614669609313,"results":"291","hashOfConfig":"212"},{"size":2403,"mtime":1618794316070,"results":"292","hashOfConfig":"212"},{"size":7731,"mtime":1619523549668,"results":"293","hashOfConfig":"212"},{"size":7305,"mtime":1619523549669,"results":"294","hashOfConfig":"212"},{"size":11857,"mtime":1619523549669,"results":"295","hashOfConfig":"212"},{"size":32408,"mtime":1623826364508,"results":"296","hashOfConfig":"212"},{"size":5440,"mtime":1618794316070,"results":"297","hashOfConfig":"212"},{"size":2753,"mtime":1623306923981,"results":"298","hashOfConfig":"212"},{"size":7053,"mtime":1624171779433,"results":"299","hashOfConfig":"212"},{"size":12975,"mtime":1620893104799,"results":"300","hashOfConfig":"212"},{"size":11875,"mtime":1619432969600,"results":"301","hashOfConfig":"212"},{"size":13710,"mtime":1620893104799,"results":"302","hashOfConfig":"212"},{"size":12572,"mtime":1616461943938,"results":"303","hashOfConfig":"212"},{"size":715,"mtime":1614216894138,"results":"304","hashOfConfig":"212"},{"size":2573,"mtime":1624173000468,"results":"305","hashOfConfig":"212"},{"size":1667,"mtime":1620437599245,"results":"306","hashOfConfig":"212"},{"size":1606,"mtime":1618380379183,"results":"307","hashOfConfig":"212"},{"size":1313,"mtime":1618540533612,"results":"308","hashOfConfig":"212"},{"size":8700,"mtime":1622432829171,"results":"309","hashOfConfig":"212"},{"size":19656,"mtime":1616461943937,"results":"310","hashOfConfig":"212"},{"size":5636,"mtime":1615981564049,"results":"311","hashOfConfig":"212"},{"size":13817,"mtime":1620869160937,"results":"312","hashOfConfig":"212"},{"size":3533,"mtime":1615981564049,"results":"313","hashOfConfig":"212"},{"size":11091,"mtime":1619424607014,"results":"314","hashOfConfig":"212"},{"size":72737,"mtime":1624002880085,"results":"315","hashOfConfig":"212"},{"size":4332,"mtime":1619096553564,"results":"316","hashOfConfig":"212"},{"size":12309,"mtime":1620612032406,"results":"317","hashOfConfig":"212"},{"size":14690,"mtime":1619436371170,"results":"318","hashOfConfig":"212"},{"size":46098,"mtime":1623306923979,"results":"319","hashOfConfig":"212"},{"size":13438,"mtime":1619430974765,"results":"320","hashOfConfig":"212"},{"size":921,"mtime":1614216894140,"results":"321","hashOfConfig":"212"},{"size":3417,"mtime":1624173006246,"results":"322","hashOfConfig":"212"},{"size":1855,"mtime":1614216894134,"results":"323","hashOfConfig":"212"},{"size":1224,"mtime":1614216997016,"results":"324","hashOfConfig":"212"},{"size":3951,"mtime":1615981564032,"results":"325","hashOfConfig":"212"},{"size":11415,"mtime":1619432021371,"results":"326","hashOfConfig":"212"},{"size":1640,"mtime":1615981564035,"results":"327","hashOfConfig":"212"},{"size":10681,"mtime":1619432012734,"results":"328","hashOfConfig":"212"},{"size":11561,"mtime":1619431981261,"results":"329","hashOfConfig":"212"},{"size":2289,"mtime":1620612032407,"results":"330","hashOfConfig":"212"},{"size":22082,"mtime":1620893104798,"results":"331","hashOfConfig":"212"},{"size":35033,"mtime":1620893104796,"results":"332","hashOfConfig":"212"},{"size":22101,"mtime":1620893104797,"results":"333","hashOfConfig":"212"},{"size":2281,"mtime":1619428243526,"results":"334","hashOfConfig":"212"},{"size":11360,"mtime":1620983590124,"results":"335","hashOfConfig":"212"},{"size":21178,"mtime":1621585317684,"results":"336","hashOfConfig":"212"},{"size":9710,"mtime":1624173490730,"results":"337","hashOfConfig":"212"},{"size":23690,"mtime":1623839244947,"results":"338","hashOfConfig":"212"},{"size":17690,"mtime":1620893104798,"results":"339","hashOfConfig":"212"},{"size":15232,"mtime":1623838745152,"results":"340","hashOfConfig":"212"},{"size":43032,"mtime":1620377583019,"results":"341","hashOfConfig":"212"},{"size":18234,"mtime":1621998851349,"results":"342","hashOfConfig":"212"},{"size":2418,"mtime":1618890524206,"results":"343","hashOfConfig":"212"},{"size":1101,"mtime":1624173494807,"results":"344","hashOfConfig":"212"},{"size":30925,"mtime":1624172240060,"results":"345","hashOfConfig":"212"},{"size":17150,"mtime":1620983626583,"results":"346","hashOfConfig":"212"},{"size":10366,"mtime":1620983697277,"results":"347","hashOfConfig":"212"},{"size":4299,"mtime":1614216894129,"results":"348","hashOfConfig":"212"},{"size":2076,"mtime":1618540533608,"results":"349","hashOfConfig":"212"},{"size":6778,"mtime":1615981564032,"results":"350","hashOfConfig":"212"},{"size":6487,"mtime":1615981564032,"results":"351","hashOfConfig":"212"},{"size":4903,"mtime":1618888050501,"results":"352","hashOfConfig":"212"},{"size":1096,"mtime":1618540533616,"results":"353","hashOfConfig":"212"},{"size":2039,"mtime":1619227588076,"results":"354","hashOfConfig":"212"},{"size":2606,"mtime":1624171770957,"results":"355","hashOfConfig":"212"},{"size":16055,"mtime":1614216894134,"results":"356","hashOfConfig":"212"},{"size":6310,"mtime":1614216894134,"results":"357","hashOfConfig":"212"},{"size":35244,"mtime":1614216894134,"results":"358","hashOfConfig":"212"},{"size":1929,"mtime":1620437599246,"results":"359","hashOfConfig":"212"},{"size":1530,"mtime":1616752967121,"results":"360","hashOfConfig":"212"},{"size":1310,"mtime":1616486687896,"results":"361","hashOfConfig":"212"},{"size":12581,"mtime":1624171794821,"results":"362","hashOfConfig":"212"},{"size":6256,"mtime":1614216894134,"results":"363","hashOfConfig":"212"},{"size":4626,"mtime":1615981564034,"results":"364","hashOfConfig":"212"},{"size":8460,"mtime":1619342930286,"results":"365","hashOfConfig":"212"},{"size":23510,"mtime":1620983441417,"results":"366","hashOfConfig":"212"},{"size":41672,"mtime":1624173844853,"results":"367","hashOfConfig":"212"},{"size":17727,"mtime":1620983431329,"results":"368","hashOfConfig":"212"},{"size":10060,"mtime":1620983396608,"results":"369","hashOfConfig":"212"},{"size":4270,"mtime":1614216894134,"results":"370","hashOfConfig":"212"},{"size":1387,"mtime":1616725844567,"results":"371","hashOfConfig":"212"},{"size":5863,"mtime":1614216894128,"results":"372","hashOfConfig":"212"},{"size":3727,"mtime":1614216894130,"results":"373","hashOfConfig":"212"},{"size":34444,"mtime":1620983381784,"results":"374","hashOfConfig":"212"},{"size":1395,"mtime":1618302413795,"results":"375","hashOfConfig":"212"},{"size":922,"mtime":1614394958052,"results":"376","hashOfConfig":"212"},{"size":978,"mtime":1615981564026,"results":"377","hashOfConfig":"212"},{"size":3049,"mtime":1615981564026,"results":"378","hashOfConfig":"212"},{"size":1576,"mtime":1614394958052,"results":"379","hashOfConfig":"212"},{"size":2219,"mtime":1614669609318,"results":"380","hashOfConfig":"212"},{"size":1997,"mtime":1614669609319,"results":"381","hashOfConfig":"212"},{"size":49687,"mtime":1624583994724,"results":"382","hashOfConfig":"212"},{"size":10958,"mtime":1614216894130,"results":"383","hashOfConfig":"212"},{"size":6391,"mtime":1619441892428,"results":"384","hashOfConfig":"212"},{"size":3290,"mtime":1624173498410,"results":"385","hashOfConfig":"212"},{"size":8125,"mtime":1619227588057,"results":"386","hashOfConfig":"212"},{"size":8492,"mtime":1616052836624,"results":"387","hashOfConfig":"212"},{"size":2349,"mtime":1616057631680,"results":"388","hashOfConfig":"212"},{"size":11201,"mtime":1619227587998,"results":"389","hashOfConfig":"212"},{"size":2305,"mtime":1614394958054,"results":"390","hashOfConfig":"212"},{"size":15371,"mtime":1620639293305,"results":"391","hashOfConfig":"212"},{"size":4358,"mtime":1624173010401,"results":"392","hashOfConfig":"212"},{"size":8240,"mtime":1618818974078,"results":"393","hashOfConfig":"212"},{"size":10124,"mtime":1620639243011,"results":"394","hashOfConfig":"212"},{"size":33458,"mtime":1619343018793,"results":"395","hashOfConfig":"212"},{"size":33665,"mtime":1620983352522,"results":"396","hashOfConfig":"212"},{"size":10493,"mtime":1619227588039,"results":"397","hashOfConfig":"212"},{"size":12840,"mtime":1624171826802,"results":"398","hashOfConfig":"212"},{"size":24645,"mtime":1624173851704,"results":"399","hashOfConfig":"212"},{"size":6640,"mtime":1618230839699,"results":"400","hashOfConfig":"212"},{"size":14660,"mtime":1620895561486,"results":"401","hashOfConfig":"212"},{"size":12425,"mtime":1621235480917,"results":"402","hashOfConfig":"212"},{"size":11495,"mtime":1618540533611,"results":"403","hashOfConfig":"212"},{"size":5413,"mtime":1615981564027,"results":"404","hashOfConfig":"212"},{"size":20138,"mtime":1619516274166,"results":"405","hashOfConfig":"212"},{"size":17550,"mtime":1619076244436,"results":"406","hashOfConfig":"212"},{"size":22671,"mtime":1621585317682,"results":"407","hashOfConfig":"212"},{"size":1593,"mtime":1615981564050,"results":"408","hashOfConfig":"212"},{"size":16032,"mtime":1620983301242,"results":"409","hashOfConfig":"212"},{"size":1313,"mtime":1619095283224,"results":"410","hashOfConfig":"212"},{"size":3822,"mtime":1623306956245,"results":"411","hashOfConfig":"212"},{"size":3860,"mtime":1623306941708,"results":"412","hashOfConfig":"212"},{"size":12913,"mtime":1620983318747,"results":"413","hashOfConfig":"212"},{"size":8866,"mtime":1615981564041,"results":"414","hashOfConfig":"212"},{"size":3911,"mtime":1618888050499,"results":"415","hashOfConfig":"212"},{"size":6980,"mtime":1621235480919,"results":"416","hashOfConfig":"212"},{"size":8972,"mtime":1618825893486,"results":"417","hashOfConfig":"212"},{"size":1803,"mtime":1615981564049,"results":"418","hashOfConfig":"212"},{"size":2691,"mtime":1615981564049,"results":"419","hashOfConfig":"212"},{"size":911,"mtime":1615981564051,"results":"420","hashOfConfig":"212"},{"size":15010,"mtime":1624172246971,"results":"421","hashOfConfig":"212"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"424","usedDeprecatedRules":"425"},"1llm1f0",{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"432","usedDeprecatedRules":"425"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"435","usedDeprecatedRules":"425"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"440","usedDeprecatedRules":"425"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"443","usedDeprecatedRules":"425"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"446","usedDeprecatedRules":"425"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"449","usedDeprecatedRules":"425"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"454","usedDeprecatedRules":"425"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"463","usedDeprecatedRules":"425"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"466","usedDeprecatedRules":"425"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"473","usedDeprecatedRules":"425"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"478","usedDeprecatedRules":"425"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"481","usedDeprecatedRules":"425"},{"filePath":"482","messages":"483","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"486","usedDeprecatedRules":"425"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"489","usedDeprecatedRules":"425"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"492","usedDeprecatedRules":"425"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"501","messages":"502","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"513","messages":"514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"517","usedDeprecatedRules":"425"},{"filePath":"518","messages":"519","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"528","messages":"529","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"530","messages":"531","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"532","messages":"533","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"534","messages":"535","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"536","messages":"537","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"540","messages":"541","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"542","messages":"543","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"544","messages":"545","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"548","messages":"549","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"550","messages":"551","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"556","messages":"557","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"558","usedDeprecatedRules":"425"},{"filePath":"559","messages":"560","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"561","messages":"562","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"563","messages":"564","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"565","messages":"566","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"567","messages":"568","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"569","messages":"570","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"571","usedDeprecatedRules":"425"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"576","messages":"577","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"578","usedDeprecatedRules":"425"},{"filePath":"579","messages":"580","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"581","usedDeprecatedRules":"425"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"584","messages":"585","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"586","messages":"587","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"588","messages":"589","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"590","usedDeprecatedRules":"425"},{"filePath":"591","messages":"592","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"593","usedDeprecatedRules":"425"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"596","messages":"597","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"598","messages":"599","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"602","usedDeprecatedRules":"425"},{"filePath":"603","messages":"604","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"605","messages":"606","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"607","messages":"608","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"609","messages":"610","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"611","usedDeprecatedRules":"425"},{"filePath":"612","messages":"613","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"614","usedDeprecatedRules":"425"},{"filePath":"615","messages":"616","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"617","usedDeprecatedRules":"425"},{"filePath":"618","messages":"619","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"620","usedDeprecatedRules":"425"},{"filePath":"621","messages":"622","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"623","usedDeprecatedRules":"425"},{"filePath":"624","messages":"625","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"626","usedDeprecatedRules":"425"},{"filePath":"627","messages":"628","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"629","usedDeprecatedRules":"425"},{"filePath":"630","messages":"631","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"632","usedDeprecatedRules":"425"},{"filePath":"633","messages":"634","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"635","usedDeprecatedRules":"425"},{"filePath":"636","messages":"637","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"638","usedDeprecatedRules":"425"},{"filePath":"639","messages":"640","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"641","usedDeprecatedRules":"425"},{"filePath":"642","messages":"643","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"644","messages":"645","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"646","usedDeprecatedRules":"425"},{"filePath":"647","messages":"648","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"649","messages":"650","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"651","messages":"652","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"653","messages":"654","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"655","usedDeprecatedRules":"425"},{"filePath":"656","messages":"657","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"658","usedDeprecatedRules":"425"},{"filePath":"659","messages":"660","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"661","usedDeprecatedRules":"425"},{"filePath":"662","messages":"663","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"664","usedDeprecatedRules":"425"},{"filePath":"665","messages":"666","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"667","usedDeprecatedRules":"425"},{"filePath":"668","messages":"669","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"670","usedDeprecatedRules":"425"},{"filePath":"671","messages":"672","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"673","usedDeprecatedRules":"425"},{"filePath":"674","messages":"675","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"676","usedDeprecatedRules":"425"},{"filePath":"677","messages":"678","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"679","usedDeprecatedRules":"425"},{"filePath":"680","messages":"681","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"682","usedDeprecatedRules":"425"},{"filePath":"683","messages":"684","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"685","usedDeprecatedRules":"425"},{"filePath":"686","messages":"687","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"688","usedDeprecatedRules":"425"},{"filePath":"689","messages":"690","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"691","messages":"692","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"693","usedDeprecatedRules":"425"},{"filePath":"694","messages":"695","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"696","usedDeprecatedRules":"425"},{"filePath":"697","messages":"698","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"699","messages":"700","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"701","usedDeprecatedRules":"425"},{"filePath":"702","messages":"703","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"704","usedDeprecatedRules":"425"},{"filePath":"705","messages":"706","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"707","messages":"708","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"709","usedDeprecatedRules":"425"},{"filePath":"710","messages":"711","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"712","usedDeprecatedRules":"425"},{"filePath":"713","messages":"714","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"715","usedDeprecatedRules":"425"},{"filePath":"716","messages":"717","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"718","usedDeprecatedRules":"425"},{"filePath":"719","messages":"720","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"721","usedDeprecatedRules":"425"},{"filePath":"722","messages":"723","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"724","usedDeprecatedRules":"425"},{"filePath":"725","messages":"726","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"727","usedDeprecatedRules":"425"},{"filePath":"728","messages":"729","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"730","usedDeprecatedRules":"425"},{"filePath":"731","messages":"732","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"733","usedDeprecatedRules":"425"},{"filePath":"734","messages":"735","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"736","usedDeprecatedRules":"425"},{"filePath":"737","messages":"738","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"739","usedDeprecatedRules":"425"},{"filePath":"740","messages":"741","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"742","usedDeprecatedRules":"425"},{"filePath":"743","messages":"744","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"745","usedDeprecatedRules":"425"},{"filePath":"746","messages":"747","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"748","usedDeprecatedRules":"425"},{"filePath":"749","messages":"750","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"751","usedDeprecatedRules":"425"},{"filePath":"752","messages":"753","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"754","usedDeprecatedRules":"425"},{"filePath":"755","messages":"756","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"757","usedDeprecatedRules":"425"},{"filePath":"758","messages":"759","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"760","usedDeprecatedRules":"425"},{"filePath":"761","messages":"762","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"763","usedDeprecatedRules":"425"},{"filePath":"764","messages":"765","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"766","usedDeprecatedRules":"425"},{"filePath":"767","messages":"768","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"769","messages":"770","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"771","messages":"772","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"773","usedDeprecatedRules":"425"},{"filePath":"774","messages":"775","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"776","messages":"777","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"778","messages":"779","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"780","usedDeprecatedRules":"425"},{"filePath":"781","messages":"782","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"783","usedDeprecatedRules":"425"},{"filePath":"784","messages":"785","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"786","usedDeprecatedRules":"425"},{"filePath":"787","messages":"788","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"789","usedDeprecatedRules":"425"},{"filePath":"790","messages":"791","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"792","usedDeprecatedRules":"425"},{"filePath":"793","messages":"794","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"795","usedDeprecatedRules":"425"},{"filePath":"796","messages":"797","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"798","usedDeprecatedRules":"425"},{"filePath":"799","messages":"800","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"801","messages":"802","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"803","messages":"804","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"805","usedDeprecatedRules":"425"},{"filePath":"806","messages":"807","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"808","usedDeprecatedRules":"425"},{"filePath":"809","messages":"810","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"811","usedDeprecatedRules":"425"},{"filePath":"812","messages":"813","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"814","messages":"815","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"816","messages":"817","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"818","usedDeprecatedRules":"425"},{"filePath":"819","messages":"820","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"821","messages":"822","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"823","usedDeprecatedRules":"425"},{"filePath":"824","messages":"825","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"826","usedDeprecatedRules":"425"},{"filePath":"827","messages":"828","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"829","usedDeprecatedRules":"425"},{"filePath":"830","messages":"831","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"832"},{"filePath":"833","messages":"834","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"835","messages":"836","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"837","usedDeprecatedRules":"425"},{"filePath":"838","messages":"839","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"840","messages":"841","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"842","usedDeprecatedRules":"425"},{"filePath":"843","messages":"844","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"845","messages":"846","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"847","messages":"848","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"849","usedDeprecatedRules":"425"},{"filePath":"850","messages":"851","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"852","usedDeprecatedRules":"425"},{"filePath":"853","messages":"854","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"855","usedDeprecatedRules":"425"},{"filePath":"856","messages":"857","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"858","messages":"859","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"860","messages":"861","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"862","usedDeprecatedRules":"425"},{"filePath":"863","messages":"864","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"865","usedDeprecatedRules":"425"},{"filePath":"866","messages":"867","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"868","usedDeprecatedRules":"425"},{"filePath":"869","messages":"870","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"871","messages":"872","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"873","messages":"874","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"875","usedDeprecatedRules":"425"},{"filePath":"876","messages":"877","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"878","messages":"879","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"880","usedDeprecatedRules":"425"},{"filePath":"881","messages":"882","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"883","usedDeprecatedRules":"425"},{"filePath":"884","messages":"885","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"886","usedDeprecatedRules":"425"},{"filePath":"887","messages":"888","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"889","usedDeprecatedRules":"425"},{"filePath":"890","messages":"891","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"892","usedDeprecatedRules":"425"},{"filePath":"893","messages":"894","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"895","usedDeprecatedRules":"425"},{"filePath":"896","messages":"897","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"898","usedDeprecatedRules":"425"},{"filePath":"899","messages":"900","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"901","usedDeprecatedRules":"425"},{"filePath":"902","messages":"903","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"904","usedDeprecatedRules":"425"},{"filePath":"905","messages":"906","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"907","usedDeprecatedRules":"425"},{"filePath":"908","messages":"909","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"910","usedDeprecatedRules":"425"},{"filePath":"911","messages":"912","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"913","usedDeprecatedRules":"425"},{"filePath":"914","messages":"915","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"916","usedDeprecatedRules":"425"},{"filePath":"917","messages":"918","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"919","usedDeprecatedRules":"425"},{"filePath":"920","messages":"921","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"922","usedDeprecatedRules":"425"},{"filePath":"923","messages":"924","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"925","usedDeprecatedRules":"425"},{"filePath":"926","messages":"927","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"928","usedDeprecatedRules":"425"},{"filePath":"929","messages":"930","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"931","usedDeprecatedRules":"425"},{"filePath":"932","messages":"933","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"934","usedDeprecatedRules":"425"},{"filePath":"935","messages":"936","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"937","usedDeprecatedRules":"425"},{"filePath":"938","messages":"939","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"940","messages":"941","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"425"},{"filePath":"942","messages":"943","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"944","usedDeprecatedRules":"425"},{"filePath":"945","messages":"946","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"947","usedDeprecatedRules":"425"},{"filePath":"948","messages":"949","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"950","usedDeprecatedRules":"425"},{"filePath":"951","messages":"952","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"953","usedDeprecatedRules":"425"},{"filePath":"954","messages":"955","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"956","usedDeprecatedRules":"425"},{"filePath":"957","messages":"958","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"959","usedDeprecatedRules":"832"},{"filePath":"960","messages":"961","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"962","usedDeprecatedRules":"832"},{"filePath":"963","messages":"964","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"965","usedDeprecatedRules":"425"},{"filePath":"966","messages":"967","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"968","usedDeprecatedRules":"425"},"/Users/fengjiqiang/practice/react-queationnaire-demo/src/index.js",["969","970"],"import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport Login from '@/pages/login/Login.js'\nimport 'antd/dist/antd.less'\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport { HashRouter, BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport store from './store/index.js'\nimport './libs/plugins.js'\nimport commonActions from './store/actions/commonActions';\nimport config from '@/config.js'\nfunction banBack() {\n  window.history.pushState(null, null, document.URL);\n  window.addEventListener(\"popstate\", function () {\n    window.history.pushState(null, null, document.URL);\n  });\n}\nbanBack()\n// 获取权限列表\nfunction getPermission() {\n  return commonActions.getPermission()\n}\nfunction getAccountType() {\n  return commonActions.getAccountType()\n}\n// 开始渲染app\nfunction renderApp() {\n  ReactDOM.render(\n    <Provider store={store} >\n      <HashRouter>\n        {/* <Route path=\"/\" component={App} /> */}\n        <Switch>\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/\" component={App} />\n          <Redirect key='/' from=\"\" to=\"/personalinfo\" />\n        </Switch>\n      </HashRouter>\n    </Provider>,\n    document.getElementById('root')\n  );\n}\nfunction getToken() {\n  return commonActions.getToken()\n}\n// 渲染前准备工作\nfunction appInit() {\n  return getToken().then(() => {\n    console.log(config.token)\n    return Promise.all([getPermission(), getAccountType()])\n  })\n}\n\nrenderApp()\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["971","972"],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/config.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/index.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/libs/plugins.js",["973","974","975"],"/** * 对Date的扩展，将 Date 转化为指定格式的String * 月(M)、日(d)、12小时(h)、24小时(H)、分(m)、秒(s)、周(E)、季度(q)\n    可以用 1-2 个占位符 * 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字) * eg: * (new\n    Date()).format(\"yyyy-MM-dd hh:mm:ss.S\")==> 2006-07-02 08:09:04.423\n * (new Date()).format(\"yyyy-MM-dd E HH:mm:ss\") ==> 2009-03-10 二 20:09:04\n * (new Date()).format(\"yyyy-MM-dd EE hh:mm:ss\") ==> 2009-03-10 周二 08:09:04\n * (new Date()).format(\"yyyy-MM-dd EEE hh:mm:ss\") ==> 2009-03-10 星期二 08:09:04\n * (new Date()).format(\"yyyy-M-d h:m:s.S\") ==> 2006-7-2 8:9:4.18\n */\nDate.prototype.format = function (fmt) {\n    let o = {\n        'M+': this.getMonth() + 1, //月份\n        'd+': this.getDate(), //日\n        'h+': this.getHours() % 12 == 0 ? 12 : this.getHours() % 12, //小时\n        'n+': this.getHours(), //24时制小时\n\n        'H+': this.getHours(), //小时\n        'm+': this.getMinutes(), //分\n        's+': this.getSeconds(), //秒\n        'q+': Math.floor((this.getMonth() + 3) / 3), //季度\n        'S': this.getMilliseconds() //毫秒\n    };\n    let week = {\n        '0': '日',\n        '1': '一',\n        '2': '二',\n        '3': '三',\n        '4': '四',\n        '5': '五',\n        '6': '六'\n    };\n    if (/(y+)/.test(fmt)) {\n        fmt = fmt.replace(RegExp.$1, (this.getFullYear() + '').substr(4 - RegExp.$1.length));\n    }\n    if (/(E+)/.test(fmt)) {\n        fmt = fmt.replace(RegExp.$1, ((RegExp.$1.length > 1) ? (RegExp.$1.length > 2 ? '星期' : '周') : '') + week[this.getDay() + '']);\n    }\n    for (let k in o) {\n        if (new RegExp('(' + k + ')').test(fmt)) {\n            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (('00' + o[k]).substr(('' + o[k]).length)));\n        }\n    }\n    return fmt;\n}","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/login/Login.js",["976"],"import React from 'react'\nimport { connect } from 'react-redux'\nimport BaseCmp from '@components/BaseCmp.js'\nimport { Form } from 'antd'\nimport Cookies from 'js-cookie'\nimport { RLInput, RLButton } from '@components/index.js'\nimport { Input } from 'antd';\nimport actionLogin from '@actions/actionLogin.js'\n\nimport './login.less'\nimport images from '@/libs/images/index.js'\n\nconst commonImg = images.commonImg\n\nclass Login extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.state = {\n            userInfo: {\n                username: '',\n                password: ''\n            }\n        }\n    }\n\n    handleSubmit = () => {\n        const { username, password } = this.state.userInfo\n        actionLogin.login({\n            username,\n            password\n        }).then(res => {\n            if (res.code === 200) {\n                Cookies.set('token', res.data.token);\n                sessionStorage.setItem('token', res.data.token)\n                this.props.history.push('/personalinfo')\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        })\n    }\n\n    login = () => {\n        const { username, password } = this.state.userInfo\n        return (\n            <Form\n                name=\"normal_login\"\n                style={{ width: 300 }}\n                onFinish={this.handleSubmit}\n            >\n                <Form.Item\n                    name=\"username\"\n                    rules={[\n                        {\n                            required: true,\n                            message: '请填写用户名称',\n                        },\n                    ]}\n                >\n                    <RLInput\n                        inputStyle={{ border: 'none', borderBottom: '1px solid #e5e5e5', fontSize: 16, paddingLeft: 10, paddingRight: 0, paddingBottom: 8 }}\n                        placeholder=\"请输入账号\"\n                        onChange={(e) => {\n                            this.setState({\n                                userInfo: {\n                                    ...this.state.userInfo,\n                                    username: e.target.value\n                                }\n                            })\n                        }}\n                    />\n                </Form.Item>\n                <Form.Item\n                    name=\"password\"\n                    rules={[\n                        {\n                            required: true,\n                            message: '请填写登录密码',\n                        },\n                    ]}\n                >\n                    <Input.Password\n                        type=\"password\"\n                        visibilityToggle={true}\n                        inputStyle={{ border: 'none', borderBottom: '1px solid #e5e5e5', fontSize: 16, paddingLeft: 0, paddingRight: 0, paddingBottom: 8 }}\n                        placeholder=\"请输入密码\"\n                        onChange={(e) => {\n                            this.setState({\n                                userInfo: {\n                                    ...this.state.userInfo,\n                                    password: e.target.value\n                                }\n                            })\n                        }}\n                        style={{ border: 'none', borderBottom: '1px solid #e5e5e5', fontSize: 16}}\n                    />\n                </Form.Item>\n\n                <Form.Item>\n                    <RLButton\n                        className=\"login-button\"\n                        label=\"登 录\"\n                        type=\"primary\"\n                        htmlType=\"submit\"\n                        width=\"100%\"\n                        height={40}\n                        style={{ marginTop: 24 }}\n                        disabled={!username || !password}\n                    />\n                </Form.Item>\n            </Form>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"login-container\">\n                <div className=\"login-form\">\n                    <div style={{ height: 33, fontSize: 24, fontWeight: 500, marginTop: 16, marginBottom: 60 }}>\n                        z止于至善后台管理系统\n                    </div>\n                    { this.login() }\n                </div>\n            </div>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props\n    }\n})(Login)\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/reportWebVitals.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/App.js",["977","978"],"import $ from 'jquery'\nimport { connect } from 'react-redux'\nimport './assets/styles/App.less';\nimport LayoutMenu from './components/layout/LayoutMenu.js'  // 左侧菜单\n\nimport LayoutWindow from './components/layout/LayoutWindow.js'  // 主窗口\nimport BaseCmp from './components/BaseCmp.js'\nimport eventBus from '@/libs/EventBus.js'\nimport commonActions from '@/store/actions/commonActions.js'\nimport CopyInviteModal from '@/pages/common/CopyInviteModal.js'\nimport utils from '@/libs/utils.js'\nimport LayoutHeader from './components/layout/LayoutHeader';\nimport config from './config';\nimport actionPersonalInfo from './store/actions/personalInfo/actionPersonalInfo';\nimport actionVideoManage from './store/actions/VODManage/actionVideoManage';\nimport actionVODManage from './store/actions/VODManage/actionVODManage';\nimport actionInfoManage from '@actions/infoManage/actionInfoManage.js'\nimport store from './store/index.js'\nimport actionTypes from './store/actionTypes.js'\n// import Uploader from 'simple-uploader.js';\nimport Uploader from '@/libs/Uploader.js';\n\nimport { Progress } from 'antd';\nimport { RLModal, RLButton } from '@/components/index.js';\nimport  DraggableModal from './pages/common/DraggableModal.js';\n\n// import { DraggableModal, DraggableModalProvider } from 'ant-design-draggable-modal';'\n// import  Draggable from 'react-draggable';\n\nimport { Rnd } from 'react-rnd';\nimport images from '@/libs/images/index.js'\nconst commonImg = images.commonImg\nclass App extends BaseCmp {\n  constructor(props) {\n    super(props)\n    // super.initPushVC(props.history)\n    utils.initHistory(props);\n    this.state = {\n      uploadingFile: {},\n      percentage: 0,\n      uploadSucessful: false,\n      uploadFailed: false,\n      showUploadFailedModal: false,\n      showUploadSuccessModal: false,\n      uploadResponse: null\n    };\n\n    this.uploader = null;\n    this.timer = null;\n    // const token = commonActions.getToken()\n    const token = sessionStorage.getItem('token')\n    console.log('token:', token)\n    if (!token) {\n      utils.pushVC({ pathname: '/login' })\n    }\n    this.getMenuData();\n    commonActions.getPermission();\n    actionPersonalInfo.getUserInfo();\n  }\n  componentWillMount() {\n    eventBus.addListener('show-invite-modal', ({ meetingId }) => {\n      this.setState({\n        inviteMeetingId: meetingId\n      })\n    })\n  }\n  componentDidMount() {\n    this.updateTitle();\n    console.log($('#root'))\n    $('#root').resize((...rest) => {\n      console.log(rest)\n      console.log('尺寸变化')\n    });\n\n    eventBus.addListener('upload-video',(file, params)=>{\n        //开始上传\n        this.setState({\n          uploadingFile: file\n        });\n        this.uploadFile(file, params);\n    });\n\n  }\n  componentWillUnmount(){\n    eventBus.removeListener('upload-video');\n  }\n\n  UNSAFE_componentWillUpdate(nextProps) {\n\n  }\n  componentDidUpdate(nextProps) {\n    // console.log('--------------app路由更新----------------');\n    this.updateTitle(nextProps);\n  }\n\n  uploadFile(file,params){\n    console.log(`-------创建${file.name}的uploader--------`);\n    let uploader = new Uploader({\n      file, \n      method: 'POST', \n      baseURL: config.uploadBaseUrl,\n      url: '/api/playback/upload', \n      chunkSize: 2 * 1024 * 1024, \n      onStart: () => {\n        store.dispatch({\n          type: actionTypes.UPLOAD_STATE_CHANGE,\n          data: true\n        });\n      },\n      onSuccess: (res) => {\n        console.log('--------上传成功-------', res);\n        this.timer = setTimeout(() => {\n            this.setState({\n              showUploadSuccessModal: true,\n              percentage: 0.0\n            });\n            store.dispatch({\n              type: actionTypes.UPLOAD_STATE_CHANGE,\n              data: false\n            });\n        }, 1500);\n        if(params.type === 'video'){\n          let data = {\n            id: res.id\n          }\n          actionVideoManage.createRecord(data);\n          eventBus.emit('video_res_update');\n        }\n        else if(params.type === 'vod'){\n          let data = {\n            course_id: params.course_id,\n            title: file.name,\n            doc_url: res.url,\n            filesize: file.size,\n            is_down: params.is_down,\n          }\n          actionVODManage.resourceAdd(data).then(res=>{\n            eventBus.emit('vod_res_update');\n          });\n        }else if(params.type === 'info'){\n          let data = {\n            information_id: params.info_id,\n            title: file.name,\n            doc_url: res.url\n          }\n          actionInfoManage.infoDocAdd(data).then(res => {\n            console.log('资讯资料-------------', res)\n            if (res.code === 200) {\n              eventBus.emit('info_res_update')\n            }\n          })\n        }\n      }, \n      onError: () => {\n        console.log('--------上传失败-------');\n        this.setState({\n          showUploadFailedModal: true,\n          percentage: 0.0\n        });\n        store.dispatch({\n          type: actionTypes.UPLOAD_STATE_CHANGE,\n          data: false\n        });\n      }, \n      onProgress: (progress)=>{\n        console.log('-------上传进度---------', progress);\n        this.setState({\n          percentage: progress\n        });\n      },\n      onCancel: ()=>{\n        console.log('-------上传取消---------');\n        this.setState({\n          percentage: 0\n        })\n        store.dispatch({\n          type: actionTypes.UPLOAD_STATE_CHANGE,\n          data: false\n        });\n      }\n    });\n    uploader.upload({ ...params });\n  }\n\n  initPageTabs = (menus) => {\n\n    let currentPathname = this.props.history.location.pathname\n    console.log('this.props.history:', menus, currentPathname)\n    let menu = this.getRoute(menus, currentPathname)\n    console.log('app--menu:', menu, currentPathname)\n    commonActions.cacheRoutesChange({ type: 'add', route: menu })\n  }\n  getRoute = (menus, currentPathname) => {\n\n    for (let i = 0; i < menus.length; i++) {\n      if (!menus[i].children || !menus[i].children.length) {\n        if (menus[i].menu_route === currentPathname) {\n          return menus[i]\n        }\n      } else {\n        let menu = this.getRoute(menus[i].children, currentPathname)\n        if (menu) {\n          console.log('menu123', menu)\n          return menu\n        }\n      }\n    }\n  }\n  updateTitle(nextProps) {\n    commonActions.getPath(this.props.location.pathname)\n\n  }\n  // 获取左侧菜单json数据\n  getMenuData = () => {\n    return commonActions.getMenuData().then(res => {\n      if (res.code === 200) {\n        if (this.props.location.pathname === '/') {\n          commonActions.getPath('/personalinfo')\n        } else {\n          commonActions.getPath(this.props.location.pathname)\n        }\n        let cacheRoute = config.cacheRoute\n        if (cacheRoute) {\n          this.initPageTabs(res.data)\n        }\n\n      } else {\n        this.showToast({ type: 'error', content: res.msg })\n      }\n      return\n    })\n  }\n  cancelUpload = () => {\n      this.showModal({\n          content: '您确定要取消当前文件上传吗？',\n          title: '取消上传?',\n          okText: '确定',\n          cancelText: '取消',\n          onOk: () => {\n              this.uploader && this.uploader.cancel();\n              store.dispatch({\n                type: actionTypes.UPLOAD_STATE_CHANGE,\n                data: false\n              });\n          },\n          onCancel: () => { },\n          size: 'big'\n      })\n  }\n\n  render() {\n\n    return (\n        <div className=\"App\">\n          <LayoutHeader history={this.props.history} />\n\n          <div className='vertical-body' style={{position:'relative'}}>\n            <LayoutMenu style={{ width: '240px', overflowY: 'auto' }} history={this.props.history} />\n            <LayoutWindow style={{ flex: 1, overflow: 'auto' }} history={this.props.history} />\n          </div>\n          { this.state.showUploadSuccessModal && <RLModal \n              title=\"上传结果\"\n              visible={this.state.showUploadSuccessModal}\n              onCancel={()=>{\n                this.setState({showUploadSuccessModal: false})\n              }}\n              footer={null}\n            >\n              <div style={{ flexDirection: 'column', display: 'flex', alignItems: 'center' }}>\n                <img\n                  alt=''\n                  src={commonImg.success}\n                  style={{ width: 80, height: 80, marginBottom: 20 }}\n                />\n                <div style={{ color: '#333333' }}>\n                  {`${this.state.uploadingFile.name || ''} 上传成功`}\n                </div>\n              </div>\n              <div className='modal-btnContainer'>\n                <RLButton\n                  label='确定'\n                  type='primary'\n                  htmlType=\"submit\"\n                  style={{ margin: 'auto' }}\n                  onClick={() => {\n                    this.setState({ showUploadSuccessModal: false })\n                  }}\n                />\n              </div>\n          </RLModal>}\n          { this.state.showUploadFailedModal && <RLModal\n            title=\"上传结果\"\n            visible={this.state.showUploadFailedModal}\n            onCancel={()=>{\n              this.setState({ showUploadFailedModal: false})\n            }}\n            footer={null}\n            >\n            <div style={{ flexDirection: 'column', display: 'flex', alignItems: 'center' }}>\n              <img\n                alt=''\n                src={commonImg.fail}\n                style={{ width: 80, height: 80, marginBottom: 20 }}\n              />\n              <div style={{ color: '#333333' }}>\n                {`${this.state.uploadingFile.name || ''} 上传失败，请重新上传`}\n              </div>\n            </div>\n            <div className='modal-btnContainer'>\n              <RLButton\n                label='确定'\n                type='primary'\n                htmlType=\"submit\"\n                style={{ margin: 'auto' }}\n                onClick={() => {\n                  this.setState({ showUploadFailedModal: false })\n                }}\n              />\n            </div>\n          </RLModal>}\n            {\n                this.props.uploading && \n                  <Rnd\n                      default={{\n                        x: 0,\n                        y: 0,\n                        width: 350,\n                        height: 110,\n                      }}\n                      enableResizing={ false }\n                      bounds=\"window\"\n                  > \n                      <div style={{backgroundColor: '#808A87',display:'flex',flexDirection:'row',justifyContent:'center',flexWrap:'wrap',borderRadius: 4}}>\n                        <div style={{width: '100%', height: 30,display:'flex',flexDirection:'row',justifyContent:'flex-end',alignItems:'center'}}>\n                          {/* <img src='1.png' alt='' onClick={()=>{\n                              this.cancelUpload();\n                            }}\n                            style={{width:15,height:15,cursor:'pointer',marginRight:10}}\n                          /> */}\n                        </div>\n                        <div style={{width:'90%',height:30,display:'flex',flexDirection:'row',justifyContent:'center'}}>\n                          <span style={{ width: 255, whiteSpace: 'nowrap', textOverflow: 'ellipsis', overflow: 'hidden' }}>\n                            {this.state.uploadingFile && this.state.uploadingFile.name}\n                          </span>\n                          <span>正在上传</span>\n                        </div>\n                        <div style={{width:'95%',height: 50,display:'flex',flexDirection:'row',justifyContent:'center'}}>\n                           <Progress percent={this.state.percentage} style={{width: '90%',height: 40}}/>\n                        </div>\n                       \n                      </div>\n                  </Rnd>\n           }\n            \n        </div>\n    )\n  }\n}\n\n\nexport default connect((store, props) => {\n  return {\n      ...props,\n      uploading: store.storeCommon.uploading,\n      // uploading: true\n  }\n})(App)\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/commonActions.js",["979","980","981","982"],"import { getData } from '@/libs/utils.js'\nimport store from '@/store/index.js'\nimport Cookies from 'js-cookie'\nimport actionTypes from '@/store/actionTypes.js'\nimport interfaces from '@/api/interfaces.js'\nimport iframeMessage from '@/libs/IframeMessage.js'\nimport config from '@/config.js'\nimport utils from '@/libs/utils.js'\nimport CacheRoute, { dropByCacheKey, getCachingKeys } from 'react-router-cache-route'\nconst cacheRoute = config.cacheRoute\n\nlet commonAction = {\n    searchPath(menuData, keyPath) {\n        if (keyPath.startsWith('/')) {\n            keyPath = keyPath.substring(1);\n        }\n        keyPath = keyPath.split('/');\n        let pathArr = [];\n        // if (!menuData) return []\n        for (let i = 0; i < keyPath.length; i++) {\n            let item = menuData.filter(item => {\n                return item.menu_code.indexOf(keyPath[i]) >= 0\n            })[0];\n            if (!item) {\n                break;\n            }\n            pathArr.push(item);\n            menuData = item.children;\n            if (!menuData) {\n                break;\n            }\n        }\n\n        return pathArr\n    },\n    getPath(keyPath) {\n        let pathArr = this.searchPath(store.getState().storeCommon.menuData, keyPath);\n        if (pathArr.length) {\n            store.dispatch({ type: actionTypes.MENU_PATH, data: pathArr });\n        } else {\n            // enterpriseMenu\n            pathArr = this.searchPath(store.getState().storeCommon.menuData, keyPath);\n            store.dispatch({ type: actionTypes.MENU_PATH, data: pathArr });\n        }\n\n        // return pathArr\n    },\n    catchFrom(from) {\n        store.dispatch({ type: actionTypes.FROM, data: from })\n    },\n    menuDataManage(menus) {\n        if (Array.isArray(menus) && menus.length) {\n            for (let i = 0; i < menus.length; i++) {\n                if (menus[i].children && menus[i].children.length) {\n                    delete menus[i].menu_route\n                    this.menuDataManage(menus[i].children)\n                }\n            }\n        }\n    },\n    getMenuData() {\n        return getData({\n            method: 'POST',\n            url: interfaces.MENU\n        }).then(res => {\n            if (res.code === 200) {\n                let menus = res.data\n                if (!cacheRoute) {\n                    this.menuDataManage(menus)\n                }\n                store.dispatch({\n                    type: actionTypes.MENU_INIT,\n                    data: menus || [],\n                })\n            }\n            return res\n        })\n    },\n    envInit(env) {\n        store.dispatch({\n            type: actionTypes.REQUEST_HOST,\n            env\n        })\n        localStorage.setItem('env', env)\n    },\n    // 合法性校验\n    textCheck({ type = 'nickname', content }) {\n        let token = Cookies.get('token')\n        return getData({\n            method: 'post', url: interfaces.TEXT_CHECK, data: { type, content, token }\n        })\n    },\n    getCode({ mobile, type }) {   // 获取短信验证码\n        if (!mobile) {\n            return Promise.reject({ code: 400, msg: '请输入手机号' })\n        }\n        return getData({\n            method: 'POST',\n            url: interfaces.SMS_SEND,\n            data: { mobile, type },\n            extraCheckdelay: mobile\n        })\n    },\n    getImageCode({ mobile }) {  // 获取图片验证码\n        return getData({\n            method: 'get',\n            url: interfaces.GET_IMAGE_CODE,\n            data: { mobile }\n        })\n    },\n    mobileVerify({ mobile, msg_code }) { // 验证短信验证码\n        return getData({\n            method: 'post',\n            url: interfaces.MOBILE_VERIFY,\n            data: {\n                mobile, msg_code\n            }\n        })\n    },\n    imgCodeCheck({ mobile, code }) {    // 验证图形验证码\n        return getData({\n            method: 'get',\n            url: interfaces.IMAGE_CODE_CHECK,\n            data: {\n                mobile, code\n            }\n        })\n    },\n    // 获取登录账号类型\n    getAccountType() {\n        return getData({ method: 'post', url: interfaces.ACCOUNT_TYPE }).then(res => {\n            if (res.code === 200) {\n                let loginType = res.data.login_type\n                if (loginType === 'person') {\n                    loginType = 'personal'\n                }\n                store.dispatch({ type: actionTypes.INIT_ACCOUNT_TYPE, data: loginType });\n            }\n        })\n    },\n    // 更新树数据\n    updateTreeData(treeData) {\n        store.dispatch({ type: actionTypes.INVITE_TREE_DATA, data: treeData });\n    },\n    fileUpload(data) {\n        return getData({\n            method: 'post',\n            url: interfaces.FilE_UPLOAD,\n            data: data,\n            contentType: 'multipart/form-data'\n        })\n    },\n    // 上传图片\n    imgUpload(file) {\n        return getData({\n            method: 'post',\n            url: interfaces.IMAGE_UPLOAD,\n            data: file,\n            contentType: 'multipart/form-data'\n        })\n    },\n    // 更新个人资料的头像\n    avatarUpdate(avatar) {\n        return getData({\n            method: 'post',\n            url: interfaces.PERSON_AVATAR_UPDATE,\n            data: avatar,\n            contentType: 'multipart/form-data'\n        })\n    },\n    // 获取行业类型/企业规模选项\n    // \n    getCompanySelections() {\n        return getData({\n            method: 'GET',\n            url: interfaces.ACCOUNT_SELECTION,\n        }).then(res => {\n            if (res.code === 200) {\n                store.dispatch({\n                    type: actionTypes.INIT_COMPANY_SELECTIONS,\n                    data: res.data\n                })\n            }\n\n        })\n    },\n    getAreaCodeList() {\n        return getData({\n            method: 'GET',\n            url: interfaces.GET_AREA_CODE,\n        }).then(res => {\n            // let areaCode = {...res.data,'#':res.data.public}\n            let areacodeList = []\n            for (let key in res.data) {\n                let title = key === 'public' ? '#' : key\n                areacodeList.push({\n                    title,\n                    subList: res.data[key]\n                })\n            }\n            store.dispatch({ type: actionTypes.INIT_AREACODE_LIST, data: areacodeList });\n            return res\n\n        })\n    },\n    // 获取权限列表\n    getPermission() {\n        return getData({\n            method: 'POST',\n            url: interfaces.PERMISSION_LIST\n        }).then(res => {\n            if (res.code === 200) {\n                interfaces.mixin(res.data)\n            }\n        })\n    },\n\n    // 从父窗口获取token\n    getToken() {\n        const token = Cookies.get('token')\n        config.initToken(token)\n        return token\n        // if (window.parent === window) {\n        //     let token = Cookies.get('token')\n        //     config.initToken(token)\n        //     return Promise.resolve(token)\n        // }\n        // return iframeMessage.send({}, 'GET_TOKEN').then(res => {\n        //     config.initToken(res)\n        //     return res\n        // })\n    },\n    // 更新缓存路由数据\n    cacheRoutesChange({ type, route }) {\n        let cacheRoute = config.cacheRoute\n        //let cacheRoute = localStorage.getItem('cacheRoute')\n        if (!cacheRoute) {\n            return\n        }\n        let cacheRoutes = store.getState().storeCommon.cacheRoutes\n        cacheRoutes = JSON.parse(JSON.stringify(cacheRoutes))\n        if (type === 'add') {\n            let has = false\n            for (let i = 0; i < cacheRoutes.length; i++) {\n                if (cacheRoutes[i].menu_route === route.menu_route) {\n                    has = true\n                    cacheRoutes[i].active = true\n                } else if (cacheRoutes[i].active) {\n                    cacheRoutes[i].active = false\n                }\n            }\n            if (!has && route) {\n                cacheRoutes.push({ ...route, active: true, tab: route.name, id: route.menu_route })\n            }\n        } else if (type === 'delete') {\n\n            for (let i = cacheRoutes.length - 1; i >= 0; i--) {\n                if (cacheRoutes[i].menu_route === route.menu_route) {\n                    let deleteRoute = cacheRoutes.splice(i, 1)[0]\n\n                    if (cacheRoutes.length > 0) {\n                        if (deleteRoute.active) {\n                            if (cacheRoutes[i]) {\n                                cacheRoutes[i].active = true\n                            } else {\n                                i -= 1\n                                cacheRoutes[i].active = true\n                            }\n                            utils.pushVC({ pathname: cacheRoutes[i].menu_route })\n                        }\n\n                    } else {\n                        cacheRoutes.push({\n                            active: true,\n                            id: '/personalinfo',\n                            name: '个人资料',\n                            tab: '个人资料',\n                            menu_icon: \"personalInfo\",\n                            menu_code: 'personalinfo',\n                            menu_route: '/personalinfo',\n                            tag: 'personalinfo',\n                        })\n                        i = 0\n                        utils.pushVC({ pathname: cacheRoutes[i].menu_route })\n                    }\n\n\n\n                    break\n                }\n\n            }\n            // cacheRoutes = cacheRoutes.filter(r => {\n            //     return r.menu_route !== route.menu_route\n            // })\n            // dropByCacheKey(route.menu_route)\n        } else if (type === 'replace') {\n            cacheRoutes = cacheRoutes.map(r => {\n                if (r.menu_route === route) {\n                    return { ...r, active: true }\n                }\n                return { ...r, active: false }\n            })\n        }\n        store.dispatch({ type: actionTypes.CACHE_ROUTES_CHANGE, data: cacheRoutes });\n    }\n}\nexport default commonAction","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/actionLogin.js",["983"],"import { getData } from '@/libs/utils.js'\nimport store from '@/store/index.js'\nimport interfaces from '@/api/interfaces'\n\nconst actionLogin = {\n    // 群组管理-用户组列表\n    // type group 群组列表获取 user 组下成员列表获取 add 获取非当前组下的分页用户列表\n    login({ username, password }) {\n        return getData({\n            method: 'POST',\n            url: interfaces.LOG_IN,\n            data: {\n                username,\n                password\n            }\n        })\n    },\n    logout(){\n        return getData({\n            method:'POST',\n            url: interfaces.LOG_OUT,\n            data: {}\n        })\n    }\n}\nexport default actionLogin\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/reducers/index.js",["984"],"import memberManage from './common/memberManage.js' // 会议管理\nimport storeCommon from './storeCommon.js'\nimport personalInfo from './personalInfo/personalInfo.js'    // 个人信息\nimport personalMeeting from './myMeeting/personalMeeting.js'    // 个人会议室\n\nimport userList from './userManage/userList.js'    // 企业管理--用户管理--用户列表\nimport roleManage from './userManage/roleManage.js'    // 企业管理--用户管理--角色管理\n\n\n\nimport { combinReducers, combineReducers } from 'redux'\n\nlet arr = combineReducers({\n    memberManage, \n    storeCommon,\n    personalInfo,\n    personalMeeting,\n    userList,\n    roleManage,\n})\n\nexport default arr;","/Users/fengjiqiang/practice/react-queationnaire-demo/src/libs/images/index.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/BaseCmp.js",["985"],"import { Component } from 'react'\nimport { message, Modal } from 'antd';\nimport config from '@/config.js'\nimport eventBus from '@/libs/EventBus.js'\nclass BaseCmp extends Component {\n    constructor(props) {\n        super(props)\n        this.themeColor = config.themeColor\n        this.layoutBgColor = config.layoutBgColor\n        this.pageSize = config.pageSize\n    }\n    // toast提示\n    showToast(param) {\n        let content, duration, type, onClose, style\n\n        if (typeof param === 'string') {\n            content = param\n        } else if (typeof param === 'object') {\n            content = param.content\n            duration = param.duration\n            type = param.type\n            style = param.style\n            onClose = param.onClose\n        }\n        duration = duration || 3\n        type = type || 'info'\n        style = style || {}\n\n        onClose = onClose || function () { }\n        if (typeof message[type] === 'function' && content) {\n            message.destroy()\n            message[type]({ content, duration, onClose, className: 'rl-message', style: {} })\n        }\n    }\n    // 获取链接参数\n    getParams(search) {\n        let param = search.substring(1, search.length)\n\n        console.log('res--spiit:', param)\n        let paramArr = param.split('&')\n        let paramObj = {}\n        for (let i = 0; i < paramArr.length; i++) {\n            let item = paramArr[i]\n            if (!item) {\n                continue\n            }\n            let itemArr = item.split('=')\n            paramObj[itemArr[0]] = itemArr[1]\n        }\n        return paramObj\n    }\n    // 弹框\n    showModal({\n        title, content, okText = '确定', cancelText = '取消', singleText,\n        onOk, onCancel, onSingle, count, size = 'big', className = ''\n    }) {\n        let sizeClassName = '-modal'\n        sizeClassName = size + sizeClassName\n        let modal;\n        if (singleText) {\n            modal = Modal.info()\n            let singleTextDisplay\n            if (count) {\n                singleTextDisplay = singleText + '(' + count + 's)'\n            } else {\n                singleTextDisplay = singleText\n            }\n            modal.update({\n                title,\n                content,\n                okText: singleTextDisplay,\n                maskClosable: true,\n                className: 'infoModal ' + sizeClassName + ' ' + className,\n\n                onOk: () => {\n                    onSingle && onSingle()\n                }\n            })\n            if (count && count > 0) {\n                count = Number(count)\n                let timer = setInterval(() => {\n                    count--\n                    singleTextDisplay = singleText + '(' + count + 's)'\n                    modal.update({\n                        okText: singleTextDisplay,\n                    })\n                    if (count <= 0) {\n                        clearInterval(timer)\n                        onSingle && onSingle()\n                        modal.destroy()\n                    }\n                }, 1000)\n            }\n        } else {\n            modal = Modal.confirm()\n            modal.update({\n                title,\n                content,\n                cancelText: cancelText,\n                okText: okText,\n                maskClosable: true,\n                className: 'confirmModal ' + sizeClassName + ' ' + className,\n                onCancel: () => {\n                    onCancel && onCancel()\n                    modal.destroy()\n                },\n                onOk: () => {\n                    if (onOk) {\n                        return onOk()\n                    } else {\n                        return true\n                    }\n\n                }\n            })\n        }\n        return modal\n\n    }\n    // 邀请弹窗\n    showInviteModal(id) {\n        eventBus.emit('show-invite-modal', {\n            meetingId: id\n        })\n    }\n    showRoomNumber(_room) {\n        let room = String(_room)\n        if (room.length > 6) {\n            room = room.split('')\n            room.splice(7, 0, ' ')\n            room.splice(3, 0, ' ')\n        } else {\n            room = room.split('')\n            room.splice(3, 0, ' ')\n        }\n        room = room.join('')\n        return room\n    }\n\n}\n// export default withRouter(BaseCmp)\nexport default BaseCmp","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/index.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actionTypes.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/libs/Uploader.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/libs/EventBus.js",["986"],"class EventBus {\n    constructor() {\n        this.events = this.events || new Object();\n    }\n}\n//首先构造函数需要存储event事件，使用键值对存储\n//然后我们需要发布事件，参数是事件的type和需要传递的参数\nEventBus.prototype.emit = function (type, ...args) {\n    let e;\n    e = this.events[type];\n    // 查看这个type的event有多少个回调函数，如果有多个需要依次调用。\n    if(!e){\n        return\n    }else if (Array.isArray(e)) {\n        for (let i = 0; i < e.length; i++) {\n            e[i].apply(this, args);\n        }\n    }\n};\n//然后我们需要写监听函数，参数是事件type和触发时需要执行的回调函数\nEventBus.prototype.addListener = function (type, fun) {\n    const e = this.events[type];\n\n    if (!e) {   //如果从未注册过监听函数，则将函数放入数组存入对应的键名下\n        this.events[type] = [fun];\n    } else {  //如果注册过，则直接放入\n        e.push(fun);\n    }\n};\nEventBus.prototype.removeListener = function (type )  {\n    delete this.events[type]\n}\nconst eventBus = new EventBus();\nexport default eventBus;","/Users/fengjiqiang/practice/react-queationnaire-demo/src/libs/utils.js",["987","988","989","990","991","992"],"\nimport axios from 'axios'\nimport actionTypes from '../store/actionTypes.js'\nimport { message } from 'antd';\nimport Cookies from 'js-cookie'\nimport Store from '../store/index.js'\nimport config from '../config.js'\nimport md5 from 'js-md5';\nimport interfaces from '@/api/interfaces.js'\nimport commonActions from '@/store/actions/commonActions.js'\nimport iframeMessage from '@/libs/IframeMessage.js'\nimport moment from 'moment'\nimport { getConfirmLocale } from 'antd/lib/modal/locale';\n\n// const env = localStorage.getItem('env')\nconst HOST = config.requestHosts\n\nvar CryptoJS = require(\"crypto-js\");\nconst aesKey = '1234567890123456789012335475'\nconst key = CryptoJS.enc.Utf8.parse(aesKey)\n\n\n\nconst utils = {\n    copy(info, CB) {\n        let msg;\n        switch (typeof info) {\n            case 'string':\n                msg = info\n                break;\n            case 'object':\n                msg = JSON.stringify(info)\n                break;\n            case 'number':\n                msg = info;\n                break;\n            default:\n                break;\n\n        }\n        let oInput = document.createElement('textarea');\n        oInput.value = msg;\n        document.body.appendChild(oInput);\n        oInput.select(); // 选择对象\n        document.execCommand('Copy'); // 执行浏览器复制命令\n        oInput.className = 'oInput';\n        oInput.style.display = 'none';\n        oInput.remove()\n        CB && CB()\n    },\n    showToast(param) {\n        let content, duration\n        if (typeof param === 'string') {\n            content = param\n        } else if (typeof param === 'object') {\n            content = param.content\n            duration = param.duration\n        }\n        duration = duration || 3\n\n        if (content) {\n            message.destroy()\n            message.info({ content, duration, className: 'rl-message' })\n        }\n    },\n    initHistory(props) {\n        this.history = props.history\n        this.pushVC = function (params) {\n            if (typeof params === 'string') {\n                this.history.push(params)\n            } else if (typeof params === 'object') {\n                let { pathname, ...rest } = params\n                pathname += '?'\n                for (let key in rest) {\n                    pathname = pathname + key + '=' + rest[key] + '&'\n                }\n                this.history.push(pathname)\n            }\n\n        }\n    }\n}\n// const token = Cookies.get('token')\nexport function showToast({ content, duration = 5, type = 'info', onClose = () => { }, style = {}, className }) {\n    if (typeof message[type] === 'function' && content) {\n        message[type]({ content, duration, onClose, className })\n    }\n}\nexport function getAesStr(msg) {\n    return CryptoJS.AES.encrypt(JSON.stringify(msg), key, {\n        iv: CryptoJS.enc.Utf8.parse(aesKey.substr(0, 16)),\n        mode: CryptoJS.mode.CBC,\n        padding: CryptoJS.pad.Pkcs7\n    }).toString();\n}\nfunction getHeaders(extraCheckdelay = '') {\n    let delay = new Date().getTime() + '';\n    let checkdelay = md5(\n        delay.substr(delay.length - 5, 5)\n        + config.requestHeaders.p\n        + config.requestHeaders.ver\n        + config.requestHeaders.ch\n        + delay.substr(0, 5)\n        + config.requestHeaders.os\n        + delay + extraCheckdelay\n    );\n    return { delay, checkdelay, version: config.requestHeaders.ver }\n}\n// 封装请求\nexport function getData({ method, url, data = {}, headers = {}, contentType, extraCheckdelay, responseType }) {\n    // showToast({ type: 'error', content: '服务器走神了' })\n    // if (!Cookies.get('token')) {\n    // let token = Cookies.get('token');\n\n    //从sessionStorage 获取token\n    let token = sessionStorage.getItem('token');\n\n    if (!token && url !== '/api/v1/admin/user/login') {\n        return Promise.reject({\n            code: 501, message: '登录超时'\n        })\n    }\n    if (!url) {\n        showToast({ type: 'error', content: '您没有该权限' })\n        console.log('您没有该权限', url)\n        return Promise.reject({\n            code: 401, message: '您没有该权限', data: url\n        })\n    }\n    method = method.toLowerCase()\n    // url = HOST + url\n\n    if (method === 'get' && Object.keys(data)) {\n        url += '?';\n        for (let key in data) {\n            url += (key + '=' + data[key] + '&')\n        }\n        data = null\n    }\n    let defaultHeader = getHeaders(extraCheckdelay)\n    if (contentType) {\n        defaultHeader['Content-Type'] = contentType\n    }\n    let baseHost = HOST\n\n    if (url && url.startsWith('/api/playback/')) {\n        baseHost = config.uploadBaseUrl;\n    }\n    return axios({\n        method, url, data,\n        baseURL: baseHost,\n        headers: {\n            Authorization: 'Bearer ' + token,\n            ...config.requestHeaders,\n            ...defaultHeader,\n            ...headers\n        },\n        responseType: responseType || 'json'\n    }).then(res => {\n        if (!res.data) {\n            return Promise.reject()\n        }\n        let code = Number(res.data.code)\n        // if (url.includes('api/v2/corp/user/list')) {\n        //     utils.showToast('权限不足')\n        // }\n        if (code === 440001) {\n            utils.showToast('登录失效,请重新登录')\n            utils.pushVC({ pathname: '/login' })\n        }\n        else if (code === 160004) {\n            // 获取菜单\n            commonActions.getMenuData()\n            commonActions.getPermission()\n            utils.showToast('您没有此权限')\n            utils.pushVC({ pathname: '/personalinfo' })\n            return Promise.reject({ ...res.data, code })\n        } else if (code === 470001) {\n            utils.showToast('登录失效,请重新登录')\n            utils.pushVC({ pathname: '/login' })\n            // iframeMessage.send({}, 'BAD_TOKEN')\n            return Promise.reject({ ...res.data, code })\n        }\n        // 返回文件对象\n        if (responseType === 'blob') {\n            //未成功\n            if (res.data.type === 'application/json') {\n                return Promise.resolve({ code: 201, msg: '导出文件出错' })\n            }\n            //成功返回\n            return { data: res.data, code: 200 }\n        }\n        return { ...res.data, code }\n    }).catch(err => {\n        // return Promise.reject({ code: 500, data: err, msg: '服务器走神了' })\n        console.log('error:', err)\n        // if (err.code === 160004) {\n        //     // showToast({ type: 'error', content: err.msg })\n        // } else if (err.code === 470001) {\n\n        // } else {\n\n        // }\n        showToast({ type: 'error', content: '服务器走神了' })\n        return Promise.reject(err)\n    })\n}\nexport function getResponse({ method, url, data = {}, headers = {}, contentType, extraCheckdelay }) {\n    if ((method === 'get' || method === 'delete') && Object.keys(data)) {\n        url += '?';\n        for (let key in data) {\n            url += (key + '=' + data[key] + '&')\n        }\n        data = null\n    }\n    let defaultHeader = getHeaders(extraCheckdelay)\n    if (contentType) {\n        defaultHeader['Content-Type'] = contentType\n    }\n    return axios({\n        method,\n        url,\n        data,\n        baseURL: config.uploadBaseUrl,\n        headers: {\n            // Authorization: 'Bearer ' + sessionStorage.getItem('token'), \n            // ...config.requestHeaders, \n            // ...defaultHeader, \n            ...headers\n        },\n    }).then(res => {\n        console.log('---------then---------', res)\n        return res.data;\n    }).catch(err => {\n        // return err;\n        utils.showToast({ type: 'error', content: err.msg })\n    });\n}\nexport function downloadFile(blob, filename) {\n    let url = window.URL.createObjectURL(blob);\n    let link = document.createElement('a');\n    link.style.display = 'none';\n    link.href = url;\n    link.setAttribute('download', filename);\n    document.body.appendChild(link);\n    link.click();\n}\nexport function downloadUrl(url, filename) {\n    let link = document.createElement('a');\n    link.style.display = 'none';\n    link.href = url;\n    link.setAttribute('download', filename);\n    document.body.appendChild(link);\n    link.click();\n}\n\n/**\n * 查询将日期转化为时间戳\n */\nexport function dealSearchTime(str, isStart) {\n    if (!str) {\n        return ''\n    }\n    if (isStart) {\n        return new Date(str + ' 0:0:0').getTime() / 1000\n    } else {\n        return new Date(str + ' 23:59:59').getTime() / 1000\n    }\n}\n\n/**\n * 将时间戳转化为日期字符串\n */\nexport function dealTableTime(str) {\n    if (!str) {\n        return ''\n    }\n    return moment(str * 1000).format('YYYY-MM-DD HH:mm')\n}\n\n/**\n * 将日期时间转化为时间戳\n * @param {*} str \n * @param {*} isStart \n * @returns \n */\nexport function dealDateTime(str) {\n    if (!str) {\n        return ''\n    }\n    return new Date(str).getTime() / 1000\n}\n\n/**\n * 将时间戳转化为日期时间字符串\n * @param {*} str \n * @param {*} type \n * @returns \n */\nexport function dealTime(str, type = 'YYYY-MM-DD HH:mm') {\n    if (!str) {\n        return ''\n    }\n    return moment(str * 1000).format(type)\n}\n\n/**\n * 根据文件后缀区分文件\n * @param {*} fileName 文件名（带后缀）\n * @returns \n */\nexport function getFileType(fileName) {\n    let index = fileName.lastIndexOf(\".\")\n    let suffix = ''   // 后缀\n    let result = ''   // 类型结果\n    if (index !== -1) {\n        suffix = fileName.substr(index + 1).toLowerCase()\n    }\n    if (!suffix) return false   // 无后缀 返回false\n\n    // 匹配 视频\n    const videolist = ['mp4', 'm2v', 'mkv', 'rmvb', 'wmv', 'avi', 'flv', 'mov', 'm4v']\n    result = videolist.find(item => item === suffix)\n    if (result) return 'video'\n    // 匹配 音频\n    const radiolist = ['mp3', 'wav', 'wmv']\n    result = radiolist.find(item => item === suffix)\n    if (result) return 'radio'\n    // 匹配 图片\n    const imglist = ['png', 'jpg', 'jpeg', 'bmp', 'tif', 'tiff']\n    result = imglist.find(item => item === suffix)\n    if (result) return 'image'\n    // 匹配 文档\n    // pdf\n    const pdflist = ['pdf'];\n    result = pdflist.find(item => item === suffix)\n    if (result) return 'pdf'\n    // txt\n    const txtlist = ['txt']\n    result = txtlist.find(item => item === suffix)\n    if (result) return 'txt'\n    // word\n    const wordlist = ['doc', 'docx']\n    result = wordlist.find(item => item === suffix)\n    if (result) return 'word'\n    // excel\n    const excelist = ['xls', 'xlsx']\n    result = excelist.find(item => item === suffix)\n    if (result) return 'excel'\n    // ppt\n    const pptlist = ['ppt', 'pptx']\n    result = pptlist.find(item => item === suffix)\n    if (result) return 'ppt'\n    // 匹配 压缩包\n    const ziplist = ['zip', 'rar', 'gz']\n    result = ziplist.find(item => item === suffix)\n    if (result) return 'zip'\n    // 其他 文件类型\n    return 'other'\n}\n\nexport function strTrim(str) {\n    if (!str) {\n        return ''\n    }\n    return str.replace(/^\\s+|\\s+$/gm, '');\n}\nexport function getStrLength(str) {\n    let w = 0;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charCodeAt(i);\n        if ((c >= 0x0001 && c <= 0x007e) || (0xff60 <= c && c <= 0xff9f)) {\n            w++;\n        } else {\n            w += 2;\n        }\n    }\n    return w\n}\nexport function getFileTile(fileName) {\n    if (/\\.([a-zA-Z0-9]+)$/.test(fileName)) { // 如果没有文件类型，从原始文件名中获取后缀\n        return fileName.replace(/(.*)\\.([a-zA-Z0-9]+)$/, '$2') || ''\n    }\n    return ''\n}\n\nexport function uuid() {\n    const s = [];\n    const hexDigits = '0123456789abcdef';\n    for (let i = 0; i < 36; i += 1) {\n        s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);\n    }\n    s[14] = '4';\n    s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);\n    const id = s.join('');\n    return id;\n}\n\nexport default utils\n\n\n\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/layout/LayoutWindow.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/layout/LayoutMenu.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/DraggableModal.js",["993"],"import react, { Component } from 'react';\nimport { Rnd } from 'react-rnd';\n// import './DraggableModal.less';\nexport default class DraggableModal extends Component {\n      constructor(props) {\n          super(props);\n          this.state = {\n              translateX: 0,\n              translateY: 0,\n          };\n          this.moving = false;\n          this.lastX = null;\n          this.lastY = null;\n          window.onmouseup = e => this.onMouseUp(e);\n          window.onmousemove = e => this.onMouseMove(e);\n      }\n  \n      onMouseDown(e) {\n          e.stopPropagation();\n          this.moving = true;\n      }\n  \n      onMouseUp() {\n          this.moving = false;\n          this.lastX = null;\n          this.lastY = null;\n      }\n  \n      onMouseMove(e) {\n          this.moving && this.onMove(e);\n      }\n  \n      onMove(e) {\n          if(this.lastX && this.lastY) {\n              let dx = e.clientX - this.lastX;\n              let dy = e.clientY - this.lastY;\n              this.setState({ translateX: this.state.translateX + dx, translateY: this.state.translateY + dy })\n          }\n          this.lastX = e.clientX;\n          this.lastY = e.clientY;\n      }\n  \n      render() {\n          return (\n            <Rnd\n                default={{\n                  x: 0,\n                  y: 0,\n                  width: 320,\n                  height: 200,\n                }}\n              >\n                {this.props.children}\n            </Rnd>\n          )\n      }\n}","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/CopyInviteModal.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/infoManage/actionInfoManage.js",["994","995","996"],"import { getData } from '@/libs/utils.js'\nimport store from '@/store/index.js'\nimport actionTypes from '@/store/actionTypes.js'\nimport interfaces from '@/api/interfaces.js'\nimport config from '@/config.js'\n\n\nconst actionInfoManage = {\n\n    // 资讯管理-列表\n    getInfoList(data) {\n        return getData({\n            method: 'get',\n            url: interfaces.INFO_LIST,\n            data\n        })\n    },\n    // 资讯管理-添加\n    infoAdd(data) {\n        return getData({\n            method: 'post',\n            url: interfaces.INFO_ADD,\n            data\n        })\n    },\n    // 资讯管理-编辑\n    infoEdit(data) {\n        return getData({\n            method: 'post',\n            url: interfaces.INFO_EDIT,\n            data\n        })\n    },\n    // 资讯管理-详情\n    getInfoDetail(data) {\n        return getData({\n            method: 'get',\n            url: interfaces.INFO_DETAIL,\n            data\n        })\n    },\n    // 资讯管理-删除\n    infoDelete(data) {\n        return getData({\n            method: 'get',\n            url: interfaces.INFO_DELETE,\n            data\n        })\n    },\n    // 资讯管理-上/下架\n    infoUpdateStatus(data) {\n        return getData({\n            method: 'get',\n            url: interfaces.INFO_UPDATE_STATUS,\n            data\n        })\n    },\n    // 资讯管理-文档列表\n    infoDocList(data) {\n        return getData({\n            method: 'get',\n            url: interfaces.INFO_DOC_LIST,\n            data\n        })\n    },\n    // 资讯管理-文档修改名称\n    infoDocEdit(data) {\n        return getData({\n            method: 'post',\n            url: interfaces.INFO_DOC_EDIT,\n            data\n        })\n    },\n    // 资讯管理-文档删除\n    infoDocDelete(data) {\n        return getData({\n            method: 'get',\n            url: interfaces.INFO_DOC_DELETE,\n            data\n        })\n    },\n    // 资讯管理-文档是否可下载\n    infoDocUpdateStatus(data) {\n        return getData({\n            method: 'get',\n            url: interfaces.INFO_DOC_UPDATE_STATUS,\n            data\n        })\n    },\n    // 资讯管理-添加资料\n    infoDocAdd(data) {\n        return getData({\n            method: 'post',\n            url: interfaces.INFO_DOC_ADD,\n            data\n        })\n},\n\n}\n\nexport default actionInfoManage\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/libs/IframeMessage.js",["997","998"],"\n/**\n * method：GET_TOKEN :获取token\n * \n * \n*/\n\nimport config from '@/config.js'\nimport Task from './Task.js'\nlet pIframeHost;\nif (window.parent !== window) {\n    try {\n        pIframeHost = window.parent.location.href;\n    } catch (e) {\n        pIframeHost = document.referrer;\n    }\n}\nconsole.log(12345, pIframeHost)\nconst iframeMessage = {\n    requestQueue: {},\n    targetWindow: window.parent,\n    localOrigin: window.location.origin,\n    send(data, method) {\n        console.log(pIframeHost)\n        if (method.includes('-')) {\n            throw new Error('method 不能含有-字符')\n            return\n        }\n        return new Promise((resolve, reject) => {\n            let tag = new Date().getTime()\n            this.targetWindow.postMessage({\n                type: 'request',\n                method,\n                tag,\n                data,\n                _method: 'request-' + method + tag\n            }, pIframeHost)\n            this.requestQueue[tag] = new Task({ tag, timeout: 15, resolve, reject, requestQueue: this.requestQueue })\n        })\n    },\n\n}\nwindow.addEventListener('message', (e) => {\n    let data = e.data\n    if (data.type === 'request') {\n        console.log('父窗口请求我了', e)\n    } else {\n\n        let tag = data.tag\n        let task = iframeMessage.requestQueue[tag]\n        if (task) {\n            task.res(data.data)\n            delete iframeMessage.requestQueue[tag]\n        } else {\n            // console.log('无请求的响应，可能是超时了的请求返回')\n        }\n    }\n})\nexport default iframeMessage","/Users/fengjiqiang/practice/react-queationnaire-demo/src/api/interfaces.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/layout/LayoutHeader.js",["999"],"import { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { Dropdown, Menu, Button } from 'antd';\nimport { DownOutlined } from '@ant-design/icons';\n\nimport Cookies from 'js-cookie'\nimport actionTypes from '@/store/actionTypes.js'\nimport store from '@/store/index.js'\n\nimport actionLogin from '@actions/actionLogin.js'\n\nclass LayoutHeader extends Component {\n    constructor(props, context) {\n        super(props)\n        this.state = {\n            avatar: ''\n        }\n    }\n    handleLogout = (e) => {\n        actionLogin.logout();\n        Cookies.remove('token');\n        sessionStorage.removeItem('token');\n        //退出登录清除菜单缓存\n        store.dispatch({ type: actionTypes.CACHE_ROUTES_CHANGE, data: [] });\n        this.props.history.push('/login')\n    }\n    render() {\n        const menu = (\n            <Menu>\n                <Menu.Item>\n                    <div onClick={this.handleLogout}>退出登录</div>\n                </Menu.Item>\n            </Menu>\n        )\n        return (\n            <div style={this.props.style} className=\"appHead\">\n                <div className=\"companyLogo\" style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                    <span style={{ color: '#8F1D22', fontSize: 20, fontWeight: 500, marginLeft: 15 }}>z止于至善后台管理系统</span>\n                </div>\n                <div className=\"personInfo\" style={{ display: 'flex', flexDirection: 'row', justifyContent: 'flex-end', marginRight: 20 }}>\n                    <div className=\"\" style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                        <img src={this.props.userInfo.avatar || require('../../assets/images/common/default_avatar.png').default} alt='' style={{ width: 35, height: 35, marginRight: 5, borderRadius: '50%' }}></img>\n                        <Dropdown overlay={menu} >\n                            <div style={{ cursor: 'pointer' }}>\n                                <span style={{ marginRight: 5 }}> {this.props.userInfo.nickname}</span>\n                                <DownOutlined />\n                            </div>\n                        </Dropdown>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default connect((store, props) => {\n    return {\n        ...props,\n        userInfo: store.personalInfo.userInfo,\n    }\n})(LayoutHeader)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/VODManage/actionVODManage.js",["1000","1001","1002"],"import { getData } from '@/libs/utils.js'\nimport store from '@/store/index.js'\nimport actionTypes from '@/store/actionTypes.js'\nimport interfaces from '@/api/interfaces'\nimport config from '@/config.js'\n\nconst actionVODManage = {\n    getVODList(data){\n        return getData({\n            method:'POST',\n            url: interfaces.DEMAND_LIST,\n            data: data\n        })\n    },\n    getVODDetail(id){\n        return getData({\n            method: 'POST',\n            url: interfaces.DEMAND_DETAIL,\n            data: {course_id: id}\n        })\n    },\n    VODDel(id){\n        return getData({\n            method: 'POST',\n            url: interfaces.DEMAND_DELETE,\n            data: {course_id: id}\n        })\n    },\n    addVOD(data){\n        return getData({\n            method: 'POST',\n            url: interfaces.DEMAND_ADD,\n            data: data\n        })\n    },\n    editVOD(data){\n        return getData({\n            method: 'POST',\n            url: interfaces.DEMAND_EDIT,\n            data: data\n        })\n    },\n    editVODAttr(data){\n        return getData({\n            method: 'post',\n            url:interfaces.DEMAND_ATTR_EDIT,\n            data: data\n        })\n    },\n    getChapterList(data){\n        return getData({\n            method:'POST',\n            url: interfaces.DEMAND_CHAPTER_LIST,\n            data: data\n        })\n    },\n    getChapterInfo(id){\n        return getData({\n            method: 'POST',\n            url: interfaces.DEMAND_CHAPTER_DETAIL,\n            data: {id: id}\n        })\n    },\n    chapterAdd(data){\n        return getData({\n            method: 'POST',\n            url: interfaces.DEMAND_CHAPTER_ADD,\n            data: data\n        })\n    },\n    chapterEdit(data){\n        return getData({\n            method: 'POST',\n            url: interfaces.DEMAND_CHAPTER_EDIT,\n            data: data\n        })\n    },\n    chapterDel(id){\n        return getData({\n            method: 'POST',\n            url: interfaces.DEMAND_CHAPTER_DELETE,\n            data: {id: id}\n        })\n    },\n    getCommentList(data){\n        return getData({\n            method: 'POST',\n            url: interfaces.DEMAND_COMMENT_LIST,\n            data: data\n        })\n    },\n    commentDel(id){\n        return getData({\n            method: 'POST',\n            url: interfaces.DEMAND_COMMENT_DELETE,\n            data: {id: id}\n        })\n    },\n    commentEdit(data){\n        return getData({\n            method: 'POST',\n            url: interfaces.DEMAND_COMMENT_EDIT,\n            data: data\n        })\n    },\n    editComment(data){\n        return getData({\n            method: 'POST',\n            url: interfaces.DEMAND_COMMENT_EDIT,\n            data: data\n        })\n    },\n    getPlayList(data){\n        return getData({\n            method: 'POST',\n            url: interfaces.DEMAND_CHAPTER_PALY_LIST,\n            data: data\n        })\n    },\n    getResourceList(data){\n        return getData({\n            method: 'POST',\n            url: interfaces.DEMAND_DOC_LIST,\n            data: data\n        })\n    },\n    resourceDel(data){\n        return getData({\n            method: 'POST',\n            url: interfaces.DEMAND_DOC_DELETE,\n            data: data\n        })\n    },\n    resourceAdd(data){\n        return getData({\n            method: 'POST',\n            url: interfaces.DEMAND_DOC_ADD,\n            data: data\n        })\n    },\n    resourceEdit(data){\n        return getData({\n            method: 'POST',\n            url: interfaces.DEMAND_DOC_EDIT,\n            data: data\n        })\n    }\n\n\n}\n\nexport default actionVODManage;","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/VODManage/actionVideoManage.js",["1003","1004","1005"],"import { getData, getResponse } from '@/libs/utils.js'\nimport store from '@/store/index.js'\nimport actionTypes from '@/store/actionTypes.js'\nimport interfaces from '@/api/interfaces'\nimport config from '@/config.js'\n\nconst actionVideoManage = {\n\n    createRecord(data){\n        return getData({\n            method: 'POST',\n            url: interfaces.VIDEO_ADD,\n            data: data\n        });\n    },\n\n    getVideoList(data){\n       return getData({\n           method: 'get', \n           url: interfaces.VIDEO_LIST, \n           data: data\n       })\n    },\n\n    videoEdit(data){\n        return getData({\n            method: 'post',\n            url: interfaces.VIDEO_EDIT,\n            data: data\n        })\n    },\n\n    videoDel(data){\n        return getData({\n            method: 'post',\n            url: interfaces.VIDEO_DELETE,\n            data: data\n        })\n    },\n\n    uploadWatermark(data){\n        return getResponse({\n            method: 'post',\n            url: interfaces.VIDEO_UPLOAD_WATERMARK,\n            data: data\n        })\n    },\n\n    getVideoUrl(id){\n        return getResponse({\n            method: 'get',\n            url: '/api/playback/list',\n            data: {ids: id}\n        })\n    }\n\n    // getAllVideo(data){\n    //     return getData({\n    //         method: 'POST', url: interfaces.VIDEO_LIST, data: {}\n    //     })\n    // }\n}\n\nexport default actionVideoManage;","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/personalInfo/actionPersonalInfo.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/reducers/storeCommon.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLSelect.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLTabs.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/libs/images/commonImg.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/libs/images/menuIcon.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLForm.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLRadio.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLFilterTool.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLTable.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLButton.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLPageTabs.js",["1006","1007"],"\n/*\ndefaultActiveKey\nonChange\ntabPanes\n\n*/\n\nimport { Component } from 'react'\nimport { Tabs } from 'antd';\n\nimport { CloseOutlined, MailOutlined, SettingOutlined } from '@ant-design/icons';\n\nclass RLPageTabs extends Component {\n    getTab = (item) => {\n        return <div>\n            {item.tab}\n            <CloseOutlined onClick={(e) => {\n                e.stopPropagation()\n                this.props.deleteTab(item)\n            }} />\n        </div>\n        // { item.tab }\n    }\n    render() {\n        return (\n            <Tabs {...this.props}\n                onChange={(route) => {\n                    this.props.onChange(route)\n                }}\n                className={this.props.className ? this.props.className + ' rl-page-tabs' : 'rl-page-tabs'}\n            >\n                {\n                    this.props.tabPanes && this.props.tabPanes.map((item) => {\n                        return <Tabs.TabPane tab={this.getTab(item)} key={item.id}>\n                            {(() => {\n                                if (item.content) {\n                                    if (typeof item.content === 'function') {\n                                        return item.content()\n                                    } else if (typeof item.content === 'object') {\n                                        return item.content\n                                    }\n                                } else {\n                                    return null\n                                }\n                            })()}\n\n                        </Tabs.TabPane>\n                    })\n                }\n            </Tabs>\n        )\n    }\n}\nexport default RLPageTabs","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLRadioGroup.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLTipList.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLModal.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLPagination.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/LargeModal.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLCheckbox.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLInputGroup.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLCheckboxGroup.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLDisplayBoard.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLBoard.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLRangePicker.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLTag.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLTooltip.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLRenameModal.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLDropdown.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLRadioGroupCustom.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLSwitch.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLDatePicker.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLFormItem.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLTextarea.js",["1008"],"\n/*\noptions\n\n*/\nimport { Input } from 'antd';\nimport BaseCmp from '@components/BaseCmp.js'\nconst { TextArea } = Input;\nconst RLTextarea = (props) => {\n    return (\n        <TextArea   {...props}\n            className={props.className ? props.className + ' rl-textarea' : 'rl-textarea'}\n            style={{ border: '1px solid #dcdfe6', borderRadius: 3, padding: 7, background: '#fff', ...props.style }}\n        />\n    )\n}\nexport default RLTextarea","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLKVList.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLInput.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLRadioCustom.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/reducers/common/memberManage.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/reducers/myMeeting/personalMeeting.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/reducers/userManage/userList.js",["1009"],"\nimport { PageLoading } from '@ant-design/pro-layout'\nimport actionTypes from '../../actionTypes.js'\nlet defaultState = {\n    activeUserList: [],\n    unactiveUserList: [],\n    planAvailable: 0,\n    allUserInfo: []\n}\nfunction userList(state = defaultState, payload) {\n    switch (payload.type) {\n        case actionTypes.ACT_USERLIST_CHANGE:\n            return {\n                ...state, activeUserList: payload.data\n            }\n        case actionTypes.UNACT_USERLIST_CHANGE:\n            return {\n                ...state, unactiveUserList: payload.data\n            }\n        case actionTypes.INIT_ALL_PLAN:\n            return {\n                ...state, planAvailable: payload.data\n            }\n        case actionTypes.INIT_ALL_USERS:\n            return {\n                ...state, allUserInfo: payload.data\n            }\n        default:\n            return state;\n    }\n}\n\nexport default userList;","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/reducers/personalInfo/personalInfo.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/reducers/userManage/roleManage.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/layout/PageTabs.js",["1010","1011","1012","1013","1014","1015"],"import { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { RLInput, RLFilterTool, RLButton, RLTable, RLPageTabs } from '@components/index.js'\nimport commonActions from '@actions/commonActions.js'\nimport CacheRoute, { dropByCacheKey, getCachingKeys } from 'react-router-cache-route'\n\nimport utils from '@/libs/utils.js'\n\nclass PageTabs extends Component {\n    deleteTab = (menu) => {\n        dropByCacheKey(menu.menu_code)\n        commonActions.cacheRoutesChange({ type: 'delete', route: menu })\n    }\n    render() {\n        let cacheRoutes = this.props.cacheRoutes\n        let activeKey = ''\n        for (let i = 0; i < cacheRoutes.length; i++) {\n            if (cacheRoutes[i].active) {\n                activeKey = cacheRoutes[i].menu_route\n            }\n        }\n        // console.log('cacheRoutes:', cacheRoutes)\n        return (\n            <div className='page-tabs'>\n                <RLPageTabs\n                    // type=\"editable-card\"\n                    onChange={(route) => {\n                        // console.log(route)\n                        commonActions.cacheRoutesChange({ type: 'replace', route })\n                        utils.pushVC({ pathname: route })\n                    }}\n                    activeKey={activeKey}\n                    tabPanes={\n                        cacheRoutes\n                    }\n                    deleteTab={this.deleteTab}\n                />\n            </div>\n        )\n    }\n}\n\nexport default connect((store, props) => {\n    return {\n        ...props,\n        cacheRoutes: store.storeCommon.cacheRoutes\n    }\n})(PageTabs)\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/route_cmp.js",["1016","1017"],"//个人信息\nimport PersonalInfo from '@/pages/personalInfo/PersonalInfo.js';\n\n//用户管理\nimport UserList from '@/pages/userManage/UserList.js';    // 用户管理-用户列表\nimport AuthorityManage from '@/pages/userManage/AuthorityManage.js'; // 用户管理-权限管理\nimport UnauthedUserList from '@/pages/userManage/UnauthedUserList.js'     // 用户管理-用户认证\nimport UserFieldsSetting from '@/pages/userManage/UserFieldsSetting.js'    // 用户管理-用户字段设置\nimport GroupManage from '@/pages/userManage/GroupManage.js'    // 用户管理-群组管理\nimport PhoneList from '@/pages/userManage/PhoneList.js'\n\nimport VideoManage from './VODManage/VideoManage.js';\nimport VODManage from './VODManage/VODManage.js';\n\n// 资讯\nimport InfoClassify from '@/pages/infoManage/InfoClassify.js';   // 资讯分类\nimport InfoManage from '@/pages/infoManage/InfoManage.js';   // 资讯管理\n\n//视频会议\nimport MyMeeting from '@/pages/meetingManage/myMeeting/MyMeeting.js';\nimport MeetingManage from '@/pages/meetingManage/meetingManage/MeetingManage.js';\nimport ExamineMeetingList from '@/pages/meetingManage/examineMeetingList/ExamineMeetingList.js';\nimport MeetingDocument from '@/pages/meetingManage/meetingDocument/MeetingDocument.js';\n\n// 营销工具集\nimport EventRegistration from '@/pages/marketingTool/EventRegistration.js';   // 活动报名\nimport QAManage from '@/pages/marketingTool/QAManage.js';   // 问答管理\nimport Questionnaire from '@/pages/marketingTool/Questionnaire.js';   // 问卷调查\n\n\n// import UserList from '@/pages/userManage/UserList.js'     // 用户管理-用户列表\n\n\n// 我的会议\n\n// import PersonalInfo from '@/pages/personalInfo/PersonalInfo.js';\nimport PersonalMeeting from '@/pages/myMeeting/personalMeeting/PersonalMeeting.js';\nimport MeetingList from '@/pages/myMeeting/meetingList/MeeingList.js';\nimport Seminar from '@/pages/myMeeting/seminar/Seminar.js';\n\n\n// 直播\nimport ExamineSeminarList from '@/pages/seminarManage/examineSeminarList/ExamineSeminarList.js'\nimport MySeminar from '@/pages/seminarManage/mySeminar/MySeminar.js'\nimport SeminarManage from '@/pages/seminarManage/seminarManage/SeminarManage.js'\n\n// new 会议模块\n\n\n//系统管理\nimport LoginLog from '@/pages/system/loginLog/LoginLog.js'\nimport HandleLog from '@/pages/system/handleLog/HandleLog.js'\nimport AdManagement from '@/pages/system/AdManagement/AdManagement.js'\nimport MessageManagementMail from '@/pages/system/messageManagement/messageManagementMail/messageManagementMail.js'\nimport MessageManagementNet from '@/pages/system/messageManagement/messageManagementNet/messageManagementNet.js'\n\n\nconst obj = {\n    //new-个人资料\n    'personalinfo': PersonalInfo,\n    //\n    // 我的会议\n    // 我的会议--个人资料\n    // 'userManage.userList': UserList,\n    'userManage.userList': UserList,\n    // 用户管理--用户认证\n    'userManage.unauthedUserList': UnauthedUserList,\n    // 用户管理--用户字段设置\n    'userManage.userFieldsSetting': UserFieldsSetting,\n    // 用户管理--群组管理\n    'userManage.groupManage': GroupManage,\n    //用户管理--固定电话簿\n    'userManage.phoneList': PhoneList,\n    // 我的会议--会议列表\n    'userManage.authorityManage': AuthorityManage,\n\n    'vod.videoManage': VideoManage,\n    'vod.vodManage': VODManage,\n\n    // 资讯\n    'info.infoClassify': InfoClassify,   // 资讯分类\n    'info.infoManage': InfoManage,   // 资讯管理\n\n    // 营销工具集\n    'market.eventRegistration': EventRegistration,   // 活动报名\n    'market.QAManage': QAManage,   // 问答管理\n    'market.questionnaire': Questionnaire,   // 问卷调查\n\n    // 我的会议--网络研讨会\n    'myMeeting.seminar': Seminar,\n\n    // 直播\n    // 直播-直播管理\n    'seminar.seminarManage': SeminarManage,\n    // 直播-我的直播\n    'seminar.mySeminar': MySeminar,\n    // 直播-直播审核列表\n    'seminar.examineSeminarList': ExamineSeminarList,\n    // 直播-直播文档\n    'seminar.seminarDocument': MeetingDocument,\n\n    //new-会议管理\n    //视频会议-会议管理\n    'meeting.meetingManage': MeetingManage,\n    //视频会议-我的会议\n    'meeting.myMeeting': MyMeeting,\n    //视频会议-会议审核列表\n    'meeting.examineMeetingList': ExamineMeetingList,\n    //视频会议-会议文档\n    'meeting.meetingDocument': MeetingDocument,\n    //\n\n    //系统管理\n    //邮箱信息\n    'system.messageManagement.mail': MessageManagementMail,\n    //站内信息\n    'system.messageManagement.net': MessageManagementNet,\n    //广告管理\n    'system.AdManagement': AdManagement,\n    //操作日志\n    'system.handleLog': HandleLog,\n    //登录日志\n    'system.loginLog': LoginLog,\n\n}\n\n\nexport default obj","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/RLMenu.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/libs/Task.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/myMeeting/actionMeetingList.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/libs/mimeType.js",["1018"],"export default {\n    //视频类\n    'avi': 'video/x-msvideo',\n    'dv': 'video/x-dv',\n    'mp4': 'video/mp4',\n    'mpeg': 'video/mpeg',\n    'mpg': 'video/mpeg',\n    'mov': 'video/quicktime',\n    'wm': 'video/x-ms-wmv',\n    'flv': 'video/x-flv',\n    'mkv': 'video/x-matroska',\n    'rmvb': 'video/vnd.rn-realmedia-vbr',\n    'wmv': 'video/x-ms-wmv',\n    'vob': 'video/x-ms-vob',\n    //音频类\n    'mp3': 'audio/mpeg',\n    'mid': 'audio/midi',\n    'ogg':  'audio/ogg',\n    'mp4a': 'audio/mp4',\n    'wav': 'audio/wav',\n    'wma': 'audio/x-ms-wma',\n    'ape': 'audio/ape',\n    'flac': 'audio/flac',\n    'aac': 'audio/aac',\n\n}","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/common/actionMemberManage.js",["1019","1020","1021"],"import { getData } from '@/libs/utils.js'\nimport store from '@/store/index.js'\nimport Cookies from 'js-cookie'\nimport actionTypes from '@/store/actionTypes.js'\nimport interfaces from '@/api/interfaces.js'\n\n\nconst actionMemberManage = {\n    /**\n     *获取成员列表\n     *\n     * @param {*} meeting_id\n     * @return {*} \n     */\n    getMemberList(meeting_id) {\n        return getData({\n            method: 'get',\n            url: interfaces.MEETING_MEMBERLIST,\n            data: { meeting_id }\n        })\n    },\n    /**对房间控制\n     *\n     *\n     * @param {*} { type, action }\n     */\n    roomOption({ type, action, meeting_id, option }) {\n        if (type === 'mute') {\n            let param = { status: action ? 0 : 1, meeting_id, openSelf: option.openSelf }\n            if (action) {\n                param.openSelf = option.openSelf\n            }\n            return getData({\n                method: 'post',\n                url: interfaces.MEETING_ALL_MUTE,\n                data: param\n            })\n        } else if (type === 'lock') {\n            // MEETING_LOCK\n            return getData({\n                method: 'post',\n                url: interfaces.MEETING_LOCK,\n                data: { status: action ? 1 : 0, meeting_id }\n            })\n        } else {\n            return Promise.reject({ msg: '出错了' })\n        }\n    },\n    /**\n     * 对用户操作\n     *\n     * @param {*} {type,action,meeting_id,uid}\n     */\n    userOption({ type, action, meeting_id, uid, ...rest }) {\n        if (type === 'mic') {\n            // 麦克风操作\n            return getData({\n                method: 'post',\n                url: interfaces.MEETING_CTRL_MIC,\n                data: { meeting_id, status: action, uid }\n            })\n        } else if (type === 'remove') {\n            // 移除会议室\n            return getData({\n                method: 'post',\n                url: interfaces.MEETING_CTRL_REMOVE,\n                data: { meeting_id, uid }\n            })\n        } else if (type === 'relationmaster') {\n            // 联席主持人操作\n            return getData({\n                method: 'post',\n                url: interfaces.MEETING_CTRL_RELATIONMASTER,\n                data: { meeting_id, status: action, uid }\n            })\n        } else if (type === 'master') {\n            // 主持人操作\n        } else if (type === 'camera') {\n            // 摄像头操作\n\n        } else if (type === 'rename') {\n            // 改名\n            return getData({\n                method: 'post',\n                url: interfaces.MEETING_CTRL_RENAME,\n                data: { meeting_id, nickname: rest.nickname, uid }\n            })\n        }\n    },\n\n}\nexport default actionMemberManage","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/system/AdManagement/AdManagement.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/system/handleLog/HandleLog.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/system/loginLog/LoginLog.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/system/messageManagement/messageManagementNet/messageManagementNet.js",["1022","1023"],"import BaseCmp from '@components/BaseCmp.js'\nimport { getMessageNet, deleteMessageNet, publishMessageNet } from '@actions/system/system.js'\nimport {\n    RLInput,\n    RLFilterTool,\n    RLButton,\n    RLTable,\n    RLDatePicker,\n    RLModal,\n    RLForm,\n    RLFormItem,\n    RLTextarea\n} from '@components/index.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport locale from 'antd/es/date-picker/locale/zh_CN'\nimport { dealSearchTime, strTrim, dealTableTime, getStrLength } from '@/libs/utils'\nimport interfaces from '@/api/interfaces';\n\nimport './messageManagementNet.less'\nclass MessageManagementNet extends BaseCmp {\n    constructor(props) {\n        super(props);\n        this.state = {\n            start_date: '',\n            end_date: '',\n            showCheck: false,\n            publish: false,\n            record: {},\n            searchParam: {  // 搜索列表筛选条件\n                title: '',\n                nickname: '',\n                start_time: '',\n                end_time: ''\n            },\n            currentListInfo: {  // 列表信息\n                pageNum: 1,  // 总页数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: 1,     // 当前第几页\n            },\n            formInput: {\n                title: '',\n                content: ''\n            },\n            click: false,\n            listLoading: true,      // 获取列表中loading\n        };\n    }\n    componentDidMount() {\n        this.getDataList()\n    }\n    getColumns = () => {\n        let columns = [\n            {\n                title: '序号',\n                dataIndex: 'id',\n                key: 'id',\n                width: '8%',\n                render: (text, record, index) => `${index + 1}`\n            },\n            {\n                title: '消息标题',\n                dataIndex: 'title',\n                key: 'title'\n            },\n            {\n                title: '发布时间',\n                key: 'created_at',\n                render: (record) => {\n                    return <p>\n                        {record.created_at}\n                    </p>\n                }\n            },\n            {\n                title: '发布人员',\n                dataIndex: 'nickname',\n                key: 'nickname'\n            },\n            {\n                title: '操作',\n                key: 'selfDoIt',\n                width: '20%',\n                render: (record) => {\n                    return <div style={{\n                        display: 'flex'\n                    }}>\n                        <RLButton\n                            type='link'\n                            key={'check'}\n                            label={'查看'}\n                            onClick={(e) => {\n                                this.setState({\n                                    showCheck: true,\n                                    record: record\n                                })\n                            }}\n                        />\n                        {interfaces.SYSTEM_MESSAGENET_DELETE && <RLButton\n                            type='link'\n                            key={'delete'}\n                            label={'删除'}\n                            onClick={(e) => {\n                                this.showModal({\n                                    title: '您是否确定删除此记录？',\n                                    okText: '确定',\n                                    cancelText: '取消',\n                                    onOk: () => {\n                                        return deleteMessageNet({ id: record.id }).then(res => {\n                                            if (res.code === 200) {\n                                                this.showToast({ type: 'success', content: '删除成功' });\n                                                this.getDataList()\n                                            } else {\n                                                this.showToast({ type: 'error', content: res.msg })\n                                            }\n                                        })\n                                    },\n                                    onCancel: () => {\n\n                                    },\n                                    size: 'small'\n                                })\n                            }}\n                        />}\n                    </div>\n                }\n            }\n        ]\n        return columns\n    }\n    pageChange = (page) => {\n        this.getDataList({ page })\n    }\n    getDataList = ({ page = this.state.currentListInfo.page } = { page: this.state.currentListInfo.page }) => {\n        this.setState({\n            listLoading: true,\n        })\n        getMessageNet({\n            ...this.state.searchParam,\n            page,\n            pagesize: this.pageSize\n        }).then(res => {\n            if (res.code === 200) {\n                let newState = {\n                    currentListInfo: {\n                        list: res.data.list,\n                        page,\n                        count: res.data.count,\n                        pageNum: Math.ceil(res.data.count / this.pageSize)\n                    }\n                }\n                this.setState(newState)\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        }).finally(() => {\n            this.setState({\n                listLoading: false,\n            })\n        })\n    }\n    getLeftItems = () => {\n        return [\n            <div className=\"newTimeArea\" key={'date'}>\n                <p>从</p>\n                <RLDatePicker\n                    allowClear\n                    onChange={this.startDateChange}\n                    disabledDate={this.startDisabledDate}\n                    locale={locale}\n                    inputReadOnly={true}\n                    format=\"YYYY-MM-DD\"\n                    placeholder='请选择日期'\n                    value={this.state.start_date}\n                />\n                <p>至</p>\n                <RLDatePicker\n                    allowClear\n                    onChange={this.endDateChange}\n                    disabledDate={this.startDisabledDate}\n                    locale={locale}\n                    inputReadOnly={true}\n                    format=\"YYYY-MM-DD\"\n                    placeholder='请选择日期'\n                    value={this.state.end_date}\n                />\n            </div>,\n            <div className=\"newInputArea\" key={'title'} style={{ marginLeft: '20px' }}>\n                <RLInput\n                    allowClear\n                    placeholder='请输入消息标题'\n                    value={this.state.searchParam.title}\n                    key={'input_title'}\n                    onChange={(e) => {\n                        this.setState({\n                            searchParam: {\n                                ...this.state.searchParam,\n                                title: e.target.value\n                            }\n                        })\n                    }}\n                />\n            </div>,\n            <div className=\"newInputArea\" key={'nickname'} style={{ marginLeft: '20px' }}>\n                <RLInput\n                    allowClear\n                    placeholder='请输入发布人员姓名'\n                    value={this.state.searchParam.nickname}\n                    key={'input_nickname'}\n                    onChange={(e) => {\n                        this.setState({\n                            searchParam: {\n                                ...this.state.searchParam,\n                                nickname: e.target.value\n                            }\n                        })\n                    }}\n                />\n            </div>\n        ]\n    }\n    getRightItems = () => {\n        return (\n            [\n                <RLButton\n                    label='搜索'\n                    type='primary'\n                    key={'search'}\n                    onClick={() => { this.getDataList({ page: 1 }) }}\n                    style={{ marginRight: 20 }}\n                />,\n                <RLButton\n                    label='重置'\n                    type='default'\n                    key={'reset'}\n                    onClick={this.reset}\n                    style={{ marginRight: 20 }}\n                />\n            ]\n        )\n    }\n    reset = () => {\n        this.setState({\n            start_date: null,\n            end_date: null,\n            searchParam: {\n                title: '',\n                start_time: '',\n                end_time: '',\n                nickname: ''\n            }\n        })\n    }\n    startDateChange = (val, dateString) => {\n        let numTime = dealSearchTime(dateString, true);\n        this.setState({\n            start_date: val,\n            searchParam: {\n                ...this.state.searchParam,\n                start_time: numTime\n            }\n        })\n    }\n    endDateChange = (val, dateString) => {\n        let numTime = dealSearchTime(dateString, false);\n        this.setState({\n            end_date: val,\n            searchParam: {\n                ...this.state.searchParam,\n                end_time: numTime\n            }\n        })\n    }\n    getTableTopRight = () => {\n        if (interfaces.SYSTEM_MESSAGENET_PUBLISH) {\n            return <RLButton\n                label='发布消息'\n                type='primary'\n                key='create'\n                style={{ marginRight: 20 }}\n                onClick={() => {\n                    this.setState({\n                        publish: true\n                    })\n                }}\n            />\n        } else {\n            return undefined\n        }\n    }\n    createLabel = (labelName, need, style = {}) => {\n        return <div>\n            {need ? <span style={{ color: '#ff4d4f' }}>*</span> : null}\n            <span style={{ ...style }}>{labelName}</span>\n        </div>\n    }\n    appointConfirm = (value) => {\n        this.setState({\n            click: true\n        })\n        publishMessageNet({\n            ...value\n        }).then(res => {\n            console.log(res);\n            if (res.code != 200) {\n                this.showToast({ type: 'error', content: res.msg })\n            } else {\n                this.showToast({ type: 'success', content: '发布成功' })\n                this.setState({\n                    publish: false\n                })\n            }\n        }).finally(() => {\n            this.setState({\n                click: false\n            })\n        })\n    }\n    render() {\n        return <WindowContainer>\n            <div>\n                <RLFilterTool leftItems={this.getLeftItems} rightItems={this.getRightItems} />\n                <RLFilterTool rightItems={this.getTableTopRight} />\n                <RLTable\n                    loading={this.state.listLoading}\n                    dataSource={this.state.currentListInfo.list}\n                    rowKey='id'\n                    columns={this.getColumns()}\n                    paginationInfo={{\n                        total: this.state.currentListInfo.count,\n                        pageSize: this.pageSize,\n                        onChange: this.pageChange,\n                        current: this.state.currentListInfo.page\n                    }}\n                />\n            </div>\n            {this.state.showCheck && <RLModal\n                title=\"查看消息\"\n                visible={this.state.showCheck}\n                onCancel={() => {\n                    this.setState({\n                        showCheck: false\n                    })\n                }}\n                footer={null}\n            >\n                <div className=\"checkNetBox\">\n                    <div>\n                        <p className=\"item\">消息标题:</p>\n                        <p className=\"mailCon\">{this.state.record.title}</p>\n                    </div>\n                    <div>\n                        <p className=\"item\">消息内容:</p>\n                        <p className=\"mailCon\">{this.state.record.content}</p>\n                    </div>\n                </div>\n            </RLModal>}\n            {this.state.publish && <RLModal\n                title=\"发布消息\"\n                visible={this.state.publish}\n                onCancel={() => {\n                    this.setState({\n                        publish: false\n                    })\n                }}\n                footer={null}\n            >\n                <div className=\"publishBox\">\n                    <RLForm\n                        labelCol={{ style: { width: 100 } }}\n                        labelAlign='left'\n                        wrapperCol={\n                            { span: 20 }\n                        }\n                        onFinish={this.appointConfirm}\n                        className='appointment-form'\n                        ref={this.appointForm}\n                        validateTrigger='onBlur'\n                    >\n                        <RLFormItem label={this.createLabel('消息标题', true)} colon={true}\n                            name='title'\n                            rules={[{\n                                validator: (rule, val) => {\n                                    if (!strTrim(val)) {\n                                        return Promise.reject('消息标题不可为空')\n                                    } else {\n                                        if (getStrLength(strTrim(val)) > 100) {\n                                            return Promise.reject('消息标题最多50个字')\n                                        }\n                                    }\n                                    return Promise.resolve()\n                                }\n                            }]}\n                        >\n                            <RLInput\n                                placeholder='请输入内容，不超过50个汉字'\n                                style={{ width: 300 }}\n                                value={this.state.formInput.title}\n                                onInput={(e) => {\n                                    let text = strTrim(e.target.value)\n                                    e.target.value = text\n                                    this.setState({\n                                        formInput: {\n                                            ...this.state.formInput,\n                                            title: text\n                                        }\n                                    })\n                                }}\n                            />\n                        </RLFormItem>\n                        <RLFormItem label={this.createLabel('消息内容', true)} colon={true} style={{\n                            border: 'none'\n                        }}\n                            name='content'\n                            rules={[{\n                                validator: (rule, val) => {\n                                    if (!strTrim(val)) {\n                                        return Promise.reject('消息内容不可为空')\n                                    } else {\n                                        if (strTrim(val).length > 2000) {\n                                            return Promise.reject('消息内容最多1000')\n                                        }\n                                    }\n                                    return Promise.resolve()\n                                }\n                            }]}\n                        >\n                            <RLTextarea\n                                placeholder='请输入消息内容,不超过1000个汉字'\n                                showCount\n                                autoSize={{ minRows: 4, maxRows: 8 }}\n                                maxLength={2000}\n                                bordered={false}\n                                style={{ width: 300, height: '100%' }}\n                                value={this.state.formInput.content}\n                                onInput={(e) => {\n                                    let text = strTrim(e.target.value);\n                                    e.target.value = text\n                                    this.setState({\n                                        formInput: {\n                                            ...this.state.formInput,\n                                            content: text\n                                        }\n                                    })\n                                }}\n                            />\n                        </RLFormItem>\n                        <div style={{ width: '100%', display: 'flex', flex: 1, justifyContent: 'center' }}>\n                            <RLButton\n                                type=\"default\"\n                                label='取消'\n                                width={80}\n                                onClick={() => {\n                                    this.setState({\n                                        publish: false\n                                    })\n                                }}\n                            />\n                            <RLButton type=\"primary\"\n                                htmlType=\"submit\"\n                                label={'发布'}\n                                style={{ marginLeft: 40 }}\n                                width={80}\n                                loading={this.state.submitLoading}\n                                disabled={this.state.click}\n                            />\n                        </div>\n                    </RLForm>\n                </div>\n            </RLModal>}\n        </WindowContainer>\n    }\n}\nexport default MessageManagementNet","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/system/messageManagement/messageManagementMail/messageManagementMail.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/WindowContainer.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/system/system.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/system/AdManagement/components/ADDetail.js",["1024","1025","1026","1027","1028","1029","1030","1031","1032","1033","1034","1035","1036"],"import React from 'react';\nimport {\n    RLButton,\n    RLDisplayBoard,\n    RLTag\n} from '@components/index.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport BaseCmp from '@components/BaseCmp.js'\nimport { dealTableTime } from '@/libs/utils.js'\nimport { getADDetail } from '@actions/system/system.js'\n\nclass ADDetail extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.ADid = this.props.id\n        this.state = {\n            ADDetail: {\n                title: '',\n                type: '首页banner',\n                argument: '',\n                argue_type: undefined,\n                webapp: '',\n                website: '',\n                start_at: '',\n                end_at: '',\n                is_show: '',\n                click_count: '',\n                created_at: '',\n                updated_at: ''\n            }\n        }\n\n    }\n    componentDidMount() {\n        this.getADDetail(this.ADid)\n    }\n    getADDetail = (ADid) => {\n        getADDetail({ id: ADid }).then(res => {\n            if (res.code !== 200) {\n                this.showToast({ type: 'error', content: '获取广告详情失败' })\n            } else {\n                let {\n                    title,\n                    type, argument, argue_type, webapp, website, start_at, end_at,\n                    is_show, click_count, created_at, updated_at\n                } = res.data;\n                this.setState({\n                    ADDetail: {\n                        title,\n                        type, argument, argue_type, webapp, website, start_at, end_at,\n                        is_show, click_count, created_at, updated_at\n                    }\n                })\n            }\n        })\n    }\n    pageTitle = () => {\n        return (\n            <div className=\"custom-page-title\">\n                <span>广告详情</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.return && this.props.return()\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n    render() {\n        const { title,\n            type, argument, argue_type, webapp, website, start_at, end_at,\n            is_show, click_count, created_at, updated_at\n        } = this.state.ADDetail\n        let valueBtnStyle = {\n            flex: 10,\n            display: 'flex',\n            flexDirection: 'row'\n        }\n        let labelStyle = {\n            color: '#999',\n            fontSize: 14,\n            textAlign: 'left',\n            width: 56,\n            flex: 'none'\n        }\n        let valueStyle = {\n            color: '#333',\n            fontSize: 14\n        }\n        let basicBoxStyle = {\n            width: 500,\n            height: 200,\n            border: '1px solid rgb(220, 223, 230)',\n            borderRadius: 3,\n            padding: '10px 10px 10px 10px',\n            boxSizing: 'border-box'\n        }\n        let ADInfo = [\n            {\n                list: [\n                    {\n                        label: '广告主题',\n                        value: title,\n                        labelStyle,\n                        valueStyle,\n                    },\n                    {\n                        label: '广告类型',\n                        labelStyle,\n                        valueStyle,\n                        value: (() => {\n                            if (type == 'index') {\n                                return '首页banner'\n                            } else {\n                                return null\n                            }\n                        })()\n                    },\n                    {\n                        label: '开始时间',\n                        labelStyle,\n                        valueStyle,\n                        value: dealTableTime(start_at)\n                    },\n                    {\n                        label: '结束时间',\n                        labelStyle,\n                        valueStyle,\n                        value: dealTableTime(end_at)\n                    },\n                    {\n                        label: '广告状态',\n                        labelStyle,\n                        valueStyle,\n                        value: is_show === 1 ? '已上线' : '未上线'\n                    },\n                    {\n                        label: 'web轮播图片',\n                        labelStyle,\n                        valueStyle,\n                        value: <div>\n                            <img src={website} alt='' width='200' />\n                        </div>\n                    },\n                    {\n                        label: '移动端轮播图片',\n                        labelStyle,\n                        valueStyle,\n                        value: <div>\n                            <img src={webapp} alt='' width='200' />\n                        </div>\n                    },\n                    {\n                        label: '图片关联类型',\n                        labelStyle,\n                        valueStyle,\n                        value: (() => {\n                            if (argue_type == '1') {\n                                return '会议'\n                            } else if (argue_type == '2') {\n                                return '直播'\n                            } else if (argue_type == '3') {\n                                return '链接地址'\n                            } else if (argue_type == '4') {\n                                return '点播'\n                            }\n                        })()\n                    },\n                    {\n                        label: '图片关联信息',\n                        labelStyle,\n                        valueStyle,\n                        value: (() => {\n                            if (argue_type == '1') {\n                                return `会议ID:${argument}`\n                            } else if (argue_type == '2') {\n                                return `直播ID:${argument}`\n                            } else if (argue_type == '3') {\n                                return `链接地址:${argument}`\n                            } else if (argue_type == '4') {\n                                return `点播ID:${argument}`\n                            }\n                        })()\n                    },\n                    // {\n                    //     label: '点击人数',\n                    //     labelStyle,\n                    //     valueStyle,\n                    //     value: click_count + ''\n                    // },\n                    {\n                        label: '创建时间',\n                        labelStyle,\n                        valueStyle,\n                        value: created_at\n                    },\n                    {\n                        label: '更新时间',\n                        labelStyle,\n                        valueStyle,\n                        value: updated_at\n                    }\n                ]\n            }\n        ]\n        return (\n            <div className=\"floatBox\">\n                <WindowContainer title={this.pageTitle} className='my-meeting-detail'>\n                    <RLDisplayBoard\n                        style={{ width: '100%', flex: 1 }}\n                        labelCol={2}\n                        valueCol={10}\n                        spaceWidth={20}\n                        className='meeting-info'\n                        items={ADInfo}>\n                    </RLDisplayBoard>\n                </WindowContainer>\n            </div>\n\n        )\n    }\n}\nexport default ADDetail","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/system/AdManagement/components/ADOnlineLists.js",["1037","1038","1039","1040","1041","1042"],"import BaseCmp from '@components/BaseCmp.js'\nimport { RLButton, RLTable, RLSwitch } from '@components/index.js'\nimport { unLineADList, showOrHide, sortAD } from '@actions/system/system.js'\nimport interfaces from '@/api/interfaces'\nimport { dealTableTime } from '@/libs/utils'\nimport { sortableContainer, sortableElement, sortableHandle } from 'react-sortable-hoc';\nimport { MenuOutlined } from '@ant-design/icons'\nimport arrayMove from 'array-move'\nimport './adOnlineLists.less'\n\nconst DragHandle = sortableHandle(() => <MenuOutlined style={{ cursor: 'grab', color: '#999' }} />);\nconst SortableItem = sortableElement(props => <tr {...props} />);\nconst SortableContainer = sortableContainer(props => <tbody {...props} />);\nclass ADOnlineLists extends BaseCmp {\n    constructor(props) {\n        super(props);\n        this.type = this.props.type;\n        this.state = {\n            searchParam: {  // 搜索列表筛选条件\n                type: 1\n            },\n            dataSource: [],\n            listLoading: true,      // 获取列表中loading\n        };\n    }\n    componentDidMount() {\n        this.getDataList()\n    }\n    getDataList = () => {\n        this.setState({\n            listLoading: true,\n        })\n        unLineADList({\n            ...this.state.searchParam\n        }).then(res => {\n            if (res.code === 200) {\n                let newState = {\n                    dataSource: res.data\n                }\n                this.setState(newState)\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        }).finally(() => {\n            this.setState({\n                listLoading: false,\n            })\n        })\n    }\n    getColumns = () => {\n        let columns = [\n            {\n                title: '排序',\n                dataIndex: 'sort',\n                width: 80,\n                className: 'drag-visible',\n                render: () => <DragHandle />,\n            },\n            {\n                title: '序号',\n                key: 'id',\n                width: '9%',\n                render: (text, record, index) => `${index + 1}`\n            },\n            {\n                title: '标题',\n                dataIndex: 'title',\n                key: 'title'\n            },\n            {\n                title: '时间',\n                key: 'start_at',\n                width: 200,\n                render: (record) => {\n                    return <div>\n                        <div>上线:{record.start_at}</div>\n                        <div>下线:{record.end_at}</div>\n                    </div>\n                }\n            },\n            {\n                title: '图片关联',\n                key: 'argue_type',\n                render: (record) => {\n                    if (record.argue_type == 1) {\n                        return '会议'\n                    } else if (record.argue_type == 2) {\n                        return '直播'\n                    } else if (record.argue_type == 3) {\n                        return '链接地址'\n                    } else if (record.argue_type == 4) {\n                        return '点播'\n                    }\n                }\n            },\n            // {\n            //     title: '点击次数',\n            //     dataIndex: 'click_count',\n            //     key: 'click_count'\n            // },\n            {\n                title: '创建时间',\n                dataIndex: 'created_at',\n                key: 'created_at'\n            },\n            {\n                title: '创建者',\n                dataIndex: 'creator',\n                key: 'creator'\n            },\n            {\n                title: '操作',\n                key: 'selfDoIt',\n                width: 50,\n                render: (record) => {\n                    return <div style={{\n                        display: 'flex'\n                    }}>\n                        <RLButton\n                            type='link'\n                            key={'check'}\n                            label={'查看'}\n                            onClick={(e) => {\n                                this.props.showDetail && this.props.showDetail(record.id)\n                            }}\n                        />\n                    </div>\n                }\n            }\n        ]\n        columns.splice(4, 0, {\n            title: '上线/下线',\n            key: 'is_show',\n            width: 100,\n            render: (record) => {\n                return <RLSwitch\n                    defaultChecked={record.is_show === 1}\n                    checked={record.is_show === 1}\n                    onClick={e => {\n                        console.log(e)\n                        if (!interfaces.SYSTEM_AD_UNUP) {\n                            this.showToast({ type: 'error', content: '您没有此权限' })\n                        } else {\n                            showOrHide({\n                                is_show: e ? 1 : 0,\n                                id: record.id\n                            }).then(res => {\n                                this.getDataList()\n                            })\n                        }\n                    }}\n                />\n            }\n        })\n        return columns\n    }\n    DraggableContainer = props => (\n        <SortableContainer\n            useDragHandle\n            disableAutoscroll\n            helperClass=\"row-dragging\"\n            onSortEnd={this.onSortEnd}\n            {...props}\n        />\n    );\n    DraggableBodyRow = ({ className, style, ...restProps }) => {\n        const { dataSource } = this.state;\n        const index = dataSource.findIndex(x => x.id === restProps['data-row-key']);\n        return <SortableItem index={index} {...restProps} />;\n    }\n    onSortEnd = ({ oldIndex, newIndex }) => {\n        const { dataSource } = this.state;\n        if (oldIndex !== newIndex) {\n            const newData = arrayMove([].concat(dataSource), oldIndex, newIndex).filter(el => !!el);\n            console.log('Sorted items: ', newData);\n            this.moveAD(newData);\n            //this.setState({ dataSource: newData });\n        }\n    }\n    moveAD = (dataSource) => {\n        let sort = [];\n        dataSource.forEach((ele, index) => {\n            sort[index] = {};\n            sort[index].id = ele.id;\n            sort[index].rank = (dataSource.length - index) * 10;\n        })\n        sortAD({ sort: [...sort] }).then(res => {\n            console.log(res, '排序成功')\n            if (res.code == 200) {\n                this.getDataList()\n            } else {\n                this.showToast(res.msg)\n            }\n        })\n    }\n    render() {\n        return (\n            <div style={{ position: 'relative' }} className=\"ADonline\">\n                <RLTable\n                    loading={this.state.listLoading}\n                    dataSource={this.state.dataSource}\n                    rowKey='id'\n                    columns={this.getColumns()}\n                    pagination={false}\n                    components={{\n                        body: {\n                            wrapper: this.DraggableContainer,\n                            row: this.DraggableBodyRow,\n                        },\n                    }}\n                />\n            </div>\n        )\n    }\n}\nexport default ADOnlineLists","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/system/AdManagement/components/ADOfflineList.js",["1043","1044","1045","1046","1047"],"import BaseCmp from '@components/BaseCmp.js'\nimport { RLFilterTool, RLButton, RLTable, RLSwitch, RLDatePicker, RLInput } from '@components/index.js'\nimport { unLineADList, deleteAD, showOrHide } from '@actions/system/system.js'\nimport interfaces from '@/api/interfaces';\nimport { dealSearchTime, dealTableTime } from '@/libs/utils'\nimport locale from 'antd/es/date-picker/locale/zh_CN';\nclass ADOfflineList extends BaseCmp {\n    constructor(props) {\n        super(props);\n        this.type = this.props.type;\n        this.state = {\n            start_date: '',\n            end_date: '',\n            searchParam: {  // 搜索列表筛选条件\n                type: this.props.type === 'offLine' ? 2 : 3\n            },\n            currentListInfo: {  // 列表信息\n                pageNum: 1,  // 总页数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: 1,     // 当前第几页\n            },\n            listLoading: true,      // 获取列表中loading\n        };\n    }\n    componentDidMount() {\n        this.getDataList()\n    }\n    getDataList = ({ page = this.state.currentListInfo.page } = { page: this.state.currentListInfo.page }) => {\n        this.setState({\n            listLoading: true,\n        })\n        unLineADList({\n            ...this.state.searchParam,\n            page,\n            pagesize: this.pageSize\n        }).then(res => {\n            if (res.code === 200) {\n                let newState = {\n                    currentListInfo: {\n                        list: res.data.list,\n                        page,\n                        count: res.data.count,\n                        pageNum: Math.ceil(res.data.count / this.pageSize)\n                    }\n                }\n                this.setState(newState)\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        }).finally(() => {\n            this.setState({\n                listLoading: false,\n            })\n        })\n    }\n    getColumns = () => {\n        let columns = [\n            {\n                title: '序号',\n                key: 'id',\n                width: '9%',\n                render: (text, record, index) => `${index + 1}`\n            },\n            {\n                title: '标题',\n                dataIndex: 'title',\n                key: 'title'\n            },\n            {\n                title: '时间',\n                key: 'start_at',\n                render: (record) => {\n                    return <div>\n                        <div>上线:{record.start_at}</div>\n                        <div>下线:{record.end_at}</div>\n                    </div>\n                }\n            },\n            {\n                title: '图片关联',\n                key: 'argue_type',\n                render: (record) => {\n                    if (record.argue_type == 1) {\n                        return '会议'\n                    } else if (record.argue_type == 2) {\n                        return '直播'\n                    } else if (record.argue_type == 3) {\n                        return '链接地址'\n                    } else if (record.argue_type == 4) {\n                        return '点播'\n                    }\n                }\n            },\n            // {\n            //     title: '点击次数',\n            //     dataIndex: 'click_count',\n            //     key: 'click_count'\n            // },\n            {\n                title: '更新时间',\n                dataIndex: 'created_at',\n                key: 'created_at'\n            },\n            {\n                title: '创建者',\n                dataIndex: 'creator',\n                key: 'creator'\n            },\n            {\n                title: '操作',\n                key: 'selfDoIt',\n                width: '18%',\n                render: (record) => {\n                    return <div style={{\n                        display: 'flex'\n                    }}>\n                        <RLButton\n                            type='link'\n                            key={'check'}\n                            label={'查看'}\n                            onClick={(e) => {\n                                this.props.showDetail && this.props.showDetail(record.id)\n                            }}\n                        />\n                        {this.type === 'offLine' && interfaces.SYSTEM_AD_EDIT && <RLButton\n                            type='link'\n                            key={'edit'}\n                            label={'编辑'}\n                            onClick={(e) => {\n                                this.props.editAD && this.props.editAD(record.id)\n                            }}\n                        />}\n                        {interfaces.SYSTEM_AD_DELETE && <RLButton\n                            type='link'\n                            key={'delete'}\n                            label={'删除'}\n                            onClick={(e) => {\n                                this.showModal({\n                                    title: '您是否确定删除此广告？',\n                                    okText: '确定',\n                                    cancelText: '取消',\n                                    onOk: () => {\n                                        return deleteAD({ id: record.id }).then(res => {\n                                            if (res.code === 200) {\n                                                this.showToast({ type: 'success', content: '删除成功' });\n                                                this.getDataList()\n                                            } else {\n                                                this.showToast({ type: 'error', content: res.msg })\n                                            }\n                                        })\n                                    },\n                                    onCancel: () => {\n\n                                    },\n                                    size: 'small'\n                                })\n                            }}\n                        />}\n                    </div>\n                }\n            }\n        ]\n        if (this.type === 'offLine') {\n            columns.splice(4, 0, {\n                title: '上线/下线',\n                key: 'is_show',\n                render: (record) => {\n                    return <RLSwitch\n                        defaultChecked={record.is_show === 1}\n                        checked={record.is_show === 1}\n                        onClick={e => {\n                            if (!interfaces.SYSTEM_AD_UNUP) {\n                                this.showToast({ type: 'error', content: '您没有此权限' })\n                            } else {\n                                showOrHide({\n                                    is_show: e ? 1 : 0,\n                                    id: record.id\n                                }).then(res => {\n                                    this.getDataList()\n                                })\n                            }\n                        }}\n                    />\n                }\n            })\n        }\n        return columns\n    }\n    pageChange = (page) => {\n        this.getDataList({ page })\n    }\n\n    reset = () => {\n        this.setState({\n            start_date: null,\n            end_date: null,\n            searchInput: '',\n            searchParam: {\n                ...this.state.searchParam,\n                creator: '',\n                start_time: '',\n                end_time: '',\n                title: ''\n            }\n        })\n    }\n\n    getLeftItems = () => {\n        return [\n            <div className=\"newTimeArea\" key={'date'}>\n                <p>从</p>\n                <RLDatePicker\n                    allowClear\n                    onChange={this.startDateChange}\n                    disabledDate={this.startDisabledDate}\n                    locale={locale}\n                    inputReadOnly={true}\n                    format=\"YYYY-MM-DD\"\n                    placeholder='请选择日期'\n                    value={this.state.start_date}\n                />\n                <p>至</p>\n                <RLDatePicker\n                    allowClear\n                    onChange={this.endDateChange}\n                    disabledDate={this.startDisabledDate}\n                    locale={locale}\n                    inputReadOnly={true}\n                    format=\"YYYY-MM-DD\"\n                    placeholder='请选择日期'\n                    value={this.state.end_date}\n                />\n            </div>,\n            <div className=\"newInputArea\" key={'title'} style={{ marginLeft: '20px' }}>\n                <RLInput\n                    allowClear\n                    placeholder='请输入广告标题'\n                    value={this.state.searchParam.title}\n                    key={'input_title'}\n                    onChange={(e) => {\n                        this.setState({\n                            searchParam: {\n                                ...this.state.searchParam,\n                                title: e.target.value\n                            }\n                        })\n                    }}\n                />\n            </div>,\n            <div className=\"newInputArea\" key={'creator'} style={{ marginLeft: '20px' }}>\n                <RLInput\n                    allowClear\n                    placeholder='请输入发布人员姓名'\n                    value={this.state.searchParam.creator}\n                    key={'creator'}\n                    onChange={(e) => {\n                        this.setState({\n                            searchParam: {\n                                ...this.state.searchParam,\n                                creator: e.target.value\n                            }\n                        })\n                    }}\n                />\n            </div>\n        ]\n    }\n\n    startDateChange = (val, dateString) => {\n        let numTime = dealSearchTime(dateString, true);\n        this.setState({\n            start_date: val,\n            searchParam: {\n                ...this.state.searchParam,\n                start_time: numTime\n            }\n        })\n    }\n    endDateChange = (val, dateString) => {\n        let numTime = dealSearchTime(dateString, false);\n        this.setState({\n            end_date: val,\n            searchParam: {\n                ...this.state.searchParam,\n                end_time: numTime\n            }\n        })\n    }\n    getRightItems = () => {\n        return (\n            [\n                <RLButton\n                    label='搜索'\n                    type='primary'\n                    key={'search'}\n                    onClick={() => { this.getDataList({ page: 1 }) }}\n                    style={{ marginRight: 20 }}\n                />,\n                <RLButton\n                    label='重置'\n                    type='default'\n                    key={'reset'}\n                    onClick={this.reset}\n                    style={{ marginRight: 20 }}\n                />\n            ]\n        )\n    }\n    render() {\n        return (\n            <div className=''>\n                <RLFilterTool leftItems={this.getLeftItems} rightItems={this.getRightItems} />\n                <RLTable\n                    loading={this.state.listLoading}\n                    dataSource={this.state.currentListInfo.list}\n                    rowKey='id'\n                    columns={this.getColumns()}\n                    paginationInfo={{\n                        total: this.state.currentListInfo.count,\n                        pageSize: this.pageSize,\n                        onChange: this.pageChange,\n                        current: this.state.currentListInfo.page\n                    }}\n                />\n            </div>\n        )\n    }\n}\nexport default ADOfflineList","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/system/AdManagement/components/AddAD.js",["1048","1049","1050","1051","1052"],"import React from 'react';\nimport {\n    RLInput,\n    RLButton,\n    RLForm,\n    RLFormItem,\n    RLDatePicker,\n    RLSelect,\n    RLDisplayBoard,\n    RLTag\n} from '@components/index.js'\nimport './AddAD.less'\nimport WindowContainer from '@components/WindowContainer.js'\nimport moment from 'moment'\nimport BaseCmp from '@components/BaseCmp.js'\nimport locale from 'antd/es/date-picker/locale/zh_CN';\nimport SystemUpload from '@/pages/system/AdManagement/components/SystemUpload.js'\nimport { getADDetail, addAD, editAD } from '@actions/system/system.js'\nimport { dealSearchTime, dealTableTime } from '@/libs/utils'\n\nconst argumentList = [\n    {\n        label: '会议',\n        value: '1'\n    },\n    {\n        label: '直播',\n        value: '2'\n    },\n    {\n        label: '链接地址',\n        value: '3'\n    },\n    {\n        label: '点播',\n        value: '4'\n    }\n]\n\nclass AddAD extends BaseCmp {\n    constructor(props) {\n        super(props);\n        this.ADid = this.props.id;\n        this.state = {\n            mobileBanner: [],\n            webBanner: [],\n            appointParam: {\n                title: '',\n                type: 'index',\n                argument: '',\n                argue_type: undefined,\n                webapp: '',\n                website: ''\n            },\n            endTime: undefined,\n            startTime: undefined,\n            disclaimer: false,\n            pageTitle: '',\n            submitLoading: false // 提交按钮正在loading\n        };\n        this.appointForm = React.createRef();\n    }\n\n    componentWillMount() {\n        if (this.ADid) {\n            this.setState({\n                pageTitle: '编辑广告'\n            })\n        } else {\n            this.setState({\n                pageTitle: '创建广告'\n            })\n        }\n    }\n    componentDidMount() {\n        this.appointForm.current.setFieldsValue(this.state.appointParam);\n        if (this.ADid) {\n            this.getDetail(this.ADid)\n        }\n    }\n    getDetail = (id) => {\n        getADDetail({ id: id }).then(res => {\n            if (res.code !== 200) {\n                this.showToast({ type: 'error', content: '获取广告详情失败' })\n            } else {\n                console.log('广告详情：', res)\n                let {\n                    title,\n                    type,\n                    argument,\n                    argue_type,\n                    webapp,\n                    website,\n                    start_at,\n                    end_at\n                } = res.data;\n                let startTime = dealTableTime(start_at);\n                let endTime = dealTableTime(end_at);\n                this.setState({\n                    startTime,\n                    endTime,\n                    mobileBanner: [{ url: webapp }],\n                    webBanner: [{ url: website }],\n                    appointParam: {\n                        title,\n                        type,\n                        argument,\n                        argue_type: argue_type + '',\n                        webapp,\n                        website,\n                        start_at,\n                        end_at\n                    }\n                }, () => {\n                    this.appointForm.current.setFieldsValue(this.state.appointParam);\n                    this.appointForm.current.setFieldsValue({\n                        start_date: moment(startTime),\n                        start_time: moment(startTime),\n                        end_date: moment(endTime),\n                        end_time: moment(endTime),\n                    })\n                })\n            }\n        })\n    }\n    addConfirm = (users) => {\n        this.setState({\n            appointParam: {\n                ...this.state.appointParam,\n                userlist: users\n            }\n        })\n    }\n    startDateChange = (m) => {\n        this.appointForm.current.validateFields(['start_time', 'end_date', 'end_time'])\n    }\n    startTimeChange = (m) => {\n        this.appointForm.current.validateFields(['start_date', 'end_date', 'end_time'])\n    }\n    appointFailed = (res) => {\n        this.showToast({ content: '您有必填项未填写', type: 'success' })\n    }\n    appointConfirm = (values) => {\n        let start_date, start_time, end_date, end_time;\n        start_date = values.start_date.format('YYYY-MM-DD')\n        start_time = values.start_time.format('HH:mm')\n        end_date = values.end_date.format('YYYY-MM-DD')\n        end_time = values.end_time.format('HH:mm')\n        let param = {}\n        for (let key in this.state.appointParam) {\n            if (key !== 'start_at' && key !== 'end_at') {\n                param[key] = this.state.appointParam[key]\n            }\n        }\n        param['start_at'] = new Date(start_date + ' ' + start_time).getTime() / 1000\n        param['end_at'] = new Date(end_date + ' ' + end_time).getTime() / 1000\n        this.setState({\n            submitLoading: true,\n            disclaimer: true\n        })\n        if (this.ADid) {\n            param.id = this.ADid;\n            editAD(param).then(res => {\n                if (res.code === 200) {\n                    this.showToast({ content: '编辑成功', type: 'success' })\n                    this.props.return && this.props.return(true)\n                } else {\n                    this.showToast({ content: res.msg, type: 'error' })\n                }\n            }).finally(() => {\n                this.setState({\n                    submitLoading: false,\n                    disclaimer: false\n                })\n            })\n        } else {\n            addAD(param).then(res => {\n                if (res.code === 200) {\n                    this.showToast({ content: '创建成功', type: 'success' })\n                    this.props.return && this.props.return(true)\n                } else {\n                    this.showToast({ content: res.msg, type: 'error' })\n                }\n            }).finally(() => {\n                this.setState({\n                    submitLoading: false,\n                    disclaimer: false\n                })\n            })\n        }\n    }\n    /**\n     * 页面头部\n     */\n    pageTitle = () => {\n        return (\n            <div className=\"custom-page-title\">\n                <span>{this.state.pageTitle}</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.return && this.props.return()\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n    /**\n     * 创建表单的label\n     */\n    createLabel = (labelName, need, style = {}) => {\n        return <div>\n            {need ? <span style={{ color: '#ff4d4f' }}>*</span> : null}\n            <span style={{ ...style }}>{labelName}</span>\n        </div>\n    }\n    meetingBtn = () => {\n        return <div className='argumentItem heng'>\n            <RLButton\n                type=\"default\"\n                label='选择可推广的会议'\n                width={140}\n                height={40}\n                onClick={() => {\n                    this.props.displayRoomList && this.props.displayRoomList({\n                        type: 0\n                    })\n                }}\n            />\n            {this.state.appointParam.argument && <RLTag label={`会议ID:${this.state.appointParam.argument}`} closable onClose={() => {\n                this.setState({\n                    appointParam: {\n                        ...this.state.appointParam,\n                        argument: ''\n                    }\n                }, () => {\n                    this.appointForm.current.validateFields(['argument'])\n                })\n            }} />}\n        </div>\n    }\n    liveBtn = () => {\n        return <div className='argumentItem heng'>\n            <RLButton\n                type=\"default\"\n                label='选择可推广的直播'\n                width={140}\n                height={40}\n                onClick={() => {\n                    this.props.displayRoomList && this.props.displayRoomList({\n                        type: 1\n                    })\n                }}\n            />\n            {this.state.appointParam.argument && <RLTag label={`直播ID:${this.state.appointParam.argument}`} closable onClose={() => {\n                this.setState({\n                    appointParam: {\n                        ...this.state.appointParam,\n                        argument: ''\n                    }\n                }, () => {\n                    this.appointForm.current.validateFields(['argument'])\n                })\n            }} />}\n        </div>\n    }\n    demandInput = () => {\n        return <div className='argumentItem'>\n            <RLInput\n                style={{ width: 120 }}\n                placeholder={'请输入点播ID'}\n                value={this.state.appointParam.argument}\n                onChange={(e) => {\n                    let text = e.target.value\n                    this.setState({\n                        appointParam: {\n                            ...this.state.appointParam,\n                            argument: text\n                        }\n                    })\n                }}\n            />\n        </div>\n    }\n    hrefInput = () => {\n        return <div className='argumentItem'>\n            <RLInput\n                style={{ width: 360 }}\n                placeholder={'请输入链接地址'}\n                value={this.state.appointParam.argument}\n                onChange={(e) => {\n                    let text = e.target.value\n                    this.setState({\n                        appointParam: {\n                            ...this.state.appointParam,\n                            argument: text\n                        }\n                    })\n                }}\n            />\n        </div>\n    }\n    addRoomNum = (id) => {\n        this.setState({\n            appointParam: {\n                ...this.state.appointParam,\n                argument: id\n            }\n        }, () => {\n            this.appointForm.current.validateFields(['argument'])\n        })\n    }\n    createArgument = () => {\n        if (this.state.appointParam.argue_type == 1) {\n            return this.meetingBtn()\n        } else if (this.state.appointParam.argue_type == 2) {\n            return this.liveBtn()\n        } else if (this.state.appointParam.argue_type == 3) {\n            return this.hrefInput()\n        } else if (this.state.appointParam.argue_type == 4) {\n            return this.demandInput()\n        }\n    }\n    pageTitle = () => {\n        return (\n            <div className=\"custom-page-title\">\n                <span>{this.state.pageTitle}</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.return && this.props.return()\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n    startDisabledDate = (current) => {\n        return current && current < moment().startOf('day')\n    }\n    render() {\n        return (\n            <div className=\"floatBox\">\n                <WindowContainer title={this.pageTitle}>\n                    <div className=\"meeting-appointment\">\n                        <RLDisplayBoard\n                            style={{ padding: 70, paddingTop: 40 }}\n                        >\n                            <RLForm\n                                labelCol={{ style: { width: 100, marginRight: 20 } }}\n                                labelAlign='left'\n                                wrapperCol={\n                                    { span: 20 }\n                                }\n                                onFinish={this.appointConfirm}\n                                onFinishFailed={this.appointFailed}\n                                className='appointment-form'\n                                ref={this.appointForm}\n                                validateTrigger='onBlur'\n                            >\n                                <RLFormItem label={this.createLabel('标题', true)} colon={true}\n                                    name='title'\n                                    rules={[{\n                                        validator: (rule, val) => {\n                                            if (!val) {\n                                                return Promise.reject('广告标题不可为空')\n                                            }\n                                            return Promise.resolve()\n                                        }\n                                    }\n                                    ]}\n                                >\n                                    <RLInput\n                                        placeholder='请输入内容'\n                                        style={{ width: 360 }}\n                                        onChange={(e) => {\n                                            let text = e.target.value\n                                            this.setState({\n                                                appointParam: {\n                                                    ...this.state.appointParam,\n                                                    title: text\n                                                }\n                                            })\n                                        }}\n                                    />\n                                </RLFormItem>\n                                <RLFormItem label={this.createLabel('广告位置', true)} colon={true}\n                                    name='type'\n                                >\n                                    <RLSelect\n                                        options={[{\n                                            label: '首页banner',\n                                            value: 'index'\n                                        }]}\n                                        style={{ width: 120 }}\n                                        placeholder='请选择'\n                                        value={this.state.appointParam.type}\n                                        onChange={(e) => {\n                                            this.setState({\n                                                appointParam: {\n                                                    ...this.state.appointParam,\n                                                    type: e\n                                                }\n                                            })\n                                        }}\n                                    />\n                                </RLFormItem>\n                                <RLFormItem label={this.createLabel('开始时间', true)} colon={true}>\n                                    <div className='form-item-gropu'>\n                                        <RLFormItem\n                                            name='start_date'\n                                            rules={[\n                                                {\n                                                    required: true,\n                                                    message: '请选择开始日期'\n                                                }\n                                            ]}\n                                            initialValue={this.state.startTime ? moment(this.state.startTime) : undefined}\n                                        >\n                                            <RLDatePicker\n                                                allowClear={false}\n                                                onChange={this.startDateChange}\n                                                locale={locale}\n                                                inputReadOnly={true}\n                                                disabledDate={this.startDisabledDate}\n                                            />\n                                        </RLFormItem>\n                                        <RLFormItem\n                                            name='start_time'\n                                            rules={[\n                                                {\n                                                    required: true,\n                                                    message: '请选择开始时间'\n                                                }\n                                            ]}\n                                            initialValue={this.state.startTime ? moment(this.state.startTime) : undefined}\n                                        >\n                                            <RLDatePicker\n                                                allowClear={false}\n                                                picker='time'\n                                                showNow={false}\n                                                format='HH:mm'\n                                                onChange={this.startTimeChange}\n                                                locale={locale}\n                                                inputReadOnly={true}\n                                            />\n                                        </RLFormItem>\n                                    </div>\n                                </RLFormItem>\n                                <RLFormItem label={this.createLabel('结束时间', true)} colon={true}>\n                                    <div className='form-item-gropu'>\n                                        <RLFormItem\n                                            name='end_date'\n                                            rules={[{\n                                                validator: (rule, val) => {\n                                                    if (!val) {\n                                                        return Promise.reject('请选择结束日期')\n                                                    }\n                                                    let { start_date, start_time, end_time } = this.appointForm.current.getFieldsValue(['start_date', 'start_time', 'end_time'])\n                                                    if (start_date && start_time && end_time) {\n                                                        let startTime = moment(start_date.format('YYYY-MM-DD') + ' ' + start_time.format('HH:mm'))\n                                                        let endTime = moment(val.format('YYYY-MM-DD') + ' ' + end_time.format('HH:mm'))\n                                                        if (startTime >= endTime) {\n                                                            return Promise.reject('结束时间不能小于开始时间')\n                                                        }\n                                                    }\n                                                    return Promise.resolve()\n                                                }\n                                            }]}\n                                            initialValue={this.state.endTime ? moment(this.state.endTime) : undefined}\n                                        >\n                                            <RLDatePicker\n                                                allowClear={false}\n                                                locale={locale}\n                                                inputReadOnly={true}\n                                                disabledDate={this.startDisabledDate}\n                                                onChange={() => {\n                                                    this.appointForm.current.validateFields(['end_time', 'start_date', 'start_time'])\n                                                }}\n                                            />\n                                        </RLFormItem>\n                                        <RLFormItem\n                                            name='end_time'\n                                            rules={[\n                                                {\n                                                    validator: (rule, val) => {\n                                                        if (!val) {\n                                                            return Promise.reject('请选择结束时间')\n                                                        }\n                                                        // let { start_date, start_time, end_date } = this.appointForm.current.getFieldsValue(['start_date', 'start_time', 'end_date'])\n                                                        // if (start_date && start_time && end_date) {\n                                                        //     let startTime = moment(start_date.format('YYYY-MM-DD') + ' ' + start_time.format('HH:mm'))\n                                                        //     let endTime = moment(end_date.format('YYYY-MM-DD') + ' ' + val.format('HH:mm'))\n                                                        //     if (startTime >= endTime) {\n                                                        //         return Promise.reject('结束时间不能小于开始时间')\n                                                        //     }\n                                                        // }\n                                                        return Promise.resolve()\n                                                    },\n                                                }\n                                            ]}\n                                            initialValue={this.state.endTime ? moment(this.state.endTime) : undefined}\n                                        >\n                                            <RLDatePicker\n                                                allowClear={false}\n                                                showNow={false}\n                                                picker='time'\n                                                format='HH:mm'\n                                                locale={locale}\n                                                inputReadOnly={true}\n                                                onChange={(e) => {\n                                                    this.appointForm.current.validateFields(['end_date', 'start_date', 'start_time'])\n                                                }}\n                                            />\n                                        </RLFormItem>\n                                    </div>\n                                </RLFormItem>\n                                <RLFormItem label={this.createLabel('轮播图片', true)} colon={true}>\n                                    <p>只能上传jpg/png，大小不超过2M</p>\n                                    <RLFormItem\n                                        name='webapp'\n                                        rules={[{\n                                            validator: (rule, val) => {\n                                                if (!val) {\n                                                    return Promise.reject('请上传移动端banner')\n                                                }\n                                                return Promise.resolve()\n                                            }\n                                        }\n                                        ]}\n                                    >\n                                        <div className='systemPic'>\n                                            <SystemUpload\n                                                picList={this.state.mobileBanner}\n                                                aspect={16 / 9}\n                                                remove={() => {\n                                                    this.setState({\n                                                        mobileBanner: [],\n                                                        appointParam: {\n                                                            ...this.state.appointParam,\n                                                            webapp: ''\n                                                        }\n                                                    })\n                                                }}\n                                                showUploadList={{}}\n                                                upload={(res) => {\n                                                    this.setState({\n                                                        mobileBanner: [{ url: res.data.fileurl }],\n                                                        appointParam: {\n                                                            ...this.state.appointParam,\n                                                            webapp: res.data.fileurl\n                                                        }\n                                                    })\n                                                }}\n                                                accept={'.png,.jpg'}\n                                                fileType={'image'}\n                                            />\n                                            <p>移动端banner，图片比例16:9（建议：750*422px)</p>\n                                        </div>\n                                    </RLFormItem>\n                                    <RLFormItem\n                                        name='website'\n                                        rules={[{\n                                            validator: (rule, val) => {\n                                                if (!val) {\n                                                    return Promise.reject('请上传web网页banner')\n                                                }\n                                                return Promise.resolve()\n                                            }\n                                        }\n                                        ]}\n                                    >\n                                        <div className='systemPic' style={{ marginTop: 30 }}>\n                                            <SystemUpload\n                                                picList={this.state.webBanner}\n                                                aspect={192 / 40}\n                                                remove={() => {\n                                                    this.setState({\n                                                        webBanner: [],\n                                                        appointParam: {\n                                                            ...this.state.appointParam,\n                                                            website: ''\n                                                        }\n                                                    })\n                                                }}\n                                                showUploadList={{}}\n                                                upload={(res) => {\n                                                    this.setState({\n                                                        webBanner: [{ url: res.data.fileurl }],\n                                                        appointParam: {\n                                                            ...this.state.appointParam,\n                                                            website: res.data.fileurl\n                                                        }\n                                                    })\n                                                }}\n                                                accept={'.png,.jpg'}\n                                                fileType={'image'}\n                                            />\n                                            <p>web网页banner（建议：1920*400px)</p>\n                                        </div>\n                                    </RLFormItem>\n                                </RLFormItem>\n                                <RLFormItem label={this.createLabel('图片关联', true)} colon={true}>\n                                    <RLFormItem\n                                        name='argue_type'\n                                        rules={[{\n                                            validator: (rule, val) => {\n                                                if (!this.state.appointParam.argue_type) {\n                                                    return Promise.reject('请选择要关联的信息')\n                                                }\n                                                return Promise.resolve()\n                                            }\n                                        }]}\n                                    >\n                                        <div>\n                                            <RLSelect\n                                                options={argumentList}\n                                                style={{ width: 120 }}\n                                                placeholder='请选择'\n                                                value={this.state.appointParam.argue_type}\n                                                onChange={(e) => {\n                                                    this.setState({\n                                                        appointParam: {\n                                                            ...this.state.appointParam,\n                                                            argument: '',\n                                                            argue_type: e\n                                                        }\n                                                    })\n                                                }}\n                                            />\n                                        </div>\n                                    </RLFormItem>\n                                    {this.state.appointParam.argue_type && <RLFormItem\n                                        name='argument'\n                                        rules={[{\n                                            validator: (rule, val) => {\n                                                if (!this.state.appointParam.argument) {\n                                                    return Promise.reject('请选择要关联的信息')\n                                                }\n                                                return Promise.resolve()\n                                            }\n                                        }]}\n                                    >\n                                        {this.createArgument()}\n                                    </RLFormItem>}\n                                </RLFormItem>\n                                <div style={{ width: '100%', display: 'flex', flex: 1, justifyContent: 'center' }}>\n                                    <RLButton\n                                        type=\"default\"\n                                        label='取消'\n                                        width={80}\n                                        onClick={() => {\n                                            this.props.return && this.props.return()\n                                        }}\n                                    />\n                                    <RLButton type=\"primary\"\n                                        htmlType=\"submit\"\n                                        label={this.ADid ? '保存' : '创建'}\n                                        style={{ marginLeft: 40 }}\n                                        width={80}\n                                        loading={this.state.submitLoading}\n                                        disabled={this.state.disclaimer}\n                                    />\n                                </div>\n                            </RLForm>\n                        </RLDisplayBoard>\n                    </div>\n                </WindowContainer >\n            </div >\n        );\n    }\n}\n\nexport default AddAD","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/system/AdManagement/components/addRoom.js",["1053","1054"],"import BaseCmp from '@components/BaseCmp.js'\nimport { LargeModal, RLButton, RLTable } from '@components/index.js'\nimport { getRoomList } from '@actions/system/system.js'\nimport { dealTableTime } from '../../../../libs/utils'\n\nclass AddRoom extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.typeName = this.props.type == 1 ? '直播' : '会议'\n        this.state = {\n            listLoading: false,\n            searchParam: {\n                type: this.props.type\n            },\n            user: {  // 列表信息\n                pageNum: 1,  // 总页数\n                count: 1,    // 总条数\n                list: [],    // 数据数组\n                page: 1,     // 当前第几页\n            },\n            selectData: null\n        }\n    }\n    componentDidMount() {\n        this.getAllUser()\n    }\n    getAllUser = ({ page = this.state.user.page } = { page: this.state.user.page }) => {\n        this.setState({\n            listLoading: true\n        })\n        getRoomList({\n            ...this.state.searchParam,\n            page,\n            pagesize: 10\n        }).then(res => {\n            if (res.code == 200) {\n                let newState = {\n                    user: {\n                        list: res.data.list,\n                        page,\n                        count: res.data.count,\n                        pageNum: Math.ceil(res.data.count / 10)\n                    }\n                }\n                this.setState({\n                    user: newState.user\n                })\n            } else {\n                this.showToast({ type: 'error', content: `获取${this.typeName}列表失败` })\n            }\n        }).finally(() => {\n            this.setState({\n                listLoading: false,\n            })\n        })\n    }\n    getColumns = () => {\n        let columns = [{\n            title: 'ID',\n            dataIndex: 'id',\n            key: 'id',\n            width: '10%',\n        }, {\n            title: `${this.typeName}主题`,\n            dataIndex: 'title',\n            key: 'title',\n            width: '15%',\n        }, {\n            title: `${this.typeName}直播号`,\n            dataIndex: 'room',\n            key: 'room',\n            width: '15%',\n        }, {\n            title: '开始时间',\n            key: 'start_time_at',\n            width: '30%',\n            render: (record) => {\n                return <p>\n                    {dealTableTime(record.start_time_at)}\n                </p>\n            }\n        }, {\n            title: '结束时间',\n            key: 'end_time_at',\n            width: '30%',\n            render: (record) => {\n                return <p>\n                    {dealTableTime(record.end_time_at)}\n                </p>\n            }\n        }]\n        return columns\n    }\n    pageChange = (page) => {\n        this.getAllUser({ page })\n    }\n    addAction = () => {\n        if (!this.state.selectData) {\n            this.showToast(`请选择${this.typeName}`)\n        } else {\n            this.props.onAdd(this.state.selectData)\n            this.props.onCancel()\n        }\n\n    }\n    render() {\n        return (\n            <LargeModal\n                visible={this.props.visible}\n                title={`选择可推广的${this.typeName}`}\n                width={1000}\n                style={{ height: 540 }}\n                wrapClassName='newAddUser'\n                onCancel={() => {\n                    this.props.onCancel()\n                }}\n            >\n                <div>\n                    <RLTable\n                        loading={this.state.listLoading}\n                        dataSource={this.state.user.list}\n                        rowKey='id'\n                        columns={this.getColumns()}\n                        paginationInfo={{\n                            total: this.state.user.count,\n                            pageSize: 10,\n                            onChange: this.pageChange,\n                            current: this.state.user.page\n                        }}\n                        scroll={{ y: 265 }}\n                        rowSelection={{\n                            type: 'radio',\n                            onChange: (selectedRowKeys, selectedRows) => {\n                                this.setState({\n                                    selectData: selectedRows[0]\n                                })\n                            }\n                        }}\n                        rowClassName='rl-table-click-row'\n                    />\n                    <div className='btn-container' style={{\n                        display: 'flex',\n                        justifyContent: 'center',\n                        width: '100%',\n                        position: 'absolute',\n                        bottom: 30\n                    }}>\n                        <RLButton label='取消' type='default' height={28}\n                            style={{ marginRight: 20 }}\n                            onClick={() => {\n                                this.props.onCancel()\n                            }}\n                        />\n                        <RLButton\n                            label='确定'\n                            type='primary'\n                            height={28}\n                            onClick={this.addAction}\n                        />\n                    </div>\n                </div>\n            </LargeModal>\n        )\n    }\n}\nexport default AddRoom","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/system/AdManagement/components/SystemUpload.js",["1055"],"import BaseCmp from '@components/BaseCmp.js'\nimport { Upload } from 'antd';\nimport ImgCrop from '@/pages/common/ImgCropper.js'\nimport { PlusOutlined } from '@ant-design/icons';\nimport commonActions from '@actions/commonActions.js'\n\nconst limtSize = 2 * 1024 * 1024;\nexport default class CmpUpload extends BaseCmp {\n    constructor(props) {\n        super(props);\n        this.limtSize = this.props.limtSize ? this.props.limtSize : limtSize\n        this.state = {\n            uploadFile: null,\n            imgUpdateIcon: null,\n            uploadFileUrl: '',\n        }\n    }\n    render() {\n        return (\n            // <ImgCrop\n            //     className=\"img-crop\"\n            //     modalTitle=\"裁剪图片\"\n            //     modalCancel=\"取消\"\n            //     modalOk=\"确定\"\n            //     minZoom={0.5}\n            //     maxZoom={3}\n            //     aspect={this.props.aspect}\n            // >\n            <>\n                <Upload\n                    accept={this.props.accept}\n                    listType=\"picture-card\"\n                    onRemove={(ele) => {\n                        this.props.remove && this.props.remove()\n                    }}\n                    showUploadList={{\n                        ...this.props.showUploadList\n                    }}\n                    fileList={this.props.picList}\n                    customRequest={(upload) => {\n                        if (upload.file.size > this.limtSize) {\n                            this.showToast({ type: 'error', content: '选择文件超过限制' })\n                            return false\n                        }\n                        let formData = new FormData();\n                        if (this.props.fileType === 'image') {\n                            if (upload.file.type.indexOf('image') === -1) {\n                                this.showToast({ type: 'error', content: '只能上传图片' })\n                                return false\n                            }\n                        }\n                        if (upload.file.type.indexOf('image') !== -1) {\n                            formData.append('type', 'picture')\n                        } else {\n                            formData.append('type', 'doc')\n                        }\n                        formData.append('resource', upload.file);\n                        commonActions.fileUpload(formData).then(res => {\n                            this.props.upload && this.props.upload(res)\n                        })\n                    }}\n                >\n                    {!this.props.picList.length && <div>\n                        <PlusOutlined />\n                    </div>}\n                </Upload>\n            </>\n            // </ImgCrop>\n        )\n    }\n}","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/ImgCropper.js",["1056","1057","1058","1059","1060","1061","1062"],"import React, { useState, useCallback, useMemo, useRef, forwardRef } from 'react';\nimport Cropper from 'react-cropper';\nimport LocaleReceiver from 'antd/es/locale-provider/LocaleReceiver';\nimport \"cropperjs/dist/cropper.css\";\nimport Modal from 'antd/es/modal';\nimport './ImgCropper.less';\nimport BaseCmp from '@components/BaseCmp.js'\n\nconst pkg = 'img-crop';\nconst MEDIA_CLASS = `${pkg}-media`;\nconst IMAGE_EXPRESSION = /(png|jpe?g)(\\?.*)?$/   // 上传图片格式\n\nlet cropper = null;\nexport default class ImgCropper extends BaseCmp {\n    constructor(props){\n        super(props);\n        this.state = {\n            image: null,\n            imgName: '',\n            cropper: null\n        };\n    }\n    renderUpload = () => {\n        const children = this.props.children;\n        const upload = Array.isArray(children) ? children[0] : children;\n        const { beforeUpload, accept, ...restUploadProps } = upload.props;\n    \n        return {\n          ...upload,\n          props: {\n            ...restUploadProps,\n            accept: accept || 'image/*',\n            beforeUpload: (file, fileList) =>\n              new Promise((resolve, reject) => {\n                if (!file.type.match(IMAGE_EXPRESSION)) {\n                    this.showToast('只能上传jpg/png')\n                    return\n                }\n\n                if(this.props.beforeCrop && !this.props.beforeCrop(file)){\n                    return;\n                }\n\n                const reader = new FileReader();\n                reader.addEventListener('load', () => {\n                    this.setState({\n                        image: reader.result,\n                        imgName: file.name\n                    });\n\n                    const img = new Image();\n                    img.src = reader.result;\n                    img.onload = function () {\n                        if(cropper){\n                            const canvasData = cropper.getCanvasData();\n                            console.log('--------natural width height------', this.width, this.height)\n                            console.log('------canvas data width height-----', canvasData.width, canvasData.height);\n\n                            if(canvasData.height > 400){\n                                // cropper.setCanvasData({left:0,right:0,width:552})\n                                const zoomVal =  400 / canvasData.height ;\n                                console.log('-------zoom pivot------', zoomVal);\n                                cropper.zoomTo(zoomVal);\n                            }\n                        }      \n                    };\n       \n                });\n                reader.readAsDataURL(file);\n              }),\n          },\n        };\n      }\n    \n    dataURLtoFile = (dataurl, filename) => { \n\t    let arr = dataurl.split(','),\n\t        mime = arr[0].match(/:(.*?);/)[1],\n\t        bstr = atob(arr[1]),\n\t        n = bstr.length,\n\t        u8arr = new Uint8Array(n);\n\t    while (n--) {\n\t        u8arr[n] = bstr.charCodeAt(n);\n\t    }\n\t    return new File([u8arr], filename, { type: mime });\n    }\n\n    onClose = () => {\n        // this.props.onClose();\n        this.setState({\n            image: null\n        })\n    }\n    download(file){\n\n        let link = document.createElement('a');\n        link.href = window.URL.createObjectURL(file);\n        link.style.display = 'none';\n        link.setAttribute('download', file.name);\n        document.body.appendChild(link);\n        link.click()\n      \n    }\n    onOk = async () => {\n\n        const children = this.props.children;\n        const upload = Array.isArray(children) ? children[0] : children;\n        const { customRequest } = upload.props;\n\n        this.onClose();\n        \n        // const cropper = this.state.cropper;\n\n        const imgUrl = cropper.getCroppedCanvas().toDataURL();\n\n        const imgFile = this.dataURLtoFile(imgUrl, this.state.imgName);\n\n        this.resize(imgFile,this.props.resizeWidth, this.props.resizeWidth, customRequest);\n    }\n    resize = (img, width, height, callback) => {\n        let image = new Image();\n        let canvas = document.createElement('canvas');\n        let context = canvas.getContext('2d');\n\n        image.onload = () => {\n            let img_w = image.naturalWidth; \n            let img_h = image.naturalHeight;\n\n            let dimg_w = img_w;\n            let dimg_h = img_h;\n\n            if(width && height){\n                dimg_w = width;\n                dimg_h = Math.ceil(dimg_w*img_h/img_w);\n\n                if(dimg_h>height){\n                    dimg_h = height;\n                    dimg_w = Math.ceil(dimg_h*img_w/img_h);\n                }\n            }\n\n            canvas.width = dimg_w;\n            canvas.height = dimg_h;\n            context.drawImage(image, 0, 0, dimg_w, dimg_h);\n\n            canvas.toBlob((blob)=> {\n                let names = img.name.split('.');\n                if(names.length === 0){\n                    names = [''];\n                }\n                names[names.length - 1] = '.jpeg';\n                let name = names.join('');\n                let file = new File([blob], name, {type:'image/jpeg'});\n                callback({file: file})\n            }, 'image/jpeg', 0.8)\n            \n        }\n        let reader = new FileReader();\n        reader.readAsDataURL(img);\n\n        reader.onload = function(e){\n            image.src = reader.result;\n        }\n    }\n    render(){\n        const {\n            image\n        } = this.state;\n        const {\n            title,\n            aspect\n        } = this.props;\n        return (\n        <>\n            {this.renderUpload()}\n            {image && (\n                <Modal\n                    visible={true}\n                    title={title || '图片裁剪'}\n                    wrapClassName={`${pkg}-modal`}\n                    onOk={this.onOk}\n                    onCancel={this.onClose}\n                    cancelText=\"取消\"\n                    okText=\"确定\"\n                    // maskClosable={false}\n                    destroyOnClose\n                >\n                    <Cropper\n                        style={{ width: 600, height:400 }}\n                        zoomTo={1}\n                        initialAspectRatio={ aspect || 1 }\n                        aspectRatio={ aspect || 1}\n                        src={image}\n                        viewMode={0}\n                        guides={true}\n                        minCropBoxHeight={ parseInt(100 * (aspect || 1)) }\n                        minCropBoxWidth={100}\n                        background={true}\n                        responsive={true}\n                        autoCropArea={0.95}\n                        checkOrientation={false}\n                        onInitialized={\n                            (instance) => {\n                            // this.setState({\n                            //     cropper: instance\n                            // });\n                            cropper = instance;\n                        }}\n                    />\n            </Modal>\n      )} \n        </>\n        )\n    }\n}","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/seminarManage/seminarManage/SeminarManage.js",["1063","1064"],"import BaseCmp from '@components/BaseCmp.js'\nimport { connect } from 'react-redux'\nimport MemberManage from '@/pages/common/meeting/MemberManage.js'\nimport LiveDetail from '@/pages/common/liveCom/LiveDetail.js'\nimport LiveCmpMeetingList from '@/pages/common/liveCom/LiveCmpMeetingList.js'\nimport CreateLive from '@/pages/common/liveCom/CreateLive.js'\nimport AddUser from '@/pages/common/meeting/AddUser.js'\nimport actionSeminar from '@actions/seminar/actionSeminar.js'\nimport actionMeeting from '@actions/meetingManage/actionMeeting.js'\nimport interfaces from '../../../api/interfaces.js'\nimport AddPhone from '@/pages/common/meeting/AddPhone.js'\nimport AddActivityUser from '@/pages/common/meeting/AddActivityUser.js'\nimport config from '@/config.js';\n\nclass SeminarManage extends BaseCmp {\n    constructor(props) {\n        super(props);\n        this.tabPanes = [\n            {\n                tab: '即将开始的直播',\n                id: 'upcomingLive',\n            },\n            {\n                tab: '已结束的直播',\n                id: 'endLive',\n            }\n        ]\n        this.state = {\n            showPage: 'list',     // 要现实的页面appoint：预约会议/detail：会议详情/list：会议列表\n            props,\n            isShowMemberManage: false,\n            isShowCreateMeeting: false,\n            isShowMeetingDetail: false,\n            addUser: false,\n            addUserConfig: {\n                showSelectGroup: true,\n                selectType: 'checkbox',\n                originArr: [],\n                originCanCancel: true,\n                returnStyle: 'object',\n                successFunName: ''\n            },\n            // 添加固话\n            addPhone: false,\n            addPhoneConfig: {\n                showSelectGroup: true,\n                selectType: 'checkbox',\n                originArr: [],\n                originCanCancel: true,\n                returnStyle: 'object',\n                successFunName: ''\n            },\n            // 导入报名用户\n            addActivityUser: false\n        };\n    }\n    closeMember = () => {\n        this.setState({\n            isShowMemberManage: false\n        })\n    }\n    closeCreat = () => {\n        this.setState({\n            isShowCreateMeeting: false\n        })\n    }\n    closeDetail = () => {\n        this.setState({\n            isShowMeetingDetail: false\n        })\n    }\n    changeMeetingMaster = (data) => {\n        this.createLive && this.createLive.setHost(data)\n    }\n    changePage = (page, props = {}) => {\n        if (page === 'memberManage') {\n            this.setState({\n                isShowMemberManage: true,\n                props\n            })\n            return\n        } else if (page === 'createMeeting') {\n            this.setState({\n                isShowCreateMeeting: true,\n                props\n            })\n            return\n        } else if (page === 'detail') {\n            this.setState({\n                isShowMeetingDetail: true,\n                props\n            })\n            return\n        } else if (page === 'edit') {\n            this.setState({\n                isShowCreateMeeting: true,\n                props\n            })\n            return\n        }\n        this.setState({\n            showPage: page,\n            props\n        })\n    }\n    addSuccess = (data) => {\n        if (this.state.addUserConfig.successFunName === 'changeMeetingMaster') {\n            this.changeMeetingMaster(data)\n        } else if (this.state.addUserConfig.successFunName === 'changeVisit') {\n            this.createLive && this.createLive.setVisitor(data)\n        } else if (this.state.addUserConfig.successFunName === 'listAddUser') {\n            let arr = [];\n            data.forEach(ele => {\n                arr.push(ele.id)\n            })\n            arr = arr.join(',')\n            actionMeeting.listInviteUser({\n                meeting_id: this.state.meetingId,\n                uids: arr,\n                type: 3\n            }).then(res => {\n                if (res.code == 200) {\n                    this.showToast({ type: 'success', content: '邀请成功' })\n                }\n            })\n        } else if (this.state.addUserConfig.successFunName === 'listAddNewUser') {\n            let arr = [];\n            data.forEach(ele => {\n                arr.push(ele.id)\n            })\n            arr = arr.join(',')\n            actionMeeting.listInviteUser({\n                meeting_id: this.state.meetingId,\n                uids: arr,\n                type: 2\n            }).then(res => {\n                if (res.code == 200) {\n                    this.showToast({ type: 'success', content: '邀请成功' })\n                } else {\n                    this.showToast({ type: 'error', content: res.msg });\n                }\n            })\n        } else if (this.state.addUserConfig.successFunName === 'changeGuest') {\n            this.createLive && this.createLive.setGuest(data)\n        }\n        this.setState({\n            addUserConfig: {}\n        })\n    }\n    addPhoneSuccess = (data) => {\n        if (this.state.addPhoneConfig.successFunName === 'changeVisit') {\n            this.createLive && this.createLive.setPhone(data)\n        }\n    }\n    addActUserSuccess = (data) => {\n        this.createLive && this.createLive.setActUser(data)\n    }\n    refeshAndhttp = () => {\n        this.cmpMeetingList.refesh()\n    }\n    listAddUser = (meetingId) => {\n        if (!interfaces.USER_LIST) {\n            this.showToast({ type: 'error', content: '您当前没有此权限' });\n            return\n        }\n        this.setState({\n            meetingId\n        })\n        actionSeminar.getLiveDetail({ meeting_id: meetingId }).then(res => {\n            if (res.code !== 200) {\n                this.showToast({ type: 'error', content: '获取会议详情失败' });\n                return\n            }\n            const data = res.data;\n            let userList = data.user_list.map(ele => {\n                return { ...ele }\n            })\n            this.setState({\n                addUser: true,\n                addUserConfig: {\n                    ...this.state.addUserConfig,\n                    showSelectGroup: true,\n                    selectType: 'checkbox',\n                    originArr: userList,\n                    originCanCancel: false,\n                    returnStyle: 'object',\n                    successFunName: 'listAddUser'\n                }\n            })\n        })\n    }\n    listAddNewUser = (meetingId) => {\n        if (!interfaces.USER_LIST) {\n            this.showToast({ type: 'error', content: '您当前没有此权限' });\n            return\n        }\n        this.setState({\n            meetingId\n        })\n        actionSeminar.getLiveDetail({ meeting_id: meetingId }).then(res => {\n            if (res.code !== 200) {\n                this.showToast({ type: 'error', content: '获取会议详情失败' });\n                return\n            }\n            const data = res.data;\n            let guestList = data.guest_list.map(ele => {\n                return { ...ele }\n            })\n            this.setState({\n                addUser: true,\n                addUserConfig: {\n                    ...this.state.addUserConfig,\n                    showSelectGroup: true,\n                    selectType: 'checkbox',\n                    originArr: guestList,\n                    originCanCancel: false,\n                    returnStyle: 'object',\n                    successFunName: 'listAddNewUser',\n                    mustIdent: true,\n                    maxNum: config.maxPersonNum\n                }\n            })\n        })\n    }\n    render() {\n        let showCmp;\n        let isDetail = undefined    //展示用户详情\n        let isMemberManage = undefined  //展示会控管理 \n        let isCreateMeeting = undefined   //展示创建会议\n        if (this.state.showPage === 'list') {\n            showCmp = <LiveCmpMeetingList\n                changePage={this.changePage}\n                {...this.state.props}\n                tabPanes={this.tabPanes}\n                tabKey={'upcomingLive'}\n                isMyLive={false}\n                onRef={e => this.cmpMeetingList = e}\n                listAddUser={(res) => {\n                    this.listAddUser(res);\n                }}\n                listAddNewUser={(res) => {\n                    this.listAddNewUser(res);\n                }}\n                listName={'allLive'}\n            />\n        }\n        isMemberManage = <MemberManage closeMember={this.closeMember} {...this.state.props} />\n        isCreateMeeting = <CreateLive\n            closeCreat={this.closeCreat}\n            onRef={e => this.createLive = e}\n            {...this.state.props}\n            addMaster={(res) => {\n                if (!interfaces.USER_LIST) {\n                    this.showToast({ type: 'error', content: '您当前没有此权限' });\n                    return\n                }\n                this.setState({\n                    addUser: true,\n                    addUserConfig: {\n                        ...this.state.addUserConfig,\n                        ...res\n                    }\n                })\n            }}\n            addPhone={(res) => {\n                if (!interfaces.PHONE_LIST) {\n                    this.showToast({ type: 'error', content: '您当前没有此权限' });\n                    return\n                }\n                this.setState({\n                    addPhone: true,\n                    addPhoneConfig: {\n                        ...this.state.addPhoneConfig,\n                        ...res\n                    }\n                })\n            }}\n            addActivityUser={(res) => {\n                if (!interfaces.EVENT_LIST) {\n                    this.showToast({ type: 'error', content: '您当前没有此权限' });\n                    return\n                }\n                this.setState({\n                    addActivityUser: true\n                })\n            }}\n            refeshAndhttp={this.refeshAndhttp}\n        />\n        isDetail = <LiveDetail closeDetail={this.closeDetail} {...this.state.props} />\n        return (\n            <div style={{ position: 'relative', width: '100%', height: '100%' }}>\n                {this.state.isShowMemberManage ? isMemberManage : null}\n                {this.state.isShowCreateMeeting ? isCreateMeeting : null}\n                {this.state.isShowMeetingDetail ? isDetail : null}\n                {showCmp}\n                {this.state.addUser ? <AddUser\n                    visible={true}\n                    showSelectGroup={this.state.addUserConfig.showSelectGroup}\n                    selectType={this.state.addUserConfig.selectType}\n                    originArr={this.state.addUserConfig.originArr}\n                    originCanCancel={this.state.addUserConfig.originCanCancel}\n                    returnStyle={this.state.addUserConfig.returnStyle}\n                    maxNum={this.state.addUserConfig.maxNum}\n                    mustIdent={this.state.addUserConfig.mustIdent}\n                    onCancel={() => {\n                        this.setState({\n                            addUser: false,\n                            addUserConfig: {}\n                        })\n                    }}\n                    onAdd={(data) => {\n                        console.log(data);\n                        console.log('直播回传数据')\n                        this.addSuccess(data)\n                    }}\n                /> : null}\n                {this.state.addPhone ? <AddPhone\n                    visible={true}\n                    showSelectGroup={this.state.addPhoneConfig.showSelectGroup}\n                    selectType={this.state.addPhoneConfig.selectType}\n                    originArr={this.state.addPhoneConfig.originArr}\n                    originCanCancel={this.state.addPhoneConfig.originCanCancel}\n                    returnStyle={this.state.addPhoneConfig.returnStyle}\n                    onCancel={() => {\n                        this.setState({\n                            addPhone: false\n                        })\n                    }}\n                    onAdd={(data) => {\n                        console.log(data);\n                        console.log('回传数据')\n                        this.addPhoneSuccess(data)\n                    }}\n                /> : null}\n                {this.state.addActivityUser ? <AddActivityUser\n                    visible={true}\n                    onCancel={() => {\n                        this.setState({\n                            addActivityUser: false\n                        })\n                    }}\n                    onAdd={(data) => {\n                        console.log(data);\n                        console.log('回传数据')\n                        this.addActUserSuccess(data)\n                    }}\n                /> : null}\n            </div>\n        )\n    }\n\n}\nexport default connect((store, props) => {\n    return {\n        ...props,\n    }\n})(SeminarManage)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/seminarManage/examineSeminarList/ExamineSeminarList.js",["1065"],"import BaseCmp from '@components/BaseCmp.js'\nimport { connect } from 'react-redux'\nimport MemberManage from '@/pages/common/meeting/MemberManage.js'\nimport LiveDetail from '@/pages/common/liveCom/LiveDetail.js'\nimport LiveCmpMeetingList from '@/pages/common/liveCom/LiveCmpMeetingList.js'\nimport CreateLive from '@/pages/common/liveCom/CreateLive.js'\nimport AddUser from '@/pages/common/meeting/AddUser.js'\nimport actionMeeting from '@actions/meetingManage/actionMeeting.js'\nimport ExamineDetail from '@/pages/common/meeting/ExamineDetail.js'\nimport interfaces from '../../../api/interfaces.js'\nimport AddPhone from '@/pages/common/meeting/AddPhone.js'\nimport AddActivityUser from '@/pages/common/meeting/AddActivityUser.js'\n\nclass ExamineSeminarList extends BaseCmp {\n    constructor(props) {\n        super(props);\n        this.tabPanes = [\n            {\n                tab: '待审核',\n                id: 'waitExamine',\n            },\n            {\n                tab: '全部已审核直播',\n                id: 'haveExamineAll',\n            },\n            {\n                tab: '我已审核',\n                id: 'haveExmineMe',\n            }, {\n                tab: '我发起的',\n                id: 'launchMe',\n            }\n        ]\n        this.state = {\n            showPage: 'list',     // 要现实的页面appoint：预约会议/detail：会议详情/list：会议列表\n            props,\n            isShowMemberManage: false,\n            isShowCreateMeeting: false,\n            isShowMeetingDetail: false,\n            isShowExamineDetail: false,\n            addUser: false,\n            addUserConfig: {\n                showSelectGroup: true,\n                selectType: 'checkbox',\n                originArr: [],\n                originCanCancel: true,\n                returnStyle: 'object',\n                successFunName: ''\n            },\n            // 添加固话\n            addPhone: false,\n            addPhoneConfig: {\n                showSelectGroup: true,\n                selectType: 'checkbox',\n                originArr: [],\n                originCanCancel: true,\n                returnStyle: 'object',\n                successFunName: ''\n            },\n            // 导入报名用户\n            addActivityUser: false\n        };\n    }\n    closeMember = () => {\n        this.setState({\n            isShowMemberManage: false\n        })\n    }\n    closeCreat = () => {\n        this.setState({\n            isShowCreateMeeting: false\n        })\n    }\n    closeDetail = () => {\n        this.setState({\n            isShowMeetingDetail: false\n        })\n    }\n    changeMeetingMaster = (data) => {\n        this.createLive && this.createLive.setHost(data)\n    }\n    changePage = (page, props = {}) => {\n        if (page === 'memberManage') {\n            this.setState({\n                isShowMemberManage: true,\n                props\n            })\n            return\n        } else if (page === 'createMeeting') {\n            this.setState({\n                isShowCreateMeeting: true,\n                props\n            })\n            return\n        } else if (page === 'detail') {\n            this.setState({\n                isShowMeetingDetail: true,\n                props\n            })\n            return\n        } else if (page === 'edit') {\n            this.setState({\n                isShowCreateMeeting: true,\n                props\n            })\n            return\n        } else if (page === 'examine') {\n            this.setState({\n                isShowCreateMeeting: true,\n                props\n            })\n            return\n        } else if (page === 'examineDetail') {\n            this.setState({\n                isShowExamineDetail: true,\n                props\n            })\n            return\n        }\n        this.setState({\n            showPage: page,\n            props\n        })\n    }\n    addSuccess = (data) => {\n        if (this.state.addUserConfig.successFunName === 'changeMeetingMaster') {\n            this.changeMeetingMaster(data)\n        } else if (this.state.addUserConfig.successFunName === 'changeVisit') {\n            this.createLive && this.createLive.setVisitor(data)\n        } else if (this.state.addUserConfig.successFunName === 'listAddUser') {\n            let arr = [];\n            data.forEach(ele => {\n                arr.push(ele.id)\n            })\n            arr = arr.join(',')\n            actionMeeting.listInviteUser({\n                meeting_id: this.state.meetingId,\n                uids: arr,\n                type: 3\n            }).then(res => {\n                if (res.code == 200) {\n                    this.showToast({ type: 'success', content: '邀请成功' })\n                }\n            })\n        } else if (this.state.addUserConfig.successFunName === 'changeGuest') {\n            this.createLive && this.createLive.setGuest(data)\n        }\n        this.setState({\n            addUserConfig: {}\n        })\n    }\n    addPhoneSuccess = (data) => {\n        if (this.state.addPhoneConfig.successFunName === 'changeVisit') {\n            this.createLive && this.createLive.setPhone(data)\n        }\n    }\n    addActUserSuccess = (data) => {\n        this.createLive && this.createLive.setActUser(data)\n    }\n    refeshAndhttp = () => {\n        this.cmpMeetingList.refesh()\n    }\n    listAddUser = (meetingId) => {\n        if (!interfaces.USER_LIST) {\n            this.showToast({ type: 'error', content: '您当前没有此权限' });\n            return\n        }\n        this.setState({\n            meetingId\n        })\n        actionMeeting.getMeetingDetail(meetingId).then(res => {\n            if (res.code !== 200) {\n                this.showToast({ type: 'error', content: '获取会议详情失败' });\n                return\n            }\n            const data = res.data;\n            let userList = data.user_list.map(ele => {\n                return { ...ele }\n            })\n            this.setState({\n                addUser: true,\n                addUserConfig: {\n                    ...this.state.addUserConfig,\n                    showSelectGroup: true,\n                    selectType: 'checkbox',\n                    originArr: userList,\n                    originCanCancel: false,\n                    returnStyle: 'object',\n                    successFunName: 'listAddUser'\n                }\n            })\n        })\n    }\n    render() {\n        let showCmp;\n        let isDetail = undefined    //展示用户详情\n        let isMemberManage = undefined  //展示会控管理 \n        let isCreateMeeting = undefined   //展示创建会议\n        if (this.state.showPage === 'list') {\n            showCmp = <LiveCmpMeetingList\n                changePage={this.changePage}\n                {...this.state.props}\n                tabPanes={this.tabPanes}\n                tabKey={'waitExamine'}\n                onRef={e => this.cmpMeetingList = e}\n                listAddUser={(res) => {\n                    this.listAddUser(res);\n                }}\n                listName={'examineLive'}\n            />\n        }\n        isMemberManage = <MemberManage closeMember={this.closeMember} {...this.state.props} />\n        isCreateMeeting = <CreateLive\n            closeCreat={this.closeCreat}\n            onRef={e => this.createLive = e}\n            {...this.state.props}\n            addMaster={(res) => {\n                if (!interfaces.USER_LIST) {\n                    this.showToast({ type: 'error', content: '您当前没有此权限' });\n                    return\n                }\n                this.setState({\n                    addUser: true,\n                    addUserConfig: {\n                        ...this.state.addUserConfig,\n                        ...res\n                    }\n                })\n            }}\n            addPhone={(res) => {\n                if (!interfaces.PHONE_LIST) {\n                    this.showToast({ type: 'error', content: '您当前没有此权限' });\n                    return\n                }\n                this.setState({\n                    addPhone: true,\n                    addPhoneConfig: {\n                        ...this.state.addPhoneConfig,\n                        ...res\n                    }\n                })\n            }}\n            addActivityUser={(res) => {\n                if (!interfaces.EVENT_LIST) {\n                    this.showToast({ type: 'error', content: '您当前没有此权限' });\n                    return\n                }\n                this.setState({\n                    addActivityUser: true\n                })\n            }}\n            refeshAndhttp={this.refeshAndhttp}\n        />\n        isDetail = <LiveDetail closeDetail={this.closeDetail} {...this.state.props} />\n        return (\n            <div style={{ position: 'relative', width: '100%', height: '100%' }}>\n                {this.state.isShowMemberManage ? isMemberManage : null}\n                {this.state.isShowCreateMeeting ? isCreateMeeting : null}\n                {this.state.isShowMeetingDetail ? isDetail : null}\n                {showCmp}\n                {this.state.addUser ? <AddUser\n                    visible={true}\n                    showSelectGroup={this.state.addUserConfig.showSelectGroup}\n                    selectType={this.state.addUserConfig.selectType}\n                    originArr={this.state.addUserConfig.originArr}\n                    originCanCancel={this.state.addUserConfig.originCanCancel}\n                    returnStyle={this.state.addUserConfig.returnStyle}\n                    maxNum={this.state.addUserConfig.maxNum}\n                    mustIdent={this.state.addUserConfig.mustIdent}\n                    onCancel={() => {\n                        this.setState({\n                            addUser: false,\n                            addUserConfig: {}\n                        })\n                    }}\n                    onAdd={(data) => {\n                        console.log(data);\n                        console.log('回传数据')\n                        this.addSuccess(data)\n                    }}\n                /> : null}\n                {this.state.addPhone ? <AddPhone\n                    visible={true}\n                    showSelectGroup={this.state.addPhoneConfig.showSelectGroup}\n                    selectType={this.state.addPhoneConfig.selectType}\n                    originArr={this.state.addPhoneConfig.originArr}\n                    originCanCancel={this.state.addPhoneConfig.originCanCancel}\n                    returnStyle={this.state.addPhoneConfig.returnStyle}\n                    onCancel={() => {\n                        this.setState({\n                            addPhone: false\n                        })\n                    }}\n                    onAdd={(data) => {\n                        console.log(data);\n                        console.log('回传数据')\n                        this.addPhoneSuccess(data)\n                    }}\n                /> : null}\n                {this.state.addActivityUser ? <AddActivityUser\n                    visible={true}\n                    onCancel={() => {\n                        this.setState({\n                            addActivityUser: false\n                        })\n                    }}\n                    onAdd={(data) => {\n                        console.log(data);\n                        console.log('回传数据')\n                        this.addActUserSuccess(data)\n                    }}\n                /> : null}\n                {this.state.isShowExamineDetail ? <ExamineDetail {...this.state.props}\n                    isLive={true}\n                    closeExamineDetail={() => {\n                        this.setState({\n                            isShowExamineDetail: false\n                        })\n                    }} /> : null}\n            </div>\n        )\n    }\n\n}\nexport default connect((store, props) => {\n    return {\n        ...props,\n    }\n})(ExamineSeminarList)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/seminarManage/mySeminar/MySeminar.js",["1066","1067"],"import BaseCmp from '@components/BaseCmp.js'\nimport { connect } from 'react-redux'\nimport MemberManage from '@/pages/common/meeting/MemberManage.js'\nimport LiveDetail from '@/pages/common/liveCom/LiveDetail.js'\nimport LiveCmpMeetingList from '@/pages/common/liveCom/LiveCmpMeetingList.js'\nimport CreateLive from '@/pages/common/liveCom/CreateLive.js'\nimport AddUser from '@/pages/common/meeting/AddUser.js'\nimport DocumentDetail from '@/components/document/DocumentDetail.js'\nimport actionSeminar from '@actions/seminar/actionSeminar.js'\nimport actionMeeting from '@actions/meetingManage/actionMeeting.js'\nimport interfaces from '../../../api/interfaces.js'\nimport AddPhone from '@/pages/common/meeting/AddPhone.js'\nimport AddActivityUser from '@/pages/common/meeting/AddActivityUser.js'\nimport config from '@/config.js';\n\nclass MySeminar extends BaseCmp {\n    constructor(props) {\n        super(props);\n        this.tabPanes = [\n            {\n                tab: '即将开始的直播',\n                id: 'upcomingLive',\n            },\n            {\n                tab: '已结束的直播',\n                id: 'endLive',\n            }\n        ]\n        this.state = {\n            showPage: 'list',     // 要现实的页面appoint：预约会议/detail：会议详情/list：会议列表\n            props,\n            isShowMemberManage: false,\n            isShowCreateMeeting: false,\n            isShowMeetingDetail: false,\n            isShowDocumentsDetail: false,\n            addUser: false,\n            tempRoom: undefined,\n            addUserConfig: {\n                showSelectGroup: true,\n                selectType: 'checkbox',\n                originArr: [],\n                originCanCancel: true,\n                returnStyle: 'object',\n                successFunName: ''\n            },\n            // 添加固话\n            addPhone: false,\n            addPhoneConfig: {\n                showSelectGroup: true,\n                selectType: 'checkbox',\n                originArr: [],\n                originCanCancel: true,\n                returnStyle: 'object',\n                successFunName: ''\n            },\n            // 导入报名用户\n            addActivityUser: false\n        };\n    }\n    closeMember = () => {\n        this.setState({\n            isShowMemberManage: false\n        })\n    }\n    closeCreat = () => {\n        this.setState({\n            isShowCreateMeeting: false\n        })\n    }\n    closeDetail = () => {\n        this.setState({\n            isShowMeetingDetail: false\n        })\n    }\n    changeMeetingMaster = (data) => {\n        this.CreateLive && this.CreateLive.setHost(data)\n    }\n    changePage = (page, props = {}) => {\n        if (page === 'memberManage') {\n            this.setState({\n                isShowMemberManage: true,\n                props\n            })\n            return\n        } else if (page === 'createMeeting') {\n            this.setState({\n                isShowCreateMeeting: true,\n                props\n            })\n            return\n        } else if (page === 'detail') {\n            this.setState({\n                isShowMeetingDetail: true,\n                props\n            })\n            return\n        } else if (page === 'edit') {\n            this.setState({\n                isShowCreateMeeting: true,\n                props\n            })\n            return\n        }\n        this.setState({\n            showPage: page,\n            props\n        })\n    }\n    addSuccess = (data) => {\n        if (this.state.addUserConfig.successFunName === 'changeMeetingMaster') {\n            this.changeMeetingMaster(data)\n        } else if (this.state.addUserConfig.successFunName === 'changeVisit') {\n            this.CreateLive && this.CreateLive.setVisitor(data)\n        } else if (this.state.addUserConfig.successFunName === 'listAddUser') {\n            let arr = [];\n            data.forEach(ele => {\n                arr.push(ele.id)\n            })\n            arr = arr.join(',')\n            actionMeeting.listInviteUser({\n                meeting_id: this.state.meetingId,\n                uids: arr,\n                type: 3\n            }).then(res => {\n                if (res.code == 200) {\n                    this.showToast({ type: 'success', content: '邀请成功' })\n                }\n            })\n        } else if (this.state.addUserConfig.successFunName === 'listAddNewUser') {\n            let arr = [];\n            data.forEach(ele => {\n                arr.push(ele.id)\n            })\n            arr = arr.join(',')\n            actionMeeting.listInviteUser({\n                meeting_id: this.state.meetingId,\n                uids: arr,\n                type: 2\n            }).then(res => {\n                if (res.code == 200) {\n                    this.showToast({ type: 'success', content: '邀请成功' })\n                } else {\n                    this.showToast({ type: 'error', content: res.msg });\n                }\n            })\n        } else if (this.state.addUserConfig.successFunName === 'changeGuest') {\n            this.CreateLive && this.CreateLive.setGuest(data)\n        }\n        this.setState({\n            addUserConfig: {}\n        })\n    }\n    addPhoneSuccess = (data) => {\n        if (this.state.addPhoneConfig.successFunName === 'changeVisit') {\n            this.CreateLive && this.CreateLive.setPhone(data)\n        }\n    }\n    addActUserSuccess = (data) => {\n        this.CreateLive && this.CreateLive.setActUser(data)\n    }\n    refeshAndhttp = () => {\n        this.cmpMeetingList.refesh()\n    }\n    listAddUser = (meetingId) => {\n        if (!interfaces.USER_LIST) {\n            this.showToast({ type: 'error', content: '您当前没有此权限' });\n            return\n        }\n        this.setState({\n            meetingId\n        })\n        actionSeminar.getLiveDetail({ meeting_id: meetingId }).then(res => {\n            if (res.code !== 200) {\n                this.showToast({ type: 'error', content: '获取会议详情失败' });\n                return\n            }\n            const data = res.data;\n            let userList = data.user_list.map(ele => {\n                return { ...ele }\n            })\n            this.setState({\n                addUser: true,\n                addUserConfig: {\n                    ...this.state.addUserConfig,\n                    showSelectGroup: true,\n                    selectType: 'checkbox',\n                    originArr: userList,\n                    originCanCancel: false,\n                    returnStyle: 'object',\n                    successFunName: 'listAddUser'\n                }\n            })\n        })\n    }\n    listAddNewUser = (meetingId) => {\n        if (!interfaces.USER_LIST) {\n            this.showToast({ type: 'error', content: '您当前没有此权限' });\n            return\n        }\n        this.setState({\n            meetingId\n        })\n        actionSeminar.getLiveDetail({ meeting_id: meetingId }).then(res => {\n            if (res.code !== 200) {\n                this.showToast({ type: 'error', content: '获取会议详情失败' });\n                return\n            }\n            const data = res.data;\n            let guestList = data.guest_list.map(ele => {\n                return { ...ele }\n            })\n            this.setState({\n                addUser: true,\n                addUserConfig: {\n                    ...this.state.addUserConfig,\n                    showSelectGroup: true,\n                    selectType: 'checkbox',\n                    originArr: guestList,\n                    originCanCancel: false,\n                    returnStyle: 'object',\n                    successFunName: 'listAddNewUser',\n                    mustIdent: true,\n                    maxNum: config.maxPersonNum,\n                }\n            })\n        })\n    }\n    showDoc = (res) => {\n        this.setState({\n            isShowDocumentsDetail: true,\n            tempRoom: res\n        })\n    }\n    render() {\n        let showCmp;\n        let isDetail = undefined    //展示用户详情\n        let isMemberManage = undefined  //展示会控管理 \n        let isCreateMeeting = undefined   //展示创建会议\n        if (this.state.showPage === 'list') {\n            showCmp = <LiveCmpMeetingList\n                changePage={this.changePage}\n                {...this.state.props}\n                tabPanes={this.tabPanes}\n                tabKey={'upcomingLive'}\n                isMyLive={true}\n                onRef={e => this.cmpMeetingList = e}\n                listAddUser={(res) => {\n                    this.listAddUser(res);\n                }}\n                listAddNewUser={(res) => {\n                    this.listAddNewUser(res);\n                }}\n                showDoc={this.showDoc}\n                listName={'myLive'}\n            />\n        }\n        isMemberManage = <MemberManage closeMember={this.closeMember} {...this.state.props} />\n        isCreateMeeting = <CreateLive\n            closeCreat={this.closeCreat}\n            onRef={e => this.CreateLive = e}\n            {...this.state.props}\n            addMaster={(res) => {\n                if (!interfaces.USER_LIST) {\n                    this.showToast({ type: 'error', content: '您当前没有此权限' });\n                    return\n                }\n                this.setState({\n                    addUser: true,\n                    addUserConfig: {\n                        ...this.state.addUserConfig,\n                        ...res\n                    }\n                })\n            }}\n            addPhone={(res) => {\n                if (!interfaces.PHONE_LIST) {\n                    this.showToast({ type: 'error', content: '您当前没有此权限' });\n                    return\n                }\n                this.setState({\n                    addPhone: true,\n                    addPhoneConfig: {\n                        ...this.state.addPhoneConfig,\n                        ...res\n                    }\n                })\n            }}\n            addActivityUser={(res) => {\n                if (!interfaces.EVENT_LIST) {\n                    this.showToast({ type: 'error', content: '您当前没有此权限' });\n                    return\n                }\n                this.setState({\n                    addActivityUser: true\n                })\n            }}\n            refeshAndhttp={this.refeshAndhttp}\n        />\n        isDetail = <LiveDetail closeDetail={this.closeDetail} {...this.state.props} />\n        return (\n            <div style={{ position: 'relative', width: '100%', height: '100%' }}>\n                {this.state.isShowMemberManage ? isMemberManage : null}\n                {this.state.isShowCreateMeeting ? isCreateMeeting : null}\n                {this.state.isShowMeetingDetail ? isDetail : null}\n                {this.state.isShowDocumentsDetail ?\n                    <DocumentDetail\n                        room={this.state.tempRoom}\n                        closeDoc={() => {\n                            this.setState({\n                                isShowDocumentsDetail: false,\n                                tempRoom: undefined\n                            })\n                        }}\n                    /> : null}\n                {showCmp}\n                {this.state.addUser ? <AddUser\n                    visible={true}\n                    showSelectGroup={this.state.addUserConfig.showSelectGroup}\n                    selectType={this.state.addUserConfig.selectType}\n                    originArr={this.state.addUserConfig.originArr}\n                    originCanCancel={this.state.addUserConfig.originCanCancel}\n                    returnStyle={this.state.addUserConfig.returnStyle}\n                    maxNum={this.state.addUserConfig.maxNum}\n                    mustIdent={this.state.addUserConfig.mustIdent}\n                    onCancel={() => {\n                        this.setState({\n                            addUser: false,\n                            addUserConfig: {}\n                        })\n                    }}\n                    onAdd={(data) => {\n                        console.log(data);\n                        console.log('直播回传数据')\n                        this.addSuccess(data)\n                    }}\n                /> : null}\n                {this.state.addPhone ? <AddPhone\n                    visible={true}\n                    showSelectGroup={this.state.addPhoneConfig.showSelectGroup}\n                    selectType={this.state.addPhoneConfig.selectType}\n                    originArr={this.state.addPhoneConfig.originArr}\n                    originCanCancel={this.state.addPhoneConfig.originCanCancel}\n                    returnStyle={this.state.addPhoneConfig.returnStyle}\n                    onCancel={() => {\n                        this.setState({\n                            addPhone: false\n                        })\n                    }}\n                    onAdd={(data) => {\n                        console.log(data);\n                        console.log('回传数据')\n                        this.addPhoneSuccess(data)\n                    }}\n                /> : null}\n                {this.state.addActivityUser ? <AddActivityUser\n                    visible={true}\n                    onCancel={() => {\n                        this.setState({\n                            addActivityUser: false\n                        })\n                    }}\n                    onAdd={(data) => {\n                        console.log(data);\n                        console.log('回传数据')\n                        this.addActUserSuccess(data)\n                    }}\n                /> : null}\n            </div>\n        )\n    }\n\n}\nexport default connect((store, props) => {\n    return {\n        ...props,\n    }\n})(MySeminar)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/myMeeting/personalMeeting/PersonalMeeting.js",["1068"],"import { createRef } from 'react';\nimport BaseCmp from '@components/BaseCmp.js'\nimport { connect } from 'react-redux';\n\n\nimport WindowContainer from '@components/WindowContainer.js'\n\nimport './PersonalMeeting.less'\nimport utils from '@/libs/utils.js'\nimport config from '@/config.js'\nimport { RLDisplayBoard, RLInput, RLButton, RLCheckbox } from '@components/index.js'\nimport actionPersonalMeeting from '../../../store/actions/myMeeting/actionPersonalMeeting.js';\n\nclass PersonalMeeting extends BaseCmp {\n    constructor(props) {\n        super(props);\n        this.state = {\n            personalMeeting: {\n                hasPwd: !!this.props.personalMeetingInfo.meeting_pwd,\n                ...this.props.personalMeetingInfo\n            },\n            saveLoading: false, // 保存loading\n            editStatus: false,   // 当前是否是编辑状态\n            reqParam: {\n                is_join: this.props.personalMeetingInfo.is_join,\n                meeting_number: this.props.personalMeetingInfo.meeting_number,\n                meeting_pwd: this.props.personalMeetingInfo.meeting_pwd,\n                hasPwd: !!this.props.personalMeetingInfo.meeting_pwd,\n            }\n        };\n        this.pwdInput = createRef();\n        this.getPersonalMeetingInfo()\n    }\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            personalMeeting: {\n                hasPwd: !!nextProps.personalMeetingInfo.meeting_pwd,\n                ...nextProps.personalMeetingInfo\n            },\n        })\n    }\n    onEnterMeeting = () => {\n        window.open(config.personalPullUpLink + '?q=' + this.props.personalHash)\n    }\n    getPersonalMeetingInfo = () => {\n        actionPersonalMeeting.getPersonalMeetingInfo()\n    }\n    pageTitle = () => {\n        return (\n            <div className=\"custom-page-title\">\n                <span>{this.props.userInfo.nickname}的个人会议室</span>\n                {\n                    !this.state.editStatus && <RLButton\n                        className=\"custom-page-title-btn\"\n                        type=\"primary\"\n                        onClick={this.onEnterMeeting}\n                        label='进入会议'\n                    />\n                }\n\n            </div>\n        )\n    }\n    saveFn = () => {\n        let { is_join, meeting_pwd, meeting_number, hasPwd } = this.state.reqParam\n        if (hasPwd && (!meeting_pwd || meeting_pwd.length < 4)) {\n            this.showToast({ type: 'warning', content: '请输入4位密码' })\n            return\n        }\n        this.setState({\n            saveLoading: true\n        })\n        actionPersonalMeeting.personalMeetingUpdate({ is_join, meeting_pwd, meeting_number }).then(res => {\n            if (res.code === 200) {\n                this.showToast({ type: 'success', content: '保存成功' })\n                this.getPersonalMeetingInfo()\n                this.setState({\n                    editStatus: false\n                })\n            } else {\n                this.showToast({ type: 'error', content: '保存失败' })\n            }\n        }).finally(() => {\n            this.setState({\n                saveLoading: false\n            })\n        })\n    }\n    toggleEditStatus = () => {\n        this.setState({\n            editStatus: !this.state.editStatus\n        })\n    }\n    render() {\n        let valueStyle = {\n            paddingLeft: 20,\n            display: 'flex',\n            flexDirection: 'row'\n        }\n        let labelStyle = { flex: 'none', width: 70, fontSize: 14, lineHeight: '20px', color: '#999', textAlign: 'left' }\n        let boardItems = [\n            {\n                list: [\n                    {\n                        label: '个人会议号',\n                        value: <div style={valueStyle}>\n                            <div>{this.showRoomNumber(this.state.personalMeeting.meeting_number)}</div>\n                            <img alt='' style={{ marginLeft: 10, height: 24, width: 24, cursor: 'pointer' }}\n                                src={require('../../../assets/images/copy.png').default} onClick={() => {\n                                    console.log(2345)\n                                    utils.copy(this.state.personalMeeting.meeting_number, () => {\n                                        this.showToast({ type: 'success', content: '会议号已复制到剪贴板' })\n                                    })\n\n                                }}\n                            ></img>\n                        </div>,\n                        labelStyle,\n                    }, {\n                        label: '会议链接',\n                        value: <div style={valueStyle}>\n                            <div className='link-word'\n                                onClick={() => {\n                                    window.open(config.personalPullUpLink + '?q=' + this.props.personalHash)\n                                }}\n                            >{config.personalPullUpLink + '?q=' + this.props.personalHash}</div>\n                            <img alt=''\n                                style={{ marginLeft: 10, height: 24, width: 24, cursor: 'pointer' }}\n                                src={require('../../../assets/images/copy.png').default}\n                                onClick={() => {\n                                    utils.copy(config.personalPullUpLink + '?q=' + this.props.personalHash, () => {\n                                        this.showToast({ type: 'success', content: '会议链接已复制到剪贴板' })\n                                    })\n                                }}\n                            />\n                        </div>,\n                        labelStyle,\n                    }, {\n                        label: '入会密码',\n                        value: this.state.editStatus ? <div style={{ ...valueStyle, alignItems: 'center', height: 30 }}>\n                            <RLCheckbox label='开启入会密码'\n                                defaultChecked={!!this.state.personalMeeting.meeting_pwd}\n                                onChange={(e) => {\n                                    // console.log(e.target.checked)\n                                    this.setState({\n                                        reqParam: {\n                                            ...this.state.reqParam,\n                                            hasPwd: !this.state.reqParam.hasPwd,\n                                            meeting_pwd: ''\n                                        }\n                                    }, () => {\n                                        if (this.state.reqParam.hasPwd) {\n                                            this.passwordInput.focus()\n                                        }\n                                    })\n                                }}\n                            />\n                            {\n                                this.state.reqParam.hasPwd && (<RLInput\n                                    ref={ref => this.passwordInput = ref}\n                                    placeholder='请输入4位密码'\n                                    maxLength={4}\n                                    value={this.state.reqParam.meeting_pwd}\n                                    onChange={(e) => {\n                                        let text = e.target.value\n                                        text = text.replace(/[^\\d]/g, '')\n                                        console.log(text)\n                                        if (text.length > 4) {\n                                            return\n                                        }\n                                        this.setState({\n                                            reqParam: {\n                                                ...this.state.reqParam,\n                                                meeting_pwd: text\n                                            }\n                                        })\n                                    }}\n                                />)\n                            }\n\n                        </div> : <div style={{ ...valueStyle, alignItems: 'center', height: 30 }}>\n                                <span>{this.state.personalMeeting.hasPwd ? this.state.personalMeeting.meeting_pwd : '无'}</span>\n                            </div>,\n                        labelStyle,\n                    }\n                ]\n            }, {\n                list: [\n                    {\n                        label: '会议设置',\n                        value: this.state.editStatus ? <div style={{ ...valueStyle, flexDirection: 'column', position: 'relative', flex: 1 }}>\n                            <RLCheckbox label='允许成员在主持人进会前加入会议'\n                                disabled={!this.state.editStatus}\n                                defaultChecked={!!this.state.reqParam.is_join}\n                                onChange={(e) => {\n                                    console.log(e.target.checked)\n                                    this.setState({\n                                        reqParam: {\n                                            ...this.state.reqParam,\n                                            is_join: e.target.checked ? 1 : 0,\n                                        }\n                                    })\n                                }}\n                            />\n                            <span style={{ lineHeight: '17px', fontSize: 12, color: this.themeColor, position: 'absolute', top: 30 }}>\n                                修改设置后，所有使用您个人会议号发起的会议都将同步修改</span>\n                        </div> : <div style={{ ...valueStyle, flexDirection: 'column', position: 'relative', flex: 1 }}>\n                                <span>{this.state.personalMeeting.is_join == 1 ? '允许成员在主持人进会前加入会议' : '不允许成员在主持人进会前加入会议'}</span>\n                            </div>,\n                        labelStyle,\n                    }\n                ]\n            }\n        ]\n        return (\n            <WindowContainer title={this.pageTitle} className='page-personalMeeting'\n                style={{ flex: 1 }}\n            >\n                <RLDisplayBoard style={{ width: '100%' }} items={boardItems} >\n                    {\n                        this.state.editStatus ? (\n                            <div className='btn-container'>\n                                <RLButton\n                                    label='取消'\n                                    type='default'\n                                    onClick={this.toggleEditStatus}\n                                    key='cancel'\n                                />\n                                <RLButton\n                                    label='保存'\n                                    type='primary'\n                                    style={{ marginLeft: 40 }}\n                                    loading={this.state.saveLoading}\n                                    onClick={this.saveFn}\n                                    key='save'\n                                />\n\n                            </div>\n                        ) : (\n                                <div className='btn-container'>\n                                    <RLButton label='编辑会议' type='default'\n                                        key='edit'\n                                        onClick={() => {\n                                            this.toggleEditStatus()\n                                            this.setState({\n                                                reqParam: {\n                                                    ...this.state.personalMeeting\n                                                }\n                                            })\n                                        }}\n                                    />\n                                </div>\n                            )\n                    }\n\n                </RLDisplayBoard>\n            </WindowContainer >\n\n        )\n    }\n\n}\nexport default connect((store, props) => {\n    return {\n        ...props,\n        userInfo: store.personalInfo.userInfo,\n        personalHash: store.personalInfo.personalHash,\n        personalMeetingInfo: store.personalMeeting.personalMeetingInfo\n        // nickname: store.storeUser.nickname,\n        // meetingNum: store.storeUser.meetingNum,\n        // meetingLink: store.storeUser.meetingLink\n    }\n})(PersonalMeeting)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/myMeeting/seminar/Seminar.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/myMeeting/meetingList/MeeingList.js",["1069"],"import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Route } from 'react-router-dom';\nimport MeetingDetail from '@/pages/common/meeting/MeetingDetail.js'\nimport Appointment from '@/pages/common/meeting/Appointment.js'\nimport CmpMeetingList from './component/CmpMeetingList.js'\nimport MemberManage from '@/pages/common/meeting/MemberManage.js'\n\n\n\nclass MeetingList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showPage: 'list',     // 要现实的页面appoint：预约会议/detail：会议详情/list：会议列表\n            props\n        };\n\n    }\n    changePage = (page, props = {}) => {\n        this.setState({\n            showPage: page,\n            props\n        })\n    }\n    render() {\n        let showCmp\n        if (this.state.showPage === 'list') {\n            showCmp = <CmpMeetingList\n                changePage={this.changePage}\n                {...this.state.props}\n            />\n        } else if (this.state.showPage === 'detail') {\n            showCmp = <MeetingDetail changePage={this.changePage} {...this.state.props} />\n        } else if (this.state.showPage === 'appoint') {\n            showCmp = <Appointment changePage={this.changePage} {...this.state.props} />\n        } else if (this.state.showPage === 'manage') {\n            showCmp = <MemberManage changePage={this.changePage} {...this.state.props} />\n        }\n        return (\n\n            <div style={{ flex: 1, display: 'flex', flexDirection: 'column' }}>\n                {showCmp}\n                {/* <Route exact\n                    key='/myMeeting/meetinglist/list'\n                    path=\"/myMeeting/meetinglist/list\"\n                    component={CmpMeetingList}\n                />\n                <Route exact\n                    key='/myMeeting/meetinglist/detail'\n                    path=\"/myMeeting/meetinglist/detail\"\n                    component={MeetingDetail}\n                />\n                <Route exact\n                    key='/myMeeting/meetinglist/appoint'\n                    path=\"/myMeeting/meetinglist/appoint\"\n                    component={Appointment}\n                />\n                <Route exact\n                    key='/myMeeting/meetinglist/manage'\n                    path=\"/myMeeting/meetinglist/manage\"\n                    component={MemberManage}\n                /> */}\n            </div>\n\n        )\n    }\n}\n\nexport default connect((store, props) => {\n    return {\n        ...props,\n        accountType: store.storeCommon.accountType\n    }\n})(MeetingList);","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/marketingTool/Questionnaire.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/marketingTool/EventRegistration.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/marketingTool/QAManage.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/AddActivityUser.js",["1070","1071","1072"],"import BaseCmp from '@components/BaseCmp.js'\nimport { RLFilterTool, LargeModal, RLButton, RLInput, RLSelect, RLTable, RLCheckbox } from '@components/index.js'\nimport { connect } from 'react-redux';\nimport actionMeeting from '@actions/meetingManage/actionMeeting.js';\nimport actionEvent from '@actions/marketingTool/actionEventRegistration.js';\nimport moment from 'moment';\nimport { Select } from 'antd';\n\nconst { Option } = Select;\n\nclass AddActivityUser extends BaseCmp {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            listLoading: false,\n            title: '',\n            activity: {  // 列表信息\n                pageNum: 1,  // 总叶数\n                count: 1,    // 总条数\n                list: [],    // 数据数组\n                page: 1,     // 当前第几页\n            },                                       //所有选择ID集合\n            selectKeys: [],                          //所有选择列表集合\n            originalUser: true,\n            authUser: true,\n        }\n    }\n    componentDidMount() {\n        this.getActivityList()\n    }\n\n    getLeftItems = () => {\n        return [\n            <RLCheckbox \n                label='认证用户'\n                checked={this.state.authUser}\n                onChange={(e)=>{\n                    this.setState({\n                        authUser: e.target.checked\n                    })\n                }}\n            />,\n            <RLCheckbox \n                label='普通用户'\n                checked={this.state.originalUser}\n                onChange={(e)=>{\n                    this.setState({\n                        originalUser: e.target.checked\n                    })\n                }}\n            />\n        ]\n    }\n    getRightItems = () => {\n        return (\n            [\n                <RLInput \n                    placeholder='请输入活动名称'\n                    value={this.state.title}\n                    onChange={(e)=>{\n                        this.setState({\n                            title: e.target.value\n                        })\n                    }}\n                    style={{ marginRight: 20 }}\n                />,\n                <RLButton\n                    label='搜索'\n                    type='primary'\n                    key={'search'}\n                    onClick={this.getActivityList}\n                    style={{ marginRight: 20 }}\n                />,\n                <RLButton\n                    label='重置'\n                    type='default'\n                    key={'reset'}\n                    onClick={this.reset}\n                    style={{ marginRight: 20 }}\n                />\n            ]\n        )\n    }\n    reset = () => {\n        this.setState({\n            title: ''\n        }, ()=> {\n            this.getActivityList();\n        })\n    }\n    getActivityList = ({ page = this.state.activity.page } = { page: this.state.activity.page }) => {\n        this.setState({\n            listLoading: true\n        })\n        actionEvent.getEventList({\n            title: this.state.title,\n            page,\n            page_size: 10\n        }).then(res => {\n            if (res.code === 200) {\n                let newState = {\n                    activity: {\n                        list: res.data.list,\n                        page,\n                        count: res.data.count,\n                        pageNum: Math.ceil(res.data.count / 10)\n                    }\n                }\n                this.setState({\n                    activity: newState.activity\n                })\n            }\n        }).finally(() => {\n            this.setState({\n                listLoading: false,\n            })\n        })\n    }\n\n    getColumns = () => {\n        let columns = [{\n            title: '活动主题',\n            dataIndex: 'title',\n            key: 'title',\n            width: '20%',\n        }, {\n            title: '报名人数',\n            dataIndex: 'current_num',\n            key: 'current_num',\n            width: '20%',\n            render: (text,record)=>{\n                return (\n                    record.user_limit === -1 ? <div>{record.current_num}</div> :\n                    <div>\n                        {record.current_num}/{record.user_limit}\n                    </div>\n                )\n            }\n        }, {\n            title: '活动状态',\n            dataIndex: 'status',\n            key: 'status',\n            width: '20%',\n            render: (text, record) => {\n                return (\n                    <div>\n                        <div style={{ width: 70 }}>{record.status === 1 ? '未开始' : (record.status === 2 ? '进行中' : (record.status === 3 ? '已结束' : '-'))}</div>\n                        {\n                            record.status === 2 && record.user_limit === record.current_num &&\n                            <div style={{ color: '#FF8921', fontSize: 14 }}>已报满</div>\n                        }\n                    </div>\n                )\n            }\n\n        },{\n            title: '创建时间',\n            dataIndex: 'create_at',\n            key: 'create_at',\n            width: '20%',\n            render: (text, record)=>{\n                return <div>{moment(record.create_at * 1000).format('YYYY-MM-DD HH:mm')}</div>\n            }\n        },\n         {\n            title: '创建者',\n            dataIndex: 'nickname',\n            key: 'nickname',\n            width: '30%',\n        }]\n        return columns\n    }\n\n    pageChange = (page) => {\n        this.getActivityList({ page })\n    }\n\n    addAction = () => {\n        let identity = 0;\n        if(this.state.authUser && !this.state.originalUser){\n            identity = 2;\n        }else if(!this.state.authUser && this.state.originalUser){\n            identity = 1;\n        }\n        actionEvent.getActionUser({\n            aid: this.state.selectKeys[0],\n            identity: identity\n        }).then(res => {\n            if (res.code === 200){\n                this.props.onAdd(res.data);\n            }else{\n                this.showToast({type:'error', content: res.msg});\n            }\n        })\n        this.props.onCancel();\n    }\n\n    render() {\n        return (\n            <LargeModal\n                visible={this.props.visible}\n                title='添加成员'\n                width={1000}\n                style={{ height: 580 }}\n                wrapClassName='newAddUser'\n                onCancel={() => {\n                    this.props.onCancel()\n                }}\n            >\n                <div>\n                    <RLFilterTool leftItems={this.getLeftItems} rightItems={this.getRightItems} />\n                    <RLTable\n                        loading={this.state.listLoading}\n                        dataSource={this.state.activity.list}\n                        rowKey='id'\n                        columns={this.getColumns()}\n                        paginationInfo={{\n                            total: this.state.activity.count,\n                            pageSize: 10,\n                            onChange: this.pageChange,\n                            current: this.state.activity.page\n                        }}\n                        scroll={{ y: 265 }}\n                        rowSelection={{\n                            type: 'radio',\n                            selectedRowKeys: this.state.selectKeys,\n                            onChange: (selectedRowKeys, selectedRows) => {\n                                console.log(`selectedRowKeys`, selectedRowKeys)\n                                this.setState({\n                                    selectKeys: selectedRowKeys\n                                })\n                            }\n                        }}\n                        rowClassName='rl-table-click-row'\n                    />\n                    <div className='btn-container' style={{\n                        display: 'flex',\n                        justifyContent: 'center'\n                    }}>\n                        <RLButton label='取消' type='default' height={28}\n                            style={{ marginRight: 20 }}\n                            onClick={() => {\n                                this.props.onCancel()\n                            }}\n                        />\n                        <RLButton\n                            label='添加'\n                            type='primary'\n                            height={28}\n                            onClick={this.addAction}\n                        />\n                    </div>\n                </div>\n            </LargeModal>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props\n    }\n})(AddActivityUser);","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/MemberManage.js",["1073","1074"],"\nimport BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport actionMemberManage from '@actions/common/actionMemberManage.js'\n\nimport {\n    RLTooltip,\n    RLButton,\n    RLTable,\n    RLDisplayBoard,\n    RLDropdown,\n    RLRenameModal,\n    RLCheckbox\n} from '@components/index.js'\nimport './MemberManage.less'\n\n\nclass MemberManage extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.urlParam = props\n        this.meetingId = this.urlParam.meetingId\n        this.pageType = this.urlParam.pageType\n        this.state = {\n            meetingInfo: {\n                room: '',\n                title: '',\n                nickname: ''\n            },\n            memberList: [],\n            duration: '',   // 已进行时间\n            showRenameModal: false,  // 改名模态框\n            renameUser: {},      // 要修改的用户对象：uid,meeting_id,nickname\n            listLoading: true,\n            openSelf: false,    // 全员静音是否允许自行开启\n\n        }\n        this.cameraOnImg = require('../../../assets/images/common/camera_on.png').default\n        this.cameraOffImg = require('../../../assets/images/common/camera_off.png').default\n        this.micOnImg = require('../../../assets/images/common/mic_on.png').default\n        this.micOffImg = require('../../../assets/images/common/mic_off.png').default\n        this.speakerOnImg = require('../../../assets/images/common/speaker_on.png').default\n        this.speakerOffImg = require('../../../assets/images/common/speaker_off.png').default\n        this.shareScreenImg = require('../../../assets/images/common/screen_share_on.png').default\n        this.getMemberList()\n    }\n    componentWillMount() {\n        // this.listTimer = setInterval(() => {\n        //     this.getMemberList()\n        // }, 30 * 1000)\n    }\n    componentWillUnmount() {\n        // clearInterval(this.listTimer)\n        // this.listTimer = null\n    }\n    getMemberList = () => {\n        let meeting_id = this.meetingId\n        this.setState({\n            listLoading: true\n        })\n        actionMemberManage.getMemberList(meeting_id).then(res => {\n            if (res.code === 200) {\n                let meetingInfo = res.data.info\n                let memberList = res.data.list\n                let duration = this.getDuration(meetingInfo.start_time)\n                this.setState({\n                    meetingInfo,\n                    memberList,\n                    duration\n                })\n            } else if (res.code === 451) {\n                this.showToast({ type: 'info', content: '会议已结束' })\n                this.props.closeMember('list', {\n                    tabKey: this.urlParam.tabKey\n                })\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        }).finally(() => {\n            this.setState({\n                listLoading: false,\n            })\n        })\n    }\n    getDuration = (startTime) => {\n        let start = new Date(startTime).getTime()\n        let end = new Date().getTime()\n        let allMinutes = parseInt((end - start) / 1000 / 60)\n        let minutes = allMinutes % 60\n        let hours = parseInt(allMinutes / 60)\n        return `${hours}小时${minutes}分钟`\n    }\n    pageTitle = () => {\n        return (\n            <div className=\"custom-page-title\">\n                <span>参会者管理</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.closeMember('list', {\n                            tabKey: this.urlParam.tabKey\n                        })\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n    getIdentify = (record) => {\n        let idArr = []\n        if (record.is_you === '1') {\n            idArr.push('我')\n        }\n        if (record.is_anchor === '1') {\n            idArr.push('主持人')\n        } else if (record.permission.includes('M')) {\n            idArr.push('联席主持人')\n        }\n        if (idArr.length) {\n            return <span style={{ color: '#999' }}>({idArr.join(',')})</span>\n        } else {\n            return null\n        }\n\n    }\n    getColumns = () => {\n        return [\n            {\n                title: '序号',\n                key: 'index',\n                width: '6%',\n                render: (text, record, index) => `${index + 1}`\n            }, {\n                title: '参会者昵称',\n                width: '10%',\n                key: 'nickname',\n                render: (text, record) => (\n                    <div style={{ display: 'flex', flexDirection: 'column' }}>\n                        <RLTooltip title={record.nickname}>\n                            <span className='line-clamp-2'>{record.nickname}</span>\n                        </RLTooltip>\n\n                        {this.getIdentify(record)}\n\n                    </div>\n                )\n            }, {\n                title: '设备/用户账号',\n                key: 'account',\n                width: '10%',\n                dataIndex: 'account',\n                render: (text, record) => {\n                    return <RLTooltip title={record.account}>\n                        <span className='line-clamp-2'>{record.account}</span>\n                    </RLTooltip>\n\n                }\n            },\n            {\n                title: '终端类型',\n                width: '9%',\n                dataIndex: 'device',\n                key: 'device'\n            }, {\n                title: '摄像头状态',\n                width: '10%',\n                key: 'camera',\n                render: (text, record) => (\n                    <div>\n                        <img\n                            alt=''\n                            src={Number(record.camera) === 1 ? this.cameraOnImg : this.cameraOffImg}\n                            style={{ width: 40, height: 40 }}\n                        />\n                    </div>\n                )\n            }, {\n                title: '麦克风状态',\n                width: '10%',\n                key: 'microphone',\n                render: (rext, record) => (\n                    <div>\n                        <img\n                            alt=''\n                            src={Number(record.microphone) === 1 ? this.micOnImg : this.micOffImg}\n                            style={{ width: 40, height: 40, cursor: 'pointer' }}\n                            onClick={() => {\n                                this.userOption({ type: 'mic', record })\n\n                            }}\n                        />\n                    </div>\n                )\n            },\n            {\n                title: '共享屏幕',\n                width: '10%',\n                key: 'share_screen',\n                render: (text, record) => (\n                    <div>\n                        {\n                            Number(record.share_screen) === 1 && (\n                                <img alt=''\n                                    src={this.shareScreenImg}\n                                    style={{ width: 40, height: 40 }}\n                                />\n                            )\n                        }\n\n                    </div>\n                )\n            }, {\n                title: '入会时间',\n                width: '10%',\n                dataIndex: 'add_time',\n                key: 'add_time',\n                render: (text, record) => {\n                    return <RLTooltip title={record.add_time}>\n                        <span className='line-clamp-2'>{record.add_time}</span>\n                    </RLTooltip>\n\n                }\n            }, {\n                title: '创建者',\n                width: '10%',\n                key: 'creator',\n                render: (text, record) => {\n                    return <RLTooltip title={this.state.meetingInfo.nickname}>\n                        <span className='line-clamp-2'>{this.state.meetingInfo.nickname}</span>\n                    </RLTooltip>\n\n                }\n            }, {\n                title: <span style={{ paddingLeft: 6 }}>操作</span>,\n                width: 216,\n                key: 'opt',\n                render: (text, record) => {\n                    return this.getOptionBtns(record)\n                }\n            }\n        ]\n    }\n    roomOption = ({ type, action }) => {\n        return this.roomOptionAction({ type, action, option: { openSelf: this.state.openSelf ? 1 : 0 } }).then(res => {\n            console.log('roomOption--res:', res)\n            if (res.code === 200) {\n                this.getMemberList()\n                if (type === 'lock') {\n                    if (action) {\n                        this.showToast('锁定后，新成员将无法加入')\n                    } else {\n                        this.showToast('锁定后，新成员将可以加入')\n                    }\n                }\n            } else {\n                this.showToast(res.msg)\n            }\n        })\n    }\n    /**\n     * @param {*} { type:操作类型, action:操作 }\n     */\n    roomOptionAction = ({ type, action, option = {} }) => {\n        return actionMemberManage.roomOption({ type, action, meeting_id: this.meetingId, option }).then(res => {\n            console.log('房间操作返回--res：', res)\n            return res\n        })\n    }\n    userOption = ({ type, record }) => {\n        this.userOptionAction({ type, record }).then(res => {\n            if (res.code === 200) {\n                if (type === 'relationmaster') {\n                    if (record.permission.includes('M')) {\n                        this.showToast(record.nickname + '已被取消联席主持人')\n                    } else {\n                        this.showToast(record.nickname + '已被设为联席主持人')\n                    }\n                }\n                this.getMemberList()\n            }\n        })\n    }\n    userOptionAction = ({ type, record }) => {\n        if (type === 'rename') {\n            console.log('userOption--改名操作')\n            this.toggleRenameModal(true, record)\n            return Promise.reject({})\n        } else if (type === 'mic') {\n            console.log('userOption--麦克风操作')\n            return actionMemberManage.userOption({\n                //'1'开启  '0'关闭\n                type, action: record.microphone === '0' ? '1' : '0',\n                meeting_id: this.meetingId, uid: record.uid\n            })\n        } else if (type === 'relationmaster') {\n            console.log('userOption--联席主持人操作')\n            return actionMemberManage.userOption({\n                //'0'联席主持人  '1'撤销\n                type, action: record.permission.includes('M') ? '0' : '1',\n                meeting_id: this.meetingId, uid: record.uid\n            })\n        } else if (type === 'master') {\n            console.log('userOption--主持人操作')\n            return Promise.reject({})\n        } else if (type === 'remove') {\n            console.log('userOption--移除会议室')\n            this.showModal({\n                title: <div>\n                    确定将\n                    <span style={{ color: this.themeColor }}>{record.nickname}</span>\n                    移出会议室吗?\n                </div>,\n                okText: '确定',\n                cancelText: '取消',\n                onOk: () => {\n                    return actionMemberManage.userOption({\n                        type,\n                        meeting_id: this.meetingId, uid: record.uid\n                    }).then(res => {\n                        if (res.code === 200) {\n                            this.getMemberList()\n                        }\n                    })\n                },\n                onCancel: () => { console.log('cancel in call') },\n                size: 'small'\n            })\n            return Promise.reject({})\n        } else if (type === 'camera') {\n            console.log('userOption--摄像头操作')\n            return Promise.reject({})\n        } else {\n            return Promise.reject({})\n        }\n    }\n    getOptionBtns = (record) => {\n        return this.getBtnsFromList(this.getBtnList(record), record)\n    }\n    getBtnList = (record) => {\n        let btns = [\n            {\n                label: '改名',\n                type: 'rename'\n            }, {\n                label: record.microphone == 1 ? '静音' : '解除静音',\n                type: 'mic'\n            }\n        ]\n        if (record.is_anchor != 1) {\n            btns.push({\n                label: record.permission.includes('M') ? '撤销联席主持人' : '设为联席主持人',\n                type: 'relationmaster'\n            }, {\n                label: '移出会议室',\n                type: 'remove'\n            })\n        }\n        return btns\n    }\n    // 获取列表右侧按钮组件\n    getBtnsFromList = (btns, record) => {\n        if (btns.length <= 3) {\n            return <div style={{ display: 'flex', flexDirection: 'row', minWidth: 216 }}>\n                {\n                    btns.map(({ label, type }) => {\n                        return <RLButton\n                            type='link'\n                            label={label}\n                            key={label}\n                            onClick={(e) => {\n                                this.userOption({ type, record })\n                                e.stopPropagation()\n                            }}\n                        />\n                    })\n                }\n            </div>\n        } else {\n            let btnList = []\n            let subList = []\n            for (let i = 0; i < btns.length; i++) {\n                if (i < 2) {\n                    btnList.push(\n                        (<RLButton\n                            type='link'\n                            label={btns[i].label}\n                            onClick={(e) => {\n                                this.userOption({ type: btns[i].type, record })\n                                e.stopPropagation()\n                            }}\n                        />)\n                    )\n                } else {\n                    subList.push(\n                        { label: btns[i].label, key: btns[i].type }\n                    )\n                }\n            }\n            btnList.push(\n                (<RLDropdown\n                    subBtns={subList}\n                    label='更多'\n                    key={new Date().getTime()}\n                    onClick={(e, key) => {\n                        console.log(e, key);\n                        if (!key) {\n                            return\n                        }\n                        this.userOption({ type: key, record })\n                        e.stopPropagation()\n                    }}\n                />)\n            )\n\n\n            return <div style={{ display: 'flex', flexDirection: 'row', minWidth: 216 }}>\n                {btnList}\n            </div>\n        }\n    }\n    // 全员静音\n    roomMute = () => {\n        this.setState({\n            openSelf: false\n        })\n        this.showModal({\n            title: '所有参会者都将被静音',\n            content: <div>\n                <RLCheckbox\n                    label='允许参会者自行解除静音'\n                    // checked={this.state.openSelf}\n                    onChange={(e) => {\n                        console.log(1234, e.target.checked)\n                        this.setState({\n                            openSelf: e.target.checked\n                        })\n                    }}\n                />\n            </div>,\n            okText: '全员静音',\n            cancelText: '取消',\n\n            onOk: () => {\n                // console.log('openSelfCheckbox', this.openSelfCheckbox)\n                return this.roomOption({ type: 'mute', action: true })\n            },\n            onCancel: () => { console.log('cancel in call') },\n            size: 'big'\n        })\n    }\n    toggleRenameModal = (show, record) => {\n        let _show, renameUser = {}\n        if (show !== undefined) {\n            _show = show\n\n        } else {\n            _show = !this.state.showRenameModal\n        }\n        if (show && record) {\n            renameUser = {\n                meeting_id: this.meetingId,\n                nickname: record.nickname,\n                uid: record.uid\n            }\n        }\n        this.setState({\n            showRenameModal: _show,\n            renameUser\n\n        })\n    }\n    render() {\n        return (\n            <div className=\"floatBox\">\n                <WindowContainer title={this.pageTitle} className='member-mamage-page'\n                >\n                    <RLDisplayBoard className='meeting-info-board'>\n                        <div className='meeting-title'>\n                            <span>{this.state.meetingInfo.title}</span>\n                        </div>\n                        <div className='meeting-info'>\n                            <div className='meeting-info-item'>\n                                <span className='item-label'>会议号：</span>\n                                <span className='item-value'>{this.state.meetingInfo.room}</span>\n                            </div>\n                        </div>\n                    </RLDisplayBoard>\n                    <div className='btn-container'>\n                        <RLButton label='刷新' type='default'\n                            onClick={() => {\n                                this.getMemberList()\n                            }}\n                        />\n                        <RLButton label='全员静音' type={this.state.meetingInfo.audiooff === '1' ? 'primary' : 'default'}\n                            onClick={() => {\n                                this.roomMute()\n                            }}\n                        />\n                        <RLButton label='取消静音' type='default'\n                            onClick={() => {\n                                this.roomOption({ type: 'mute', action: false })\n                            }}\n                        />\n                        <RLButton\n                            type={this.state.meetingInfo.lock === '1' ? 'primary' : 'default'}\n                            label={this.state.meetingInfo.lock === '1' ? '取消锁定' : '锁定会议'}\n                            onClick={() => {\n                                this.roomOption({ type: 'lock', action: this.state.meetingInfo.lock === '0' })\n                            }}\n                        />\n                    </div>\n                    <RLTable\n                        style={{ overflow: 'auto' }}\n                        dataSource={this.state.memberList}\n                        columns={this.getColumns()}\n                        loading={this.state.listLoading}\n                    />\n                    {\n                        this.state.showRenameModal && <RLRenameModal\n                            visible={this.state.showRenameModal}\n                            toggleRenameModal={this.toggleRenameModal}\n                            onRenameSuccess={() => {\n                                this.toggleRenameModal(false)\n                                this.getMemberList()\n                            }}\n                            onRenameError={() => { }}\n                            user={this.state.renameUser}\n                        />\n                    }\n\n                </WindowContainer>\n            </div>\n\n        )\n    }\n}\nexport default MemberManage","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/meetingManage/actionMeeting.js",["1075"],"import { getData } from '@/libs/utils.js'\nimport store from '@/store/index.js'\nimport interfaces from '@/api/interfaces.js'\nimport config from '@/config.js'\n\nconst actionMeetingList = {\n    /**\n     * @param {*} { room, order, meeting_status, nickname, page, pagesize }\n     * @return {*} \n     */\n    getMeetingList({ room, order, meeting_status, nickname, start_time, end_time, page, pagesize, isMyMeeting }) {\n        let url = '';\n        if (!isMyMeeting) {\n            url = interfaces.MEETING_ALLMEETINGLIST;\n        } else {\n            url = interfaces.MEETING_MYMEETINGLIST;\n        }\n\n        return getData({\n            method: 'get', url,\n            data: {\n                room, order, meeting_status, nickname, page, start_time, end_time, pagesize,\n            }\n        })\n    },\n    // 预约会议\n    appointMeeting(params) {\n        return getData({\n            method: 'POST',\n            url: interfaces.MEETING_CREATE,\n            data: params\n        })\n    },\n    //会议内用户列表信息获取接口\n    getUserMeeting(params) {\n        return getData({\n            method: 'get',\n            url: interfaces.MEETING_GETUSER,\n            data: params\n        })\n    },\n    // 编辑会议\n    updateMeeting(param) {\n        return getData({\n            method: 'POST',\n            url: interfaces.MEETING_EDIT,\n            data: param\n        })\n    },\n    // 获取会议详情\n    getMeetingDetail(meeting_id) {\n        return getData({\n            method: 'get',\n            url: interfaces.MEETING_DETAIL,\n            data: { meeting_id }\n        })\n    },\n    // 列表邀请参会者\n    listInviteUser(params) {\n        return getData({\n            method: 'post',\n            url: interfaces.MEETING_LISTINVITE,\n            data: params\n        })\n    },\n    /**\n     * 文档模块获取-会议列表\n     */\n    getDocumentsMeeting(params) {\n        return getData({\n            method: 'get',\n            url: interfaces.DOCUMENTS_MEETING,\n            data: params\n        })\n    },\n    /**\n     * 获取会议对应的文档列表\n     */\n    getDocumentsList(params) {\n        return getData({\n            method: 'get',\n            url: interfaces.DOCUMENTS_MEETING_LIST,\n            data: params\n        })\n    },\n    /**\n     * 修改文档权限\n     */\n    changeDocRight(params) {\n        return getData({\n            method: 'post',\n            url: interfaces.DOCUMENTS_CHANGE_RIGHTS,\n            data: params\n        })\n    },\n    /**\n     * 获取会议审核列表\n     */\n    getMeetingExamineList(params) {\n        return getData({\n            method: 'get',\n            url: interfaces.MEETING_EXAMINEMEETINGLIST,\n            data: params\n        })\n    },\n    /**\n     * 发送审核信息\n     */\n    examineMeeting(params) {\n        return getData({\n            method: 'post',\n            url: interfaces.MEETING_APPROVE,\n            data: params\n        })\n    },\n    /**\n     * 获取审核详情\n     */\n    getExmineDetail(params) {\n        return getData({\n            method: 'get',\n            url: interfaces.MEETING_EXMINE_DETAIL,\n            data: params\n        })\n    },\n    /**\n     * 结束会议（结束进行中的会议）\n     */\n    endMeeting(params) {\n        return getData({\n            method: 'get',\n            url: interfaces.MEETING_ENDMEETING,\n            data: params\n        })\n    },\n    /**\n     * 删除取消会议\n     */\n    deleteMeeting(params) {\n        return getData({\n            method: 'post',\n            url: interfaces.MEETING_CANCEL,\n            data: params\n        })\n    },\n\n\n\n\n\n\n\n    // 根据都好隔开的id字符串获取用户对象的数组\n    getUserObjList(idString) {\n        let idList = idString.split(',')\n\n        console.log(123, store.getState().userList.allUserInfo)\n        let allUser = store.getState().userList.allUserInfo.list\n\n        let resList = allUser.filter(user => {\n            return idList.includes(String(user.id))\n        })\n        return resList\n    },\n    getMeetingHash({ roomId, startTime, endTime, title, password, is_appointment }) {\n        return getData({\n            method: 'post', url: interfaces.MEETING_HASH,\n            data: {\n                fullurl: JSON.stringify({ roomId, startTime, endTime, title, password, is_appointment })\n            }\n        })\n    },\n\n    // 取消会议\n    cancelMeeting(meeting_id) {\n        return getData({\n            method: 'POST',\n            url: interfaces.MEETING_CANCEL,\n            data: { meeting_id }\n        })\n    },\n    // 删除会议\n    delMeeting(meeting_id, bid) {\n        return getData({\n            method: 'POST',\n            url: interfaces.MEETING_DELETE,\n            // meeting_id\n            data: { bid }\n        })\n    },\n    /**\n     *导出参会者列表\n     *\n     */\n    exportMemberList( ids) {\n        return getData({\n            method: 'GET',\n            url: interfaces.MEETING_EXPORTMEETINGUSER + '?meeting_id=' + ids,\n            // meeting_id\n            // data: { bid }\n            responseType: 'blob'\n        })\n        // window.open(config.requestHosts + interfaces.MEETING_EXPORTMEETINGUSER + '?meeting_id=' + meetingId)\n    },\n    /**\n     * \b导出会议列表\n    */\n    exportMeetingList(meetingId) {\n        return getData({\n            method: 'GET',\n            url: interfaces.MEETING_EXPORTMEETINGLIST + '?meeting_ids=' + meetingId,\n            // meeting_id\n            // data: { bid }\n            responseType: 'blob'\n        })\n        // window.open(config.requestHosts + interfaces.MEETING_EXPORTMEETINGLIST + '?ids=' + ids)\n    }\n}\nexport default actionMeetingList","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/AddUser.js",["1076","1077","1078","1079","1080","1081","1082","1083","1084","1085","1086","1087"],"\n/**\n * visible  控制组件显示隐藏\n * showSelectGroup   控制是否显示群组的筛选条件\n * selectType     勾选框类型   checkbox 多选   /  radio 单选\n * originArr    原数组  \n * originCanCancel  原数据是否可取消\n * returnStyle   点击添加返回的数据类型 'object'返回数据所有属性，'arr'返回id数组\n * onCancel   取消回调函数\n * onAdd     添加回调函数\n * maxNum   最大数量限制\n * mustIdent     是否必须是认证用户\n */\n\nimport BaseCmp from '@components/BaseCmp.js'\nimport { RLFilterTool, LargeModal, RLButton, RLInput, RLSelect, RLTable } from '@components/index.js'\nimport { connect } from 'react-redux';\nimport actionMeeting from '@actions/meetingManage/actionMeeting.js';\nimport actionGroupManage from '@actions/userManage/actionGroupManage.js'\nimport { Select } from 'antd';\n\nconst { Option } = Select;\n\nclass AddUser extends BaseCmp {\n    constructor(props) {\n        super(props)\n        console.log('重新渲染');\n        console.log(this.props.mustIdent);\n        let select = [];\n        let selectList = [];\n        let origin = props.originArr;\n        if (origin && origin.length > 0) {\n            if (typeof origin[0] === 'object') {\n                origin.forEach(ele => {\n                    select.push(ele.id)\n                    selectList.push(ele);\n                })\n            } else {\n                origin.forEach(ele => {\n                    select.push(ele.id);\n                })\n            }\n        }\n\n        this.state = {\n            listLoading: false,\n            group: [],\n            searchParam: {\n                group_uuid: null,\n                keyword: 'nickname',\n                value: '',\n                approval_type: this.props.mustIdent ? 'approval' : 'register'\n            },\n            user: {  // 列表信息\n                pageNum: 1,  // 总叶数\n                count: 1,    // 总条数\n                list: [],    // 数据数组\n                page: 1,     // 当前第几页\n            },\n            origin: this.props.originArr ? this.props.originArr : [],    //原数组\n            allSelect: [...select],                                              //所有选择ID集合\n            allSelectList: [...selectList],                                           //所有选择列表集合\n        }\n    }\n    componentDidMount() {\n        if (this.props.showSelectGroup) {\n            this.getAllGroup()\n        }\n        this.getAllUser()\n    }\n    getLeftItems = () => {\n        return [\n            this.props.showSelectGroup ? <Select\n                className=\"rl-select\"\n                showSearch\n                style={{ width: 120, marginLeft: 30, marginRight: 10 }}\n                placeholder='请选择群组'\n                filterOption={(input, option) =>\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                }\n                key={'selectGroup'}\n                value={this.state.searchParam.group_uuid}\n                onChange={e => {\n                    this.setState({\n                        searchParam: {\n                            ...this.state.searchParam,\n                            group_uuid: e\n                        }\n                    })\n                }}\n            >\n                {this.state.group.map(ele => {\n                    return <Option value={ele.uuid} key={ele.uuid} title={ele.title}>{ele.title}</Option>\n                })}\n            </Select> : null,\n            <div className=\"newSelectArea\" key={'input'}>\n                <RLSelect\n                    options={[{\n                        label: '姓名',\n                        value: 'nickname'\n                    }, {\n                        label: '手机号',\n                        value: 'mobile'\n                    }]}\n                    style={{ width: 120, marginLeft: 30, marginRight: 10 }}\n                    placeholder='请选择'\n                    value={this.state.searchParam.keyword}\n                    onChange={(e) => {\n                        this.setState({\n                            selectOption: e,\n                            searchParam: {\n                                ...this.state.searchParam,\n                                keyword: e\n                            }\n                        })\n                    }}\n                />\n                <RLInput\n                    placeholder='请输入内容'\n                    value={this.state.searchParam.value}\n                    onChange={(e) => {\n                        this.setState({\n                            searchParam: {\n                                ...this.state.searchParam,\n                                value: e.target.value\n                            }\n                        })\n                    }}\n                />\n            </div>\n        ]\n    }\n    getRightItems = () => {\n        return (\n            [\n                <RLButton\n                    label='搜索'\n                    type='primary'\n                    key={'search'}\n                    onClick={() => { this.getAllUser({ page: 1 }) }}\n                    style={{ marginRight: 20 }}\n                />,\n                <RLButton\n                    label='重置'\n                    type='default'\n                    key={'reset'}\n                    onClick={this.reset}\n                    style={{ marginRight: 20 }}\n                />\n            ]\n        )\n    }\n    reset = () => {\n        this.setState({\n            searchParam: {\n                ...this.state.searchParam,\n                group_uuid: null,\n                value: ''\n            }\n        })\n    }\n    getAllUser = ({ page = this.state.user.page } = { page: this.state.user.page }) => {\n        this.setState({\n            listLoading: true\n        })\n        actionMeeting.getUserMeeting({\n            ...this.state.searchParam, page,\n            pagesize: 10,\n            group_uuid: this.state.searchParam.group_uuid || ''\n        }).then(res => {\n            if (res.code == 200) {\n                let newState = {\n                    user: {\n                        list: res.data.list,\n                        page,\n                        count: res.data.count,\n                        pageNum: Math.ceil(res.data.count / 10)\n                    }\n                }\n                this.setState({\n                    user: newState.user\n                })\n            } else {\n                this.showToast({ type: 'error', content: '获取成员失败' })\n            }\n        }).finally(() => {\n            this.setState({\n                listLoading: false,\n            })\n        })\n    }\n    getAllGroup = () => {\n        actionGroupManage.getGroupUserList({ type: 'group' }).then(res => {\n            this.setState({\n                group: res.data\n            })\n        })\n    }\n    getColumns = () => {\n        let columns = [{\n            title: '姓名',\n            dataIndex: 'nickname',\n            key: 'nickname',\n            width: '10%',\n        }, {\n            title: '手机号',\n            dataIndex: 'mobile',\n            key: 'mobile',\n            width: '15%',\n        }, {\n            title: '邮箱',\n            dataIndex: 'email',\n            key: 'email',\n            width: '15%',\n        }, {\n            title: '机构名称',\n            dataIndex: 'company_name',\n            key: 'company_name',\n            width: '30%',\n        }]\n        return columns\n    }\n    pageChange = (page) => {\n        this.getAllUser({ page })\n    }\n    addAction = () => {\n        if (this.props.returnStyle === 'object') {\n            this.props.onAdd(this.state.allSelectList)\n        } else {\n            this.props.onAdd(this.state.allSelect)\n        }\n        this.props.onCancel()\n    }\n    selectRow = (record, e) => {\n        e.currentTarget.getElementsByClassName(\"ant-checkbox-wrapper\")[0].click()\n    }\n    render() {\n        return (\n            <LargeModal\n                visible={this.props.visible}\n                title='添加成员'\n                width={1000}\n                style={{ height: 580 }}\n                wrapClassName='newAddUser'\n                onCancel={() => {\n                    this.props.onCancel()\n                }}\n            >\n                <div>\n                    <RLFilterTool leftItems={this.getLeftItems} rightItems={this.getRightItems} />\n                    <RLTable\n                        loading={this.state.listLoading}\n                        dataSource={this.state.user.list}\n                        rowKey='id'\n                        columns={this.getColumns()}\n                        paginationInfo={{\n                            total: this.state.user.count,\n                            pageSize: 10,\n                            onChange: this.pageChange,\n                            current: this.state.user.page\n                        }}\n                        onRow={(record) => ({\n                            onClick: (e) => {\n                                this.selectRow(record, e);\n                            }\n                        })}\n                        scroll={{ y: 265 }}\n                        rowSelection={{\n                            type: this.props.selectType,\n                            selectedRowKeys: this.props.selectType === 'checkbox' ? this.state.allSelect : undefined,\n                            onChange: (selectedRowKeys, selectedRows) => {\n                                let i = 0;\n                                let currentPage = this.state.user.list;\n                                let allSelect = [...this.state.allSelect];\n                                let allSelectList = [...this.state.allSelectList];\n                                for (i; i < currentPage.length; i++) {\n                                    let isInSelect = selectedRowKeys.findIndex(ele => { return ele == currentPage[i].id })\n                                    let isInOrigin = allSelect.findIndex(ele => { return ele == currentPage[i].id })\n                                    let isInList = allSelectList.findIndex(ele => { return ele.id == currentPage[i].id })\n                                    if (isInSelect == -1 && isInOrigin !== -1) {\n                                        allSelect.splice(isInOrigin, 1);\n                                        if (this.props.returnStyle === 'object' && isInList !== -1) {\n                                            allSelectList.splice(isInList, 1);\n                                        }\n                                    } else if (isInSelect !== -1 && isInOrigin == -1) {\n                                        allSelect.push(selectedRowKeys[isInSelect]);\n                                        if (this.props.returnStyle === 'object' && isInList == -1) {\n                                            allSelectList.push(currentPage[i]);\n                                        }\n                                    }\n                                    if (this.props.maxNum) {\n                                        let num = Number(this.props.maxNum);\n                                        if (selectedRowKeys.length > num) {\n                                            this.showToast({ type: 'error', content: '已达最大人数限制' })\n                                            return\n                                        }\n                                        if (allSelect.length > num) {\n                                            this.showToast({ type: 'error', content: '已达最大人数限制' })\n                                            return\n                                        }\n                                    }\n                                    this.setState({\n                                        allSelect: [...allSelect],\n                                        allSelectList: [...allSelectList]\n                                    })\n                                }\n                            },\n                            getCheckboxProps: (record) => {\n                                if (!this.props.originCanCancel) {\n                                    if (this.state.origin.length > 0) {\n                                        let index = this.state.origin.findIndex(ele => {\n                                            return ele == record.id || (ele && ele.id == record.id)\n                                        })\n                                        if (index !== -1) {\n                                            return {\n                                                disabled: true\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }}\n                        rowClassName='rl-table-click-row'\n                    />\n                    <div className='btn-container' style={{\n                        display: 'flex',\n                        justifyContent: 'center'\n                    }}>\n                        <RLButton label='取消' type='default' height={28}\n                            style={{ marginRight: 20 }}\n                            onClick={() => {\n                                this.props.onCancel()\n                            }}\n                        />\n                        <RLButton\n                            label='添加'\n                            type='primary'\n                            height={28}\n                            onClick={this.addAction}\n                        />\n                    </div>\n                </div>\n            </LargeModal>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props\n    }\n})(AddUser);","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/seminar/actionSeminar.js",["1088","1089"],"import { getData } from '@/libs/utils.js'\nimport store from '@/store/index.js'\nimport interfaces from '@/api/interfaces.js'\nimport config from '@/config.js'\n\nconst actionSeminar = {\n    /**\n     * 获取所有直播的列表\n     */\n    getAllLiveList(param) {\n        return getData({\n            method: 'get',\n            url: interfaces.LIVE_ALLLIVELIST,\n            data: param\n        })\n    },\n    /**\n     * 获取直播详情\n     */\n    getLiveDetail(param) {\n        return getData({\n            method: 'get',\n            url: interfaces.LIVE_DETAIL,\n            data: param\n        })\n    },\n    /**\n     * 创建直播\n     */\n    createNewLive(param) {\n        return getData({\n            method: 'post',\n            url: interfaces.LIVE_CREATE,\n            data: param\n        })\n    },\n    /**\n     * 编辑直播\n     */\n    editNewLive(param) {\n        // mustmaster 是否允许在主持人之前入会 1 可以 0 不可以\n        param.mustmaster = 0\n        return getData({\n            method: 'post',\n            url: interfaces.LIVE_EDIT,\n            data: param\n        })\n    },\n    /**\n     * 审核直播\n     */\n    examineLive(param) {\n        // mustmaster 是否允许在主持人之前入会 1 可以 0 不可以\n        param.mustmaster = 0\n        return getData({\n            method: 'post',\n            url: interfaces.LIVE_EXAMINE,\n            data: param\n        })\n    },\n    /**\n     * 我的直播\n     */\n    myLiveList(param) {\n        return getData({\n            method: 'get',\n            url: interfaces.LIVE_MYLIVELIST,\n            data: param\n        })\n    },\n    /**\n     * 审核直播列表\n     */\n    examineLiveList(param) {\n        return getData({\n            method: 'get',\n            url: interfaces.LIVE_EXAMINELIVELIST,\n            data: param\n        })\n    },\n    /**\n     * 获取审核结果详情\n     */\n    getExamineResult(param) {\n        return getData({\n            method: 'get',\n            url: interfaces.LIVE_EXAMINE_DETAIL,\n            data: param\n        })\n    },\n    /**\n     * 删除/取消研讨会\n     */\n    seminarDelete(param) {\n        return getData({\n            method: 'post',\n            url: interfaces.SEMINAR_DELETE,\n            data: param\n        })\n    },\n    /**\n     * 结束研讨会\n     */\n    seminarClose(param) {\n        return getData({\n            method: 'post',\n            url: interfaces.SEMINAR_END,\n            data: param\n        })\n    },\n    /**\n     * 研讨会详情\n     */\n    seminarDetail(param) {\n        return getData({\n            method: 'get',\n            url: interfaces.SEMINAR_DETAIL,\n            data: param\n        })\n    },\n    /**\n     * 创建研讨会\n     */\n    seminarCreate(param) {\n        return getData({\n            method: 'post',\n            url: interfaces.SEMINAR_CREATE,\n            data: param\n        })\n    },\n    /**\n     * 编辑研讨会\n     */\n    seminarEdit(param) {\n        return getData({\n            method: 'post',\n            url: interfaces.SEMINAR_EDIT,\n            data: param\n        })\n    },\n    /**\n     * 研讨会发送邀请\n     */\n    seminarSend(param) {\n        return getData({\n            method: 'post',\n            url: interfaces.SEMINAR_SEND,\n            data: param\n        })\n    },\n    /**\n     * 保存研讨会邀请嘉宾列表\n     */\n    seminarInvite(param) {\n        return getData({\n            method: 'post',\n            url: interfaces.SEMINAR_INVITE,\n            data: param\n        })\n    },\n}\nexport default actionSeminar","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/AddPhone.js",["1090","1091","1092","1093","1094","1095","1096","1097","1098","1099","1100"],"\n/**\n * visible  控制组件显示隐藏\n * selectType     勾选框类型   checkbox 多选   /  radio 单选\n * originArr    原数组  \n * originCanCancel  原数据是否可取消\n * returnStyle   点击添加返回的数据类型 'object'返回数据所有属性，'arr'返回id数组\n * onCancel   取消回调函数\n * onAdd     添加回调函数\n * maxNum   最大数量限制\n */\n\nimport BaseCmp from '@components/BaseCmp.js'\nimport { RLFilterTool, LargeModal, RLButton, RLInput, RLSelect, RLTable } from '@components/index.js'\nimport { connect } from 'react-redux';\nimport actionPhoneList from '@actions/userManage/actionPhoneList.js'\nimport { Select } from 'antd';\nimport { dealTableTime } from '@/libs/utils.js'\n\nconst { Option } = Select;\n\nclass AddPhone extends BaseCmp {\n    constructor(props) {\n        super(props)\n        let select = [];\n        let selectList = [];\n        let origin = props.originArr;\n        if (origin && origin.length > 0) {\n            if (typeof origin[0] === 'object') {\n                origin.forEach(ele => {\n                    select.push(ele.id)\n                    selectList.push(ele);\n                })\n            } else {\n                origin.forEach(ele => {\n                    select.push(ele.id);\n                })\n            }\n        }\n\n        this.state = {\n            listLoading: false,\n            searchParam: {\n                value: ''\n            },\n            phoneListInfo: {  // 列表信息\n                pageNum: 1,  // 总叶数\n                count: 1,    // 总条数\n                list: [],    // 数据数组\n                page: 1,     // 当前第几页\n            },\n            origin: this.props.originArr ? this.props.originArr : [],    //原数组\n            allSelect: [...select],                                              //所有选择ID集合\n            allSelectList: [...selectList],                                           //所有选择列表集合\n        }\n    }\n    componentDidMount() {\n        this.getPhoneList()\n    }\n    getPhoneList = ({ page } = { page: this.state.phoneListInfo.page }) => {\n        this.setState({\n            listLoading: true\n        })\n        actionPhoneList.getPhoneList({\n            ...this.state.searchParam,\n            page,\n            page_size: 10\n        }).then(res => {\n            if (res.code === 200) {\n                if (res.date && res.data.list.length === 0 && page > 1) {\n                    this.getPhoneList({ page: page - 1 })\n                } else {\n                    let newState = {\n                        phoneListInfo: {\n                            list: res.data.list,\n                            page,\n                            count: res.data.count,\n                            pageNum: Math.ceil(res.data.count / this.pageSize)\n                        }\n                    }\n                    this.setState(newState)\n                }\n            }\n        }).finally(() => {\n            this.setState({\n                listLoading: false\n            })\n        })\n    }\n    getLeftItems = () => {\n        return [\n            <RLInput\n                placeholder='请输入固话'\n                value={this.state.searchParam.value}\n                onChange={e => {\n                    this.setState({\n                        searchParam: {\n                            ...this.state.searchParam,\n                            value: e.target.value\n                        }\n                    })\n                }}\n            />\n        ]\n    }\n    getRightItems = () => {\n        return (\n            [\n                <RLButton\n                    label='搜索'\n                    type='primary'\n                    key={'search'}\n                    onClick={() => {\n                        this.getPhoneList()\n                    }}\n                    style={{ marginRight: 20 }}\n                />,\n                <RLButton\n                    label='重置'\n                    type='default'\n                    key={'reset'}\n                    onClick={() => {\n                        this.setState({\n                            searchParam: {\n                                ...this.state.searchParam,\n                                value: ''\n                            }\n                        })\n                    }}\n                    style={{ marginRight: 20 }}\n                />\n            ]\n        )\n    }\n    getColumns = () => {\n        let columns = [{\n            title: '固话号码',\n            dataIndex: 'number',\n            key: 'number',\n            width: '30%',\n        }, {\n            title: '机构名称',\n            dataIndex: 'company',\n            key: 'company',\n            width: '40%',\n        }, {\n            title: '上传时间',\n            dataIndex: 'create_at',\n            key: 'create_at',\n            width: '30%',\n            render: (text, record) => {\n                return <div>\n                    {dealTableTime(record.create_at)}\n                </div>\n            }\n        }]\n        return columns\n    }\n    pageChange = (page) => {\n        this.getPhoneList({ page })\n    }\n    addAction = () => {\n        if (this.props.returnStyle === 'object') {\n            this.props.onAdd(this.state.allSelectList)\n        } else {\n            this.props.onAdd(this.state.allSelect)\n        }\n        this.props.onCancel()\n    }\n    render() {\n        const { list, count, page } = this.state.phoneListInfo\n        return (\n            <LargeModal\n                visible={this.props.visible}\n                title='添加固话'\n                width={1000}\n                style={{ height: 580 }}\n                wrapClassName='newAddUser'\n                onCancel={() => {\n                    this.props.onCancel()\n                }}\n            >\n                <div>\n                    <RLFilterTool leftItems={this.getLeftItems} rightItems={this.getRightItems} />\n                    <RLTable\n                        loading={this.state.listLoading}\n                        dataSource={list}\n                        rowKey='id'\n                        columns={this.getColumns()}\n                        paginationInfo={{\n                            total: count,\n                            pageSize: 10,\n                            onChange: this.pageChange,\n                            current: page\n                        }}\n                        scroll={{ y: 265 }}\n                        rowSelection={{\n                            type: this.props.selectType,\n                            selectedRowKeys: this.props.selectType === 'checkbox' ? this.state.allSelect : undefined,\n                            onChange: (selectedRowKeys, selectedRows) => {\n                                let i = 0;\n                                let currentPage = this.state.phoneListInfo.list;\n                                let allSelect = [...this.state.allSelect];\n                                let allSelectList = [...this.state.allSelectList];\n                                for (i; i < currentPage.length; i++) {\n                                    let isInSelect = selectedRowKeys.findIndex(ele => { return ele == currentPage[i].id })\n                                    let isInOrigin = allSelect.findIndex(ele => { return ele == currentPage[i].id })\n                                    let isInList = allSelectList.findIndex(ele => { return ele.id == currentPage[i].id })\n                                    if (isInSelect == -1 && isInOrigin !== -1) {\n                                        allSelect.splice(isInOrigin, 1);\n                                        if (this.props.returnStyle === 'object' && isInList !== -1) {\n                                            allSelectList.splice(isInList, 1);\n                                        }\n                                    } else if (isInSelect !== -1 && isInOrigin == -1) {\n                                        allSelect.push(selectedRowKeys[isInSelect]);\n                                        if (this.props.returnStyle === 'object' && isInList == -1) {\n                                            allSelectList.push(currentPage[i]);\n                                        }\n                                    }\n                                    if (this.props.maxNum) {\n                                        let num = Number(this.props.maxNum);\n                                        if (selectedRowKeys.length > num) {\n                                            this.showToast({ type: 'error', content: '已达最大人数限制' })\n                                            return\n                                        }\n                                        if (allSelect.length > num) {\n                                            this.showToast({ type: 'error', content: '已达最大人数限制' })\n                                            return\n                                        }\n                                    }\n                                    this.setState({\n                                        allSelect: [...allSelect],\n                                        allSelectList: [...allSelectList]\n                                    })\n                                }\n                            },\n                            getCheckboxProps: (record) => {\n                                if (!this.props.originCanCancel) {\n                                    if (this.state.origin.length > 0) {\n                                        let index = this.state.origin.findIndex(ele => {\n                                            return ele === record.id || (ele && ele.id === record.id)\n                                        })\n                                        if (index !== -1) {\n                                            return {\n                                                disabled: true\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }}\n                        rowClassName='rl-table-click-row'\n                    />\n                    <div className='btn-container' style={{\n                        display: 'flex',\n                        justifyContent: 'center'\n                    }}>\n                        <RLButton label='取消' type='default' height={28}\n                            style={{ marginRight: 20 }}\n                            onClick={() => {\n                                this.props.onCancel()\n                            }}\n                        />\n                        <RLButton\n                            label='添加'\n                            type='primary'\n                            height={28}\n                            onClick={this.addAction}\n                        />\n                    </div>\n                </div>\n            </LargeModal>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props\n    }\n})(AddPhone)\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/liveCom/CreateLive.js",["1101","1102","1103","1104","1105","1106","1107","1108","1109","1110","1111","1112","1113","1114","1115","1116","1117"],"import React from 'react';\n\nimport { connect } from 'react-redux'\nimport {\n    RLInput,\n    RLButton,\n    RLForm,\n    RLFormItem,\n    RLDatePicker,\n    RLCheckbox,\n    RLTag,\n    RLDisplayBoard,\n    RLRadioGroup,\n    RLTextarea\n} from '@components/index.js'\nimport RLdocument from '@components/document/RLDocument.js'\nimport '../meeting/Appointment.less'\nimport WindowContainer from '@components/WindowContainer.js'\nimport actionSeminar from '@actions/seminar/actionSeminar.js'\nimport commonActions from '@actions/commonActions.js'\nimport moment from 'moment'\nimport BaseCmp from '@components/BaseCmp.js'\nimport locale from 'antd/es/date-picker/locale/zh_CN';\nimport commonLocale from 'antd/lib/locale/zh_CN'\nimport config from '@/config.js';\nimport { Upload, ConfigProvider } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { dealSearchTime, dealTableTime, getFileTile } from '@/libs/utils'\n// import ImgCrop from '@/pages/common/CmpImageCropper.js';\nimport Uploader from '@/libs/Uploader.js';\nimport ImgCrop from '@/pages/common/ImgCropper.js';\n\nconst limtSize = 2 * 1024 * 1024;\nclass CreateLive extends BaseCmp {\n    constructor(props) {\n        super(props);\n        this.urlParam = props\n        this.meetingId = this.urlParam.meetingId;\n        this.isExamine = this.urlParam.isExamine;\n        this.state = {\n            appointParam: {\n            },\n            masterValue: '',\n            userGroup: [],\n            phoneList: [],   // 固话名单\n            guestGroup: [],\n            disclaimer: false,\n            inviteUserModal: false,   // 显示邀请模态框\n            pageTitle: '',\n            submitLoading: false, // 提交按钮正在loading\n            editStart: '',\n            editEnd: '',\n            picList: [],    //直播封面列表\n            fileList: [],\n            showUpDoc: false\n        };\n        this.count = 100001\n        this.appointForm = React.createRef();\n    }\n\n    componentWillMount() {\n        let appointParam\n        if (this.meetingId) {  // 编辑直播\n            if (this.isExamine) {\n                this.setState({\n                    pageTitle: '审核直播'\n                })\n            } else {\n                this.setState({\n                    pageTitle: '编辑直播'\n                })\n            }\n            this.getMeetingDetail(this.meetingId)\n        } else {\n            let sMoment = this.getStartDate()\n            let eMoment = this.getEndDate(sMoment)\n            let start_date = moment(sMoment)\n            let start_time = moment(sMoment)\n            let end_date = moment(eMoment)\n            let end_time = moment(eMoment)\n            appointParam = {\n                user_list: '',\n                guest_list: '',\n                image: '',\n                title: '', // 直播主题\n                start_time_at: '',\n                end_time_at: '',\n                max_user_limit: 50,\n                meeting_type: 1,\n                password: '',\n                description: '',\n                participants_description: '',\n                host: '',\n                popularize: 1,\n                material: '',\n                start_date,\n                start_time,\n                end_date,\n                end_time\n            }\n            this.setState({\n                appointParam,\n                pageTitle: '创建直播'\n            }, () => {\n                this.appointForm.current.setFieldsValue(appointParam)\n            })\n        }\n    }\n    componentDidMount() {\n        this.props.onRef(this)\n    }\n    getMeetingDetail = (meetingId) => {\n        actionSeminar.getLiveDetail({ meeting_id: meetingId }).then(res => {\n            if (res.code !== 200) {\n                this.showToast({ type: 'error', content: '获取直播详情失败' })\n            } else {\n                console.log('直播详情：', res)\n                if (res.data.meeting.status == 1) {\n                    this.showToast('直播正在进行中');\n                    this.props.closeCreat();\n                    this.props.refeshAndhttp();\n                    return\n                } else if (res.data.meeting.status === 3) {\n                    this.showToast('直播已结束')\n                    this.props.closeCreat();\n                    this.props.refeshAndhttp();\n                    return\n                }\n                let {\n                    meeting_id,\n                    title,\n                    end_time_at,\n                    start_time_at,\n                    password,\n                    max_user_limit,\n                    meeting_type,\n                    popularize,\n                    material,\n                    description,\n                    participants_description,\n                    image\n                } = res.data.meeting;\n\n                let userGroup = res.data.user_list.map(user => {\n                    return { id: Number(user.uid), ...user }\n                })\n                let phoneList = res.data.phone_list\n                let picList = image ? [{ url: image }] : [];\n                let guestGroup = res.data.guest_list.map(user => {\n                    return { id: Number(user.uid), ...user }\n                })\n                let editStart = dealTableTime(start_time_at);\n                let editEnd = dealTableTime(end_time_at);\n                let host = res.data.host.uid;\n                let masterValue = res.data.host.nickname;\n                let fileList = res.data.doc_list.map(i => {\n                    return {\n                        id: i.id,\n                        title: i.title + '.' + i.suffix,\n                        doc_url: i.url,\n                        lid: i.id,\n                        size: '',\n                        is_me: i.is_me\n                    }\n                })\n                if (this.isExamine) {\n                    this.setState({\n                        userGroup,\n                        phoneList,\n                        editStart,\n                        editEnd,\n                        masterValue,\n                        picList,\n                        guestGroup,\n                        fileList,\n                        appointParam: {\n                            image,\n                            meeting_id,\n                            title,\n                            end_time_at,\n                            start_time_at,\n                            password,\n                            max_user_limit,\n                            meeting_type,\n                            popularize,\n                            material,\n                            description,\n                            participants_description,\n                            user_list: '',\n                            host,\n                            aud_desc: '',\n                            auditing: 1\n                        }\n                    }, () => {\n                        this.appointForm.current.setFieldsValue(this.state.appointParam)\n                    })\n                } else {\n                    this.setState({\n                        userGroup,\n                        phoneList,\n                        editStart,\n                        editEnd,\n                        masterValue,\n                        picList,\n                        guestGroup,\n                        fileList,\n                        appointParam: {\n                            image,\n                            meeting_id,\n                            title,\n                            end_time_at,\n                            start_time_at,\n                            password,\n                            max_user_limit,\n                            meeting_type,\n                            popularize,\n                            material,\n                            description,\n                            participants_description,\n                            user_list: '',\n                            host\n                        }\n                    }, () => {\n                        this.appointForm.current.setFieldsValue(this.state.appointParam)\n                    })\n                }\n\n            }\n        })\n    }\n    // 生成开始时间\n    getStartDate = () => {\n        let sMoment = moment().seconds(0)\n        let minute = sMoment.minute()\n        minute = (parseInt(minute / 15) + 1) * 15\n\n        sMoment.set('minute', minute)\n        console.log(22, sMoment.format())\n        return sMoment\n    }\n    // 根据开始时间生成下一个整1小时\n    getEndDate = (sMoment) => {\n        let eMoment = moment(sMoment)\n        let duration = 45\n        // if (this.props.userInfo.target_type[0] && this.props.userInfo.target_type[0].target_type === 'basicset') {\n        //   duration = 45\n        // }\n        let minute = eMoment.minute() + duration\n        eMoment.set('minute', minute)\n        return eMoment\n    }\n    addConfirm = (users) => {\n        console.log(users)\n        this.setState({\n            appointParam: {\n                ...this.state.appointParam,\n                userlist: users\n            }\n        })\n    }\n    startDateChange = (m) => {\n        let start_date = m;\n        let start_time = moment(start_date.format('YYYY-MM-DD') + ' ' + this.appointForm.current.getFieldValue('start_time').format('HH:mm'))\n        let end_date = this.getEndDate(start_time)\n        let end_time = this.getEndDate(start_time)\n        this.appointForm.current.setFieldsValue({ end_date, end_time })\n        this.appointForm.current.validateFields(['start_time'])\n    }\n    startTimeChange = (m) => {\n        let start_time = m;\n        start_time = moment(this.appointForm.current.getFieldValue('start_date').format('YYYY-MM-DD') + ' ' + start_time.format('HH:mm'))\n        console.log('astart_time:', start_time)\n        let end_date = this.getEndDate(start_time)\n        let end_time = this.getEndDate(start_time)\n        this.appointForm.current.setFieldsValue({ end_date, end_time })\n        this.appointForm.current.validateFields(['start_date'])\n    }\n    startDisabledDate = (current) => {\n        return current && current < moment().startOf('day')  // .subtract(1, 'day');\n    }\n    endDisabledDate = (_current) => {\n        let startDate = moment(this.appointForm.current.getFieldValue('start_date')).format('YYYY-MM-DD')\n        let startDate2 = moment(startDate).add(2, 'days').format('YYYY-MM-DD')\n        let current = _current.format('YYYY-MM-DD')\n        return current &&\n            (\n                current < startDate\n                ||\n                current > startDate2\n            )\n    }\n    updateDate = (values) => {\n        if (!this.state.appointParam.image) {\n            if (this.isExamine && this.state.appointParam.auditing == 2) {\n                this.appointConfirm(values)\n            } else {\n                this.showModal({\n                    title: '您未上传直播封面，若不上传则使用默认图片',\n                    okText: '确定',\n                    cancelText: '取消',\n                    onOk: () => {\n                        this.appointConfirm(values)\n                    },\n                    onCancel: () => {\n\n                    },\n                    size: 'small'\n                })\n            }\n        } else {\n            this.appointConfirm(values)\n        }\n    }\n    appointFailed = (res) => {\n        this.showToast({ content: '您有必填项未填写', type: 'success' })\n    }\n    appointConfirm = (values) => {\n        let start_date, start_time, end_date, end_time;\n        if (!this.meetingId) {\n            start_date = values.start_date.format('YYYY-MM-DD')\n            start_time = values.start_time.format('HH:mm')\n            end_date = values.end_date.format('YYYY-MM-DD')\n            end_time = values.end_time.format('HH:mm')\n        }\n        let param = {};\n        let userStr = [];\n        let guestStr = [];\n        let phoneStr = [];\n        for (let key in this.state.appointParam) {\n            if (key !== 'end_date' && key !== 'end_time' && key !== 'start_date' && key !== 'start_time' && key !== 'end_time_at' && key !== 'start_time_at') {\n                param[key] = this.state.appointParam[key]\n            } else if (key === 'start_time_at') {\n                !this.meetingId && (param[key] = new Date(start_date + ' ' + start_time).getTime() / 1000);\n                this.meetingId && (param[key] = this.state.appointParam[key]);\n            } else if (key === 'end_time_at') {\n                !this.meetingId && (param[key] = new Date(end_date + ' ' + end_time).getTime() / 1000);\n                this.meetingId && (param[key] = this.state.appointParam[key]);\n            }\n        }\n        this.state.userGroup.forEach(ele => {\n            userStr.push(ele.id);\n        })\n        this.state.guestGroup.forEach(ele => {\n            guestStr.push(ele.id)\n        })\n        // 固话名单\n        this.state.phoneList.forEach(ele => {\n            phoneStr.push(ele.id);\n        })\n        param.phone_list = phoneStr.join(',')\n        param.user_list = userStr.join(',');\n        param.guest_list = guestStr.join(',');\n        param.doc_list = JSON.stringify(this.state.fileList)\n        this.setState({\n            submitLoading: true,\n            disclaimer: true\n        })\n        if (this.meetingId) {\n            param.meeting_id = this.meetingId;\n            if (this.isExamine) {\n                actionSeminar.examineLive(param).then(res => {\n                    if (res.code === 200) {\n                        this.props.closeCreat && this.props.closeCreat();\n                        this.props.refeshAndhttp && this.props.refeshAndhttp()\n                    } else {\n                        this.showToast({ content: res.msg, type: 'error' })\n                    }\n                }).finally(() => {\n                    this.setState({\n                        submitLoading: false,\n                        disclaimer: false\n                    })\n                })\n            } else {\n                actionSeminar.editNewLive(param).then(res => {\n                    if (res.code === 200) {\n                        this.showToast({ content: '编辑成功', type: 'success' });\n                        this.props.closeCreat && this.props.closeCreat();\n                        this.props.refeshAndhttp && this.props.refeshAndhttp();\n                    } else {\n                        this.showToast({ content: res.msg, type: 'error' })\n                    }\n                }).finally(() => {\n                    this.setState({\n                        submitLoading: false,\n                        disclaimer: false\n                    })\n                })\n            }\n        } else {\n            actionSeminar.createNewLive(param).then(res => {\n                if (res.code === 200) {\n                    this.showToast({ content: '创建成功', type: 'success' });\n                    this.props.closeCreat && this.props.closeCreat();\n                    this.props.refeshAndhttp && this.props.refeshAndhttp()\n                } else {\n                    this.showToast({ content: res.msg, type: 'error' })\n                }\n            }).finally(() => {\n                this.setState({\n                    submitLoading: false,\n                    disclaimer: false\n                })\n            })\n        }\n    }\n    /**\n     * 页面头部\n     */\n    pageTitle = () => {\n        return (\n            <div className=\"custom-page-title\">\n                <span>{this.state.pageTitle}</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.closeCreat()\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n    /**\n     * 创建表单的label\n     */\n    createLabel = (labelName, need, style = {}) => {\n        return <div>\n            {need ? <span style={{ color: '#ff4d4f' }}>*</span> : null}\n            <span style={{ ...style }}>{labelName}</span>\n        </div>\n    }\n    /**\n     * 添加主持人\n     */\n    addMaster = () => {\n        this.props.addMaster({\n            showSelectGroup: true,\n            selectType: 'radio',\n            originArr: [],\n            originCanCancel: true,\n            returnStyle: 'object',\n            successFunName: 'changeMeetingMaster',\n            mustIdent: true\n        })\n    }\n    setHost = (data) => {\n        this.setState({\n            masterValue: data[0].nickname,\n            appointParam: {\n                ...this.state.appointParam,\n                host: data[0].id\n            }\n        })\n    }\n    setVisitor = (data) => {\n        for (let i = 0; i < data.length; i++) {\n            let isInOrigin = this.state.userGroup.findIndex(ele => { return ele.id === data[i].id })\n            if (isInOrigin === -1) {\n                this.state.userGroup.push(data[i])\n            }\n        }\n        this.setState({\n            userGroup: this.state.userGroup\n        }, () => {\n            this.appointForm.current.validateFields(['user_list'])\n        })\n    }\n    setGuest = (data) => {\n        this.setState({\n            guestGroup: data\n        })\n    }\n    addUser = () => {\n        this.props.addMaster({\n            showSelectGroup: true,\n            selectType: 'checkbox',\n            originArr: this.state.userGroup,\n            originCanCancel: true,\n            returnStyle: 'object',\n            successFunName: 'changeVisit'\n        })\n    }\n    addPhone = () => {\n        this.props.addPhone({\n            showSelectGroup: true,\n            selectType: 'checkbox',\n            originArr: this.state.phoneList,\n            originCanCancel: true,\n            returnStyle: 'object',\n            successFunName: 'changeVisit'\n        })\n    }\n    setPhone = (data) => {\n        this.setState({\n            phoneList: data\n        }, () => {\n            this.appointForm.current.validateFields(['user_list'])\n        })\n    }\n    setActUser = (data) => {\n        for (let i = 0; i < data.length; i++) {\n            let isInOrigin = this.state.userGroup.findIndex(ele => { return ele.id === data[i].id })\n            if (isInOrigin === -1) {\n                this.state.userGroup.push(data[i])\n            }\n        }\n        this.setState({\n            userGroup: this.state.userGroup\n        }, () => {\n            this.appointForm.current.validateFields(['user_list'])\n        })\n    }\n    addGuest = () => {\n        this.props.addMaster({\n            showSelectGroup: true,\n            selectType: 'checkbox',\n            originArr: this.state.guestGroup,\n            originCanCancel: true,\n            returnStyle: 'object',\n            successFunName: 'changeGuest',\n            maxNum: config.maxPersonNum,\n            mustIdent: true\n        })\n    }\n    documentUpload = (upload) => {\n        let uploader = new Uploader({\n            file: upload.file,\n            method: 'POST',\n            baseURL: config.uploadBaseUrl,\n            url: '/api/playback/upload',\n            chunkSize: 2 * 1024 * 1024,   // 切片大小 2M\n            onStart: () => {\n                this.setState({\n                    showUpDoc: true\n                })\n            },\n            onSuccess: (res) => {\n                console.log('--------上传成功-------', res)\n                let fileList = [...this.state.fileList, {\n                    id: '',\n                    title: res.name,\n                    doc_url: res.url,\n                    lid: this.count,\n                    is_me: 1,\n                    upLoad: 1,\n                    size: ''\n                }]\n                this.count++\n                this.setState({\n                    fileList,\n                    showUpDoc: false\n                })\n            },\n            onError: () => {\n                console.log('--------上传失败-------')\n                this.showToast({ type: 'error', content: '上传文档失败' })\n                this.setState({\n                    showUpDoc: false\n                })\n            },\n            onProgress: (progress) => {\n                console.log('-------上传进度---------', progress)\n                // 进度条\n            },\n            onCancel: () => {\n                console.log('-------上传取消---------')\n                this.setState({\n                    showUpDoc: false\n                })\n            }\n        })\n        let dtype = 3\n        uploader.upload({\n            dtype,\n            dtranscode: false\n        })\n    }\n    docDelete = (id) => {\n        let fileList = this.state.fileList.filter(i => {\n            return (i.id !== id) && i.lid !== id\n        })\n        this.setState({\n            fileList\n        })\n    }\n    getUserListState = () => {\n        if (this.state.appointParam.meeting_type == 1) {\n            return false\n        } else {\n            if (this.isExamine) {\n                if (this.state.appointParam.auditing == 2) {\n                    return false\n                } else {\n                    return true\n                }\n            } else {\n                return true\n            }\n        }\n    }\n    render() {\n        return (\n            <div className=\"floatBox\">\n                <WindowContainer title={this.pageTitle}>\n                    <div className=\"meeting-appointment\">\n                        <RLDisplayBoard\n                            style={{ padding: 70, paddingTop: 40 }}\n                        >\n                            <RLForm\n                                labelCol={{ style: { width: 100, marginRight: 20 } }}\n                                labelAlign='left'\n                                wrapperCol={\n                                    { span: 20 }\n                                }\n                                onFinish={this.updateDate}\n                                onFinishFailed={this.appointFailed}\n                                className='appointment-form'\n                                ref={this.appointForm}\n                                validateTrigger='onBlur'\n                            >\n                                {!this.meetingId && <RLFormItem label={this.createLabel('直播主题', true)} colon={true}\n                                    name='title'\n                                    rules={[{\n                                        max: 50,\n                                        message: '直播主题最多50位'\n                                    }, {\n                                        validator: (rule, val) => {\n                                            if (!val) {\n                                                return Promise.reject('直播主题不可为空')\n                                            }\n                                            return Promise.resolve()\n                                        }\n                                    }\n                                    ]}\n                                >\n                                    <RLInput\n                                        placeholder='请输入直播主题'\n                                        style={{ width: 360 }}\n                                        onChange={(e) => {\n                                            let text = e.target.value\n                                            this.setState({\n                                                appointParam: {\n                                                    ...this.state.appointParam,\n                                                    title: text\n                                                }\n                                            })\n                                        }}\n                                    />\n                                </RLFormItem>}\n                                {this.meetingId && <RLFormItem label={this.createLabel('直播主题', true)} colon={true}>\n                                    <span>{this.state.appointParam.title}</span>\n                                </RLFormItem>}\n                                {!this.meetingId && <RLFormItem label={this.createLabel('开始时间', true)} colon={true}>\n                                    <div className='form-item-gropu'>\n                                        <RLFormItem\n                                            name='start_date'\n                                            rules={[\n                                                {\n                                                    required: true,\n                                                    message: '请选择开始日期'\n                                                }, {\n                                                    validator: (rule, val) => {\n                                                        let { start_time } = this.appointForm.current.getFieldsValue(['start_time'])\n                                                        let startTime = moment(val.format('YYYY-MM-DD') + ' ' + start_time.format('HH:mm'))\n                                                        if (startTime < moment()) {\n                                                            return Promise.reject('开始时间不能小于当前时间')\n                                                        } else {\n                                                            return Promise.resolve()\n                                                        }\n                                                    },\n                                                }\n                                            ]}\n                                        >\n                                            <RLDatePicker\n                                                allowClear={false}\n                                                onChange={this.startDateChange}\n                                                disabledDate={this.startDisabledDate}\n                                                locale={locale}\n                                                inputReadOnly={true}\n                                            />\n                                        </RLFormItem>\n                                        <RLFormItem\n                                            name='start_time'\n                                            rules={[\n                                                {\n                                                    required: true,\n                                                    message: '请选择开始时间'\n                                                },\n                                                {\n                                                    validator: (rule, val) => {\n                                                        let { start_date } = this.appointForm.current.getFieldsValue(['start_date'])\n                                                        let startTime = moment(start_date.format('YYYY-MM-DD') + ' ' + val.format('HH:mm'))\n                                                        if (startTime < moment()) {\n                                                            return Promise.reject('')\n                                                        }\n                                                        return Promise.resolve()\n                                                    },\n                                                }\n                                            ]}\n                                        >\n                                            <RLDatePicker\n                                                allowClear={false}\n                                                picker='time'\n                                                showNow={false}\n                                                format='HH:mm'\n                                                minuteStep={15}\n                                                onChange={this.startTimeChange}\n                                                locale={locale}\n                                                inputReadOnly={true}\n                                            />\n                                        </RLFormItem>\n                                    </div>\n                                </RLFormItem>}\n                                {this.meetingId && <RLFormItem label={this.createLabel('开始时间', true)} colon={true}>\n                                    <div>{this.state.editStart}</div>\n                                </RLFormItem>}\n                                {!this.meetingId && <RLFormItem label={this.createLabel('结束时间', true)} colon={true}>\n                                    <div className='form-item-gropu'>\n                                        <RLFormItem\n                                            name='end_date'\n                                            rules={[\n                                                {\n                                                    required: true,\n                                                    message: '请选择结束日期'\n                                                }, {\n                                                    validator: (rule, val) => {\n                                                        let { start_date, start_time, end_time } = this.appointForm.current.getFieldsValue(['start_date', 'start_time', 'end_time'])\n                                                        let startTime = moment(start_date.format('YYYY-MM-DD') + ' ' + start_time.format('HH:mm'))\n                                                        let endTime = moment(val.format('YYYY-MM-DD') + ' ' + end_time.format('HH:mm'))\n                                                        if (startTime >= endTime) {\n                                                            return Promise.reject('结束时间不能小于开始时间')\n                                                        }\n                                                        let msg = '直播时长不能超过24小时'\n                                                        let duration = endTime - startTime\n                                                        let maxDuration = 1000 * 60 * 60 * 24\n                                                        console.log('结束日期验证结果：', duration, maxDuration)\n                                                        if (duration > maxDuration) {\n                                                            return Promise.reject(msg)\n                                                        }\n                                                        return Promise.resolve()\n\n                                                    },\n                                                }\n                                            ]}\n                                        >\n                                            <RLDatePicker\n                                                allowClear={false}\n                                                disabledDate={this.endDisabledDate}\n                                                locale={locale}\n                                                inputReadOnly={true}\n                                                onChange={() => {\n                                                    this.appointForm.current.validateFields(['end_time'])\n                                                }}\n                                            />\n                                        </RLFormItem>\n                                        <RLFormItem\n                                            name='end_time'\n                                            rules={[\n                                                {\n                                                    required: true,\n                                                    message: '请选择结束时间'\n                                                },\n                                                {\n                                                    validator: (rule, val) => {\n                                                        let { start_date, start_time, end_date } = this.appointForm.current.getFieldsValue(['start_date', 'start_time', 'end_date'])\n                                                        let startTime = moment(start_date.format('YYYY-MM-DD') + ' ' + start_time.format('HH:mm'))\n                                                        let endTime = moment(end_date.format('YYYY-MM-DD') + ' ' + val.format('HH:mm'))\n                                                        let duration = endTime - startTime\n                                                        let maxDuration = 1000 * 60 * 60 * 24\n\n                                                        console.log('结束时间验证：', duration, maxDuration)\n                                                        if (startTime >= endTime) {\n                                                            return Promise.reject('')\n                                                        }\n                                                        if (duration > maxDuration) {\n                                                            return Promise.reject('')\n                                                        }\n                                                        return Promise.resolve()\n                                                    },\n                                                }\n                                            ]}\n                                        >\n                                            <RLDatePicker\n                                                allowClear={false}\n                                                showNow={false}\n                                                picker='time'\n                                                format='HH:mm'\n                                                minuteStep={15}\n                                                locale={locale}\n                                                inputReadOnly={true}\n                                                onChange={(e) => {\n                                                    this.appointForm.current.validateFields(['end_date'])\n                                                }}\n                                            />\n                                        </RLFormItem>\n                                    </div>\n                                </RLFormItem>}\n                                {this.meetingId && <RLFormItem label={this.createLabel('结束时间', true)} colon={true}>\n                                    <div>{this.state.editEnd}</div>\n                                </RLFormItem>}\n                                {!this.meetingId && <RLFormItem label={this.createLabel('直播人数', true)} colon={true} >\n                                    <div className='form-item-gropu'>\n                                        <RLRadioGroup onChange={(e) => {\n                                            this.setState({\n                                                appointParam: {\n                                                    ...this.state.appointParam,\n                                                    max_user_limit: e.target.value\n                                                }\n                                            })\n                                        }} items={config.liveMaxNum} value={this.state.appointParam.max_user_limit} />\n                                    </div>\n                                </RLFormItem>}\n                                {this.meetingId && <RLFormItem label={this.createLabel('直播人数', true)} colon={true} >\n                                    <div>{this.state.appointParam.max_user_limit + '人'}</div>\n                                </RLFormItem>}\n                                {!this.meetingId && <RLFormItem label={this.createLabel('直播性质', true)} colon={true} >\n                                    <div className='form-item-gropu'>\n                                        <RLRadioGroup onChange={(e) => {\n                                            this.setState({\n                                                appointParam: {\n                                                    ...this.state.appointParam,\n                                                    meeting_type: e.target.value\n                                                }\n                                            }, () => {\n                                                this.appointForm.current.validateFields(['user_list'])\n                                            })\n                                        }} items={config.meetingNature} value={this.state.appointParam.meeting_type} />\n                                    </div>\n                                </RLFormItem>}\n                                {this.meetingId && <RLFormItem label={this.createLabel('直播性质', true)} colon={true} >\n                                    <div>{this.state.appointParam.meeting_type == 1 ? '公开' : '非公开'}</div>\n                                </RLFormItem>}\n                                {!this.meetingId && <RLFormItem label='直播密码' colon={true} >\n                                    <div className='form-item-gropu'>\n                                        <RLFormItem\n                                            name='is_password'\n                                            valuePropName=\"checked\"\n                                        >\n                                            <RLCheckbox\n                                                label='设置密码'\n                                                onChange={(e) => {\n                                                    console.log(e.target.checked)\n                                                    this.setState({\n                                                        appointParam: {\n                                                            ...this.state.appointParam,\n                                                            is_password: e.target.checked,\n                                                            password: ''\n                                                        }\n                                                    }, () => {\n                                                        if (this.state.appointParam.is_password) {\n                                                            // console.log(this.refs)\n                                                            this.passwordInput.focus()\n                                                        }\n                                                    })\n                                                }}\n                                            />\n                                            {/* checked={Number(this.state.appointParam.is_password) === 1} */}\n                                        </RLFormItem>\n                                        {\n                                            Number(this.state.appointParam.is_password) === 1 && (\n                                                <RLFormItem\n                                                    name='password'\n                                                    rules={[\n                                                        {\n                                                            required: true,\n                                                            message: '请输入直播密码'\n                                                        }, {\n                                                            pattern: /^\\d{4}$/,\n                                                            message: '请输入四位数字'\n                                                        }\n                                                    ]}\n                                                >\n                                                    <RLInput\n                                                        ref={ref => this.passwordInput = ref}\n                                                        placeholder='请输入直播密码'\n                                                        maxLength={4}\n                                                        onChange={(e) => {\n                                                            let text = e.target.value\n                                                            text = text.replace(/[^\\d]/g, '')\n                                                            console.log(text);\n                                                            this.setState({\n                                                                appointParam: {\n                                                                    ...this.state.appointParam,\n                                                                    password: text\n                                                                }\n                                                            })\n                                                        }}\n                                                        type={'number'}\n                                                        value={this.state.appointParam.password}\n                                                    />\n                                                </RLFormItem>\n                                            )\n                                        }\n                                    </div>\n                                </RLFormItem>}\n                                {this.meetingId && <RLFormItem label='直播密码' colon={true} >\n                                    {this.state.appointParam.password ? this.state.appointParam.password : '无'}\n                                </RLFormItem>}\n                                <RLFormItem label={this.createLabel('直播封面', false)}>\n                                    <div className='form-item-gropu' style={{\n                                        display: 'flex',\n                                        flexDirection: 'column'\n                                    }}>\n                                        <ConfigProvider locale={commonLocale}>\n                                            <RLFormItem\n                                                name='image'\n                                            >\n                                                <ImgCrop\n                                                    className=\"img-crop\"\n                                                    modalTitle=\"裁剪图片\"\n                                                    modalCancel=\"取消\"\n                                                    modalOk=\"确定\"\n                                                    minZoom={0.5}\n                                                    maxZoom={3}\n                                                    aspect={4 / 3}\n                                                >\n                                                    <Upload\n                                                        accept=\"image/*\"\n                                                        listType=\"picture-card\"\n                                                        onRemove={(ele) => {\n                                                            this.setState({\n                                                                picList: [],\n                                                                appointParam: {\n                                                                    ...this.state.appointParam,\n                                                                    image: ''\n                                                                }\n                                                            })\n                                                        }}\n                                                        showUploadList={{\n                                                            showPreviewIcon: false\n                                                        }}\n                                                        fileList={this.state.picList}\n                                                        customRequest={(upload) => {\n                                                            if (upload.file.size > limtSize) {\n                                                                this.showToast({ type: 'error', content: '选择文件不可超过2M' })\n                                                                return false\n                                                            }\n                                                            let formData = new FormData();\n                                                            if (upload.file.type.indexOf('image') !== -1) {\n                                                                formData.append('type', 'picture')\n                                                            } else {\n                                                                formData.append('type', 'doc')\n                                                            }\n                                                            formData.append('resource', upload.file);\n                                                            commonActions.fileUpload(formData).then(res => {\n                                                                this.setState({\n                                                                    picList: [...this.state.picList, { url: res.data.fileurl }],\n                                                                    appointParam: {\n                                                                        ...this.state.appointParam,\n                                                                        image: res.data.fileurl\n                                                                    }\n                                                                })\n                                                            })\n                                                        }}\n                                                    >\n                                                       <div>\n                                                            <PlusOutlined />\n                                                        </div>\n                                                    </Upload>\n                                                </ImgCrop>\n                                            </RLFormItem>\n                                            <p style={{\n                                                fontSize: 12,\n                                                color: '#999',\n                                                marginTop: 10\n                                            }}>只能上传jpg/png，大小不超过2M</p>\n                                        </ConfigProvider>\n                                    </div>\n                                </RLFormItem>\n                                <RLFormItem label='指定主持人' colon={true} >\n                                    <div className='form-item-gropu' style={{\n                                        flexDirection: 'column'\n                                    }}>\n                                        <div style={{\n                                            display: 'flex',\n                                            flexDirection: 'row'\n                                        }}>\n                                            <RLInput\n                                                disabled\n                                                placeholder='请添加主持人,必须是认证用户'\n                                                style={{ width: 360 }}\n                                                value={this.state.masterValue}\n                                            />\n                                            {(!this.meetingId || this.isExamine) && <RLButton\n                                                label='添加'\n                                                type='primary'\n                                                onClick={this.addMaster}\n                                                style={{ marginLeft: 20 }}\n                                            />}\n                                        </div>\n                                        <p style={{\n                                            fontSize: 12,\n                                            color: '#999',\n                                            marginTop: 10\n                                        }}>您不在直播中时，该邀请成员优先成为主持人</p>\n                                    </div>\n                                </RLFormItem>\n                                <RLFormItem label={this.createLabel('直播人员名单', this.getUserListState())} colon={true}\n                                    name='user_list'\n                                    rules={[\n                                        {\n                                            validator: () => {\n                                                if (this.state.appointParam.meeting_type == 0) {\n                                                    if (!this.state.userGroup.length && !this.state.phoneList.length) {\n                                                        if (this.isExamine) {\n                                                            if (this.state.appointParam.auditing == 2) {\n                                                                return Promise.resolve()\n                                                            } else {\n                                                                return Promise.reject('如果直播性质选择的是非公开直播，参会者名单是必填项')\n                                                            }\n                                                        } else {\n                                                            return Promise.reject('如果直播性质选择的是非公开直播，参会者名单是必填项')\n                                                        }\n                                                    } else {\n                                                        return Promise.resolve()\n                                                    }\n                                                } else {\n                                                    return Promise.resolve()\n                                                }\n                                            }\n                                        }\n                                    ]}\n                                >\n                                    <div style={{ display: 'flex', flexDirection: 'column' }}>\n                                        <div style={{ display: 'flex', flexDirection: 'row' }}>\n                                            <RLButton\n                                                label='添加用户'\n                                                type='primary'\n                                                onClick={this.addUser}\n                                                style={{ width: 110, marginBottom: 15 }}\n                                            />\n                                            <RLButton\n                                                label='添加固话'\n                                                type='primary'\n                                                onClick={this.addPhone}\n                                                style={{ width: 110, marginBottom: 15, marginLeft: 20 }}\n                                            />\n                                            <RLButton\n                                                label='导入报名用户'\n                                                type='primary'\n                                                onClick={this.props.addActivityUser}\n                                                style={{ width: 130, marginBottom: 15, marginLeft: 20 }}\n                                            />\n                                        </div>\n                                        <div className='form-item-gropu'>\n                                            <div style={{\n                                                width: 500,\n                                                minHeight: 60,\n                                                border: '1px solid rgb(220, 223, 230)',\n                                                borderRadius: 3,\n                                                display: 'flex',\n                                                flexWrap: 'wrap',\n                                                padding: '10px 10px 10px 10px',\n                                                boxSizing: 'border-box',\n                                                overflowY: 'scroll'\n                                            }}>\n                                                {this.state.userGroup.map(ele => {\n                                                    return <div style={{ height: 19, marginTop: 4 }} key={ele.id}>\n                                                        <RLTag label={ele.nickname} closable onClose={() => {\n                                                            let all = [...this.state.userGroup]\n                                                            let index = all.findIndex(clc => { return clc.id == ele.id });\n                                                            all.splice(index, 1);\n                                                            this.setState({\n                                                                userGroup: all\n                                                            }, () => {\n                                                                this.appointForm.current.validateFields(['user_list'])\n                                                            })\n                                                        }} />\n                                                    </div>\n                                                })}\n                                                {this.state.phoneList.map(ele => {\n                                                    return <div style={{ height: 19, marginTop: 4 }} key={ele.id}>\n                                                        <RLTag label={ele.number} closable onClose={() => {\n                                                            let all = [...this.state.phoneList]\n                                                            let index = all.findIndex(clc => { return clc.id === ele.id });\n                                                            all.splice(index, 1);\n                                                            this.setState({\n                                                                phoneList: all\n                                                            }, () => {\n                                                                this.appointForm.current.validateFields(['user_list'])\n                                                            })\n                                                        }} />\n                                                    </div>\n                                                })}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </RLFormItem>\n                                <RLFormItem label={this.createLabel('设置嘉宾', false)} colon={true}\n                                    name='guest_list'\n                                >\n                                    <div className='form-item-gropu'>\n                                        <div style={{\n                                            width: 500,\n                                            minHeight: 60,\n                                            maxHeight: 150,\n                                            border: '1px solid rgb(220, 223, 230)',\n                                            borderRadius: 3,\n                                            display: 'flex',\n                                            flexWrap: 'wrap',\n                                            padding: '10px 10px 10px 10px',\n                                            boxSizing: 'border-box',\n                                            overflowY: 'scroll'\n                                        }}>\n                                            {this.state.guestGroup.map(ele => {\n                                                return <div style={{ height: 19, marginTop: 4 }} key={ele.id}>\n                                                    <RLTag label={ele.nickname} closable onClose={() => {\n                                                        let all = [...this.state.guestGroup]\n                                                        let index = all.findIndex(clc => { return clc.id == ele.id });\n                                                        all.splice(index, 1);\n                                                        this.setState({\n                                                            guestGroup: all\n                                                        })\n                                                    }} />\n                                                </div>\n                                            })}\n                                        </div>\n                                        <RLButton\n                                            label='添加'\n                                            type='primary'\n                                            onClick={this.addGuest}\n                                            style={{ marginLeft: 20 }}\n                                        />\n                                    </div>\n                                </RLFormItem>\n                                <RLFormItem label='直播说明' colon={true} >\n                                    <div className='form-item-gropu'>\n                                        <RLTextarea style={{\n                                            width: 500,\n                                            border: 'none',\n                                            resize: 'none'\n                                        }}\n                                            autoSize={{\n                                                minRows: 2, maxRows: 6\n                                            }}\n                                            showCount\n                                            maxLength={200} value={this.state.appointParam.description} onChange={e => {\n                                                this.setState({\n                                                    appointParam: {\n                                                        ...this.state.appointParam,\n                                                        description: e.target.value\n                                                    }\n                                                })\n                                            }} />\n                                    </div>\n                                </RLFormItem>\n                                {/* <RLFormItem label='直播人员说明' colon={true} >\n                                    <div className='form-item-gropu'>\n                                        <RLTextarea style={{\n                                            width: 500,\n                                            border: 'none',\n                                            resize: 'none'\n                                        }}\n                                            autoSize={{\n                                                minRows: 2, maxRows: 6\n                                            }}\n                                            showCount\n                                            maxLength={200} value={this.state.appointParam.participants_description} onChange={e => {\n                                                this.setState({\n                                                    appointParam: {\n                                                        ...this.state.appointParam,\n                                                        participants_description: e.target.value\n                                                    }\n                                                })\n                                            }} />\n                                    </div>\n                                </RLFormItem> */}\n                                <RLFormItem label={this.createLabel('是否推广', true)} colon={true} >\n                                    <div className='form-item-gropu'>\n                                        <RLRadioGroup onChange={(e) => {\n                                            this.setState({\n                                                appointParam: {\n                                                    ...this.state.appointParam,\n                                                    popularize: e.target.value\n                                                }\n                                            })\n                                        }} items={config.meetingExtend} value={this.state.appointParam.popularize} />\n                                    </div>\n                                </RLFormItem>\n                                <RLFormItem label='机构授权材料' colon={true} >\n                                    <div className='form-item-gropu' style={{\n                                        flexDirection: 'column'\n                                    }}>\n                                        <div style={{\n                                            display: 'flex',\n                                            flexDirection: 'row'\n                                        }}>\n                                            <RLInput\n                                                disabled\n                                                style={{ width: 360 }}\n                                                value={this.state.appointParam.material}\n                                            />\n                                            <Upload accept=\n                                                \".png,.jpg,.pdf,.doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                                                customRequest={(upload) => {\n                                                    let fileType = getFileTile(upload.file.name);\n                                                    if (fileType !== 'doc' &&\n                                                        fileType !== 'docx' && fileType !== 'xls' &&\n                                                        fileType !== 'xlsx' && fileType !== 'pdf' &&\n                                                        fileType !== 'png' && fileType !== 'jpg') {\n                                                        this.showToast({ type: 'error', content: '上传文件格式不对' })\n                                                        return\n                                                    }\n                                                    let formData = new FormData();\n                                                    if (upload.file.type.indexOf('image') !== -1) {\n                                                        formData.append('type', 'picture')\n                                                    } else {\n                                                        formData.append('type', 'doc')\n                                                    }\n                                                    formData.append('resource', upload.file);\n                                                    commonActions.fileUpload(formData).then(res => {\n                                                        this.setState({\n                                                            appointParam: {\n                                                                ...this.state.appointParam,\n                                                                material: res.data.fileurl\n                                                            }\n                                                        })\n                                                    })\n                                                }}\n                                                showUploadList={false}\n                                            >\n                                                <RLButton\n                                                    label='上传文件'\n                                                    type='primary'\n                                                    onClick={this.getMeetingList}\n                                                    style={{ marginLeft: 20 }}\n                                                />\n                                            </Upload>\n                                        </div>\n                                        <p style={{\n                                            fontSize: 12,\n                                            color: '#999',\n                                            marginTop: 10\n                                        }}>支持doc/docx/xls/xlsx/pdf/png/jpg格式</p>\n                                    </div>\n                                </RLFormItem>\n                                <RLFormItem label='文档' colon={true}>\n                                    <Upload\n                                        accept=\".doc,.docx,.xls,.xlsx,.ppt,.pptx,.pdf\"\n                                        showUploadList={false}\n                                        className=\"in-job-upload\"\n                                        customRequest={(upload) => {\n                                            console.log('media-upload--file:', upload)\n                                            const fileType = upload.file && upload.file.name   // 文件类型\n                                            if (fileType) {\n                                                let type = fileType.split('.').pop()\n                                                console.log('-----文档类型-----', type);\n                                                if (type != 'doc' && type != 'docx' && type != 'xls' && type != 'xlsx' && type != 'ppt' && type != 'pptx' && type != 'pdf') return this.showToast({ content: '文件格式不支持', type: 'error' })\n                                            }\n                                            this.documentUpload(upload)\n                                        }}\n                                        fileList={[]}\n                                        maxCount={1}\n                                        onRemove={() => { }}\n                                    >\n                                        {!this.state.showUpDoc ? <RLButton\n                                            label='添加文档'\n                                            type='primary'\n                                        /> : <p style={{\n                                            fontSize: 12,\n                                            color: '#999',\n                                            marginTop: 10\n                                        }}>正在上传...</p>}\n                                        <p style={{\n                                            fontSize: 12,\n                                            color: '#999',\n                                            marginTop: 10\n                                        }}>支持doc/docx、xls/xlsx、ppt/pptx、pdf格式</p>\n\n                                    </Upload>\n                                    <RLdocument\n                                        fileList={this.state.fileList}\n                                        docDelete={this.docDelete} />\n                                </RLFormItem>\n                                {/* {!this.isExamine ? <RLFormItem colon={true} >\n                                    <div className='form-item-gropu'>\n                                        <RLCheckbox\n                                            label='在线直播服务免责声明'\n                                            onChange={(e) => {\n                                                this.setState({\n                                                    disclaimer: e.target.checked\n                                                })\n                                            }} checked={this.state.disclaimer}\n                                        />\n                                    </div>\n                                </RLFormItem> : null} */}\n                                {this.isExamine && <RLFormItem label={this.createLabel('直播审核', false, { fontWeight: 'bold' })} colon={true} >\n                                    <div className='form-item-gropu'>\n                                        <RLRadioGroup onChange={(e) => {\n                                            this.setState({\n                                                appointParam: {\n                                                    ...this.state.appointParam,\n                                                    auditing: e.target.value\n                                                }\n                                            }, () => {\n                                                this.appointForm.current.validateFields(['user_list'])\n                                            })\n                                        }} items={config.meetingExamine} value={this.state.appointParam.auditing} />\n                                    </div>\n                                </RLFormItem>}\n                                {this.isExamine && < RLFormItem label={this.createLabel('审核详情', false, { fontWeight: 'bold' })} colon={true} >\n                                    <div className='form-item-gropu'>\n                                        <RLTextarea style={{\n                                            width: 500,\n                                            height: 170,\n                                            resize: 'none'\n                                        }} maxLength={200} value={this.state.appointParam.aud_desc} onChange={e => {\n                                            this.setState({\n                                                appointParam: {\n                                                    ...this.state.appointParam,\n                                                    aud_desc: e.target.value\n                                                }\n                                            })\n                                        }} />\n                                    </div>\n                                </RLFormItem>}\n                                <div style={{ width: '100%', display: 'flex', flex: 1, justifyContent: 'center' }}>\n                                    <RLButton\n                                        type=\"default\"\n                                        label='取消'\n                                        width={80}\n                                        onClick={() => {\n                                            this.props.closeCreat()\n                                        }}\n                                    />\n                                    <RLButton type=\"primary\"\n                                        htmlType=\"submit\"\n                                        label={this.meetingId ? (this.isExamine ? '确认' : '保存') : '创建'}\n                                        style={{ marginLeft: 40 }}\n                                        width={80}\n                                        loading={this.state.submitLoading}\n                                        disabled={this.state.disclaimer}\n                                    />\n                                </div>\n\n                                {/* </RLFormItem> */}\n                            </RLForm>\n                        </RLDisplayBoard>\n                    </div>\n                </WindowContainer >\n            </div >\n        );\n    }\n}\n\nexport default connect((store, props) => {\n    return {\n        ...props,\n        accountType: store.storeCommon.accountType\n    }\n})(CreateLive)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/liveCom/LiveCmpMeetingList.js",["1118"],"import BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport AllLiveList from '@/pages/common/liveCom/AllLiveList.js'\nimport ComExamineMeetingList from '@/pages/common/meeting/ComExamineMeetingList.js'\nimport ExamineList from '@/pages/common/liveCom/ExamineList.js'\nimport { RLTabs } from '@components/index.js'\nimport './LiveCmpMeetingList.less';\n\nclass MeetingManage extends BaseCmp {\n    constructor(props) {\n        super(props)\n        let urlParam = props\n        this.state = {\n            defaultTabKey: urlParam.tabKey ? urlParam.tabKey : 'upcoming'\n        };\n    }\n    componentDidMount() {\n        this.props.onRef(this)\n    }\n    refesh = () => {\n        if (this.props.listName === 'allLive') {\n            this.allLiveList && this.allLiveList.getMeetingList()\n        } else if (this.props.listName === 'myLive') {\n            this.myLiveList && this.myLiveList.getMeetingList()\n        } else if (this.props.listName === 'examineLive') {\n            this.comExamineMeetingList && this.comExamineMeetingList.getMeetingList()\n        }\n    }\n    render() {\n        let tabPanes = this.props.tabPanes\n        return (\n            <WindowContainer>\n                <div className=\"page-meetinglist\">\n                    <RLTabs\n                        onChange={(key) => {\n                            this.setState({\n                                defaultTabKey: key\n                            })\n                        }}\n                        tabPanes={tabPanes}\n                        defaultActiveKey={this.state.defaultTabKey}\n                    />\n                    {\n                        (() => {\n                            if (this.props.listName === 'allLive') {\n                                return <AllLiveList\n                                    history={this.props.history}\n                                    changePage={this.props.changePage}\n                                    isMyLive={this.props.isMyLive}\n                                    onRef={e => this.allLiveList = e}\n                                    listAddUser={this.props.listAddUser}\n                                    listAddNewUser={this.props.listAddNewUser}\n                                    type={this.state.defaultTabKey}\n                                    key={this.state.defaultTabKey}\n                                    modelName={this.props.listName}\n                                    showDoc={this.props.showDoc}\n                                />\n                            } else if (this.props.listName === 'myLive') {\n                                return <AllLiveList\n                                    history={this.props.history}\n                                    changePage={this.props.changePage}\n                                    isMyLive={this.props.isMyLive}\n                                    onRef={e => this.myLiveList = e}\n                                    listAddUser={this.props.listAddUser}\n                                    listAddNewUser={this.props.listAddNewUser}\n                                    type={this.state.defaultTabKey}\n                                    key={this.state.defaultTabKey}\n                                    modelName={this.props.listName}\n                                    showDoc={this.props.showDoc}\n                                />\n                            } else if (this.props.listName === 'examineLive') {\n                                return <ExamineList\n                                    history={this.props.history}\n                                    changePage={this.props.changePage}\n                                    onRef={e => this.comExamineMeetingList = e}\n                                    listAddUser={this.props.listAddUser}\n                                    type={this.state.defaultTabKey}\n                                    key={this.state.defaultTabKey}\n                                    modelName={this.props.listName}\n                                />\n                            }\n                        })()\n                    }\n                </div>\n            </WindowContainer>\n\n        )\n    }\n\n}\n\nexport default connect((store, props) => {\n    return {\n        ...props\n    }\n})(MeetingManage)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/document/DocumentDetail.js",["1119","1120","1121","1122","1123","1124","1125"],"import BaseCmp from '@components/BaseCmp.js'\nimport { connect } from 'react-redux'\nimport './DocumentDetail.less'\nimport { RLTable } from '@components/index.js'\nimport { getData } from '@/libs/utils.js'\nimport interfaces from '@/api/interfaces'\nimport { Upload } from 'antd'\nimport Uploader from '@/libs/Uploader.js';\nimport DocumentProgress from './DocumentProgress';\nimport actionSeminar from '@actions/seminar/actionSeminar.js'\nimport config from '@/config.js';\n\nclass DocumentDetail extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.room = this.props.room\n        this.state = {\n            listLoading: true,\n            upLoading: false,\n            documentList: [],\n            showProgress: false,\n            meetingTitle: '',\n            meetingTime: '',\n            currentListInfo: {  // 列表信息\n                pageNum: 1,  // 总叶数\n                count: 0,    // 总条数\n                page: 1,     // 当前第几页\n            },\n        }\n        this.pageSize = 20\n    }\n    componentDidMount = () => {\n        this.seminarDetail()\n        this.getDocumentList()\n    }\n    getColumns = () => {\n        return [\n            {\n                title: '文档名称',\n                dataIndex: 'title',\n                key: 'title',\n                width: '46%',\n                render: (text, record) => {\n                    return <div className='tableTitle'>\n                        {record.title}\n                    </div>\n                }\n            },\n            {\n                title: '创建者',\n                dataIndex: 'nickname',\n                key: 'nickname',\n                width: '13%',\n                render: (text, record) => {\n                    return <div className='tableNickname'>\n                        {record.nickname}\n                    </div>\n                }\n            },\n            {\n                title: '修改时间',\n                dataIndex: 'update',\n                key: 'update',\n                width: '24%',\n                render: (text, record) => {\n                    return <div className='tableUpdate'>\n                        {this.createUpdateTime(record)}\n                        <div className='tableUpdateNickname'>{record.update_nickname}</div>\n                    </div>\n                }\n            },\n            {\n                title: '操作',\n                dataIndex: 'control',\n                key: 'control',\n                render: (text, record) => {\n                    return <div className='tableUpdate'>\n                        <div className='documentControlBtn' onClick={this.documentDownLoad(record.url)}>下载</div>\n                        <div className='documentControlBtn documentControlBtnRight' onClick={this.documentDelete(record.id)}>删除</div>\n                    </div>\n                }\n            },\n        ]\n    }\n    createUpdateTime = (record) => {\n        let date = new Date(parseInt(record.updated_at) * 1000).toLocaleDateString() && new Date(parseInt(record.updated_at) * 1000).toLocaleDateString().replace(/\\//g, '.')\n        let time = new Date(parseInt(record.updated_at) * 1000).toTimeString() && new Date(parseInt(record.updated_at) * 1000).toTimeString().split(':').slice(0, 2).join(':')\n        let dateTime = date + ' ' + time\n        return <div style={{ marginRight: 20 }}>\n            {dateTime}\n        </div>\n    }\n    seminarDetail = async () => {\n        let res = await actionSeminar.seminarDetail({ room: this.room }).catch(err => {\n            this.showToast('获取详情失败')\n        })\n        if (!res) return\n        this.setState({\n            meetingTitle: res.data.info.title,\n            meetingTime: res.data.info.start_date + ' ' + res.data.info.start_time\n        })\n    }\n    getDocumentList = async () => {\n        this.setState({\n            listLoading: true\n        })\n        let res = await getData({\n            method: 'get',\n            url: interfaces.DOCUMENT_GET_LIST,\n            data: {\n                room: this.room,\n                page: this.state.currentListInfo.page,\n                page_size: this.pageSize\n            }\n        }).catch(err => {\n            this.showToast('加载列表失败')\n            this.setState({\n                listLoading: false\n            })\n        })\n        if (!res) return\n        console.log('oooeee', res);\n        let pageNum = Math.ceil(res.data.count / this.pageSize)\n        this.setState({\n            listLoading: false,\n            documentList: res.data.list,\n            currentListInfo: {\n                ...this.state.currentListInfo,\n                pageNum,\n                count: res.data.count,\n            }\n        })\n    }\n    refresh = () => {\n        this.getDocumentList()\n    }\n    pageChange = (page, pageSize) => {\n        this.setState({\n            currentListInfo: {\n                ...this.state.currentListInfo,\n                page\n            }\n        }, () => {\n            this.getDocumentList()\n        })\n    }\n    documentDownLoad = (url) => {\n        return () => {\n            window.open(url)\n        }\n    }\n    documentDelete = (id) => {\n        return async () => {\n            let res = await getData({\n                method: 'get',\n                url: interfaces.DOCUMENT_DELETE,\n                data: { id }\n            }).catch(err => {\n                this.showToast('删除失败')\n            })\n            if (!res) return\n            this.getDocumentList()\n        }\n    }\n    documentUpload = (upload) => {\n        let uploader = new Uploader({\n            file: upload.file,\n            method: 'POST',\n            baseURL: config.uploadBaseUrl,\n            url: '/api/playback/upload',\n            chunkSize: 2 * 1024 * 1024,   // 切片大小 2M\n            onStart: () => {\n                this.setState({\n                    showProgress: true,\n                    upLoading: true\n                })\n            },\n            onSuccess: (res) => {\n                this.setState({\n                    upLoading: false\n                })\n                this.upDocToBackEnd(res)\n                this.documentProgress && this.documentProgress.changeType(2)\n                this.documentProgress && this.documentProgress.changeProgressNum(100)\n                console.log('--------上传成功-------', res)\n            },\n            onError: () => {\n                this.setState({\n                    upLoading: false\n                })\n                this.documentProgress && this.documentProgress.changeType(0)\n                this.documentProgress && this.documentProgress.changeProgressNum(100)\n                console.log('--------上传失败-------')\n            },\n            onProgress: (progress) => {\n                this.documentProgress && this.documentProgress.changeType(1)\n                this.documentProgress && this.documentProgress.changeProgressNum(progress)\n                console.log('-------上传进度---------', progress)\n                // 进度条\n            },\n            onCancel: () => {\n                this.setState({\n                    upLoading: false\n                })\n                console.log('-------上传取消---------')\n            }\n        })\n        let dtype = 3\n        uploader.upload({\n            dtype,\n            dtranscode: false\n        })\n    }\n    upDocToBackEnd = async (endData) => {\n        let docData = {\n            url: endData.url,\n            title: endData.name,\n            room: this.room\n        }\n        let res = await getData({\n            method: 'post',\n            url: interfaces.DOCUMENT_UP_LOAD,\n            data: docData\n        }).catch(err => {\n            this.documentProgress && this.documentProgress.changeType(0)\n            this.documentProgress && this.documentProgress.changeProgressNum(100)\n        })\n        if (!res) return\n        this.getDocumentList()\n    }\n    cancelProgress = () => {\n        this.setState({\n            showProgress: false\n        })\n        this.documentProgress && this.documentProgress.changeType(1)\n        this.documentProgress && this.documentProgress.changeProgressNum(0)\n    }\n    cancelProgressOk = () => {\n        this.setState({\n            showProgress: false\n        })\n        this.documentProgress && this.documentProgress.changeType(1)\n        this.documentProgress && this.documentProgress.changeProgressNum(0)\n    }\n    render() {\n        return <div className='documentBox'>\n            <div className='documentBoxCon'>\n                <div className='documentFirst'>\n                    <div className='documentFirstText'> {this.state.meetingTitle}</div>\n                    <div className='documentFirstBtn' onClick={() => {\n                        this.props.closeDoc && this.props.closeDoc()\n                    }}>返回</div>\n                </div>\n                <div className='documentSecond'>\n                    <div className='documentSecondLeft'>\n                        <div>\n                            {'会议号：' + this.room}\n                        </div>\n                        <div style={{ marginLeft: 20 }}>\n                            {'会议时间：' + this.state.meetingTime}\n                        </div>\n                    </div>\n                    <div className='documentSecondLeft'>\n                        {this.state.upLoading ? <div\n                            className='documentSecondRightUpLoadBtn'\n                            onClick={() => {\n                                this.setState({\n                                    showProgress: true\n                                })\n                            }}\n                        >导入中...</div> : <Upload\n                            accept=\".doc,.docx,.xls,.xlsx,.ppt,.pptx,.pdf\"\n                            // showUploadList={true}\n                            className=\"in-job-upload\"\n                            customRequest={(upload) => {\n                                console.log('media-upload--file:', upload)\n                                const fileType = upload.file && upload.file.name   // 文件类型\n                                if (fileType) {\n                                    let type = fileType.split('.').pop()\n                                    console.log('-----文档类型-----', type);\n                                    if (type != 'doc' && type != 'docx' && type != 'xls' && type != 'xlsx' && type != 'ppt' && type != 'pptx' && type != 'pdf') return this.showToast({ content: '文件格式不支持', type: 'error' })\n                                }\n                                this.documentUpload(upload)\n                            }}\n                            fileList={[]}\n                            maxCount={1}\n                            onRemove={() => { }\n                            }\n                        >\n                                <div\n                                    className='documentSecondRightUpLoadBtn'\n                                >导入文档</div>\n                            </Upload>}\n                        <div className='documentSecondRightRefreshBtn' onClick={this.refresh}>刷新</div>\n                    </div>\n                </div>\n                <div className='documentTable'>\n                    <RLTable\n                        loading={this.state.listLoading}\n                        dataSource={this.state.documentList}\n                        rowKey='meeting_id'\n                        columns={this.getColumns()}\n                        paginationInfo={{\n                            total: this.state.currentListInfo.count,\n                            pageSize: this.pageSize,\n                            onChange: this.pageChange,\n                            current: this.state.currentListInfo.page\n                        }}\n                    />\n                </div>\n            </div>\n            <DocumentProgress\n                cancelProgress={this.cancelProgress}\n                cancelProgressOk={this.cancelProgressOk}\n                isShow={this.state.showProgress}\n                ref={(e) => { this.documentProgress = e }}\n                t={this.props.t}\n            />\n        </div>\n    }\n\n}\nexport default connect((store, props) => {\n    return {\n        ...props\n    }\n})(DocumentDetail)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/liveCom/LiveDetail.js",["1126","1127","1128","1129","1130","1131","1132","1133","1134","1135","1136"],"import React from 'react';\nimport {\n    RLButton,\n    RLDisplayBoard,\n    RLTag\n} from '@components/index.js'\nimport { Tooltip } from 'antd'\nimport WindowContainer from '@components/WindowContainer.js'\nimport actionMeeting from '@actions/meetingManage/actionMeeting.js'\nimport BaseCmp from '@components/BaseCmp.js'\nimport { connect } from 'react-redux';\nimport utils, { dealTableTime } from '@/libs/utils.js'\nimport '../meeting/MeetingDetail.less'\nimport RLdocument from '@components/document/RLDocument.js'\n\nclass LiveDetail extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.urlParam = props\n        this.meetingId = this.urlParam.meetingId\n        this.state = {\n            meetingDetail: {\n                title: '',\n                start_time_at: '',\n                end_time_at: '',\n                max_user_limit: '',\n                meeting_type: '',\n                password: '',\n                description: '',\n                participants_description: '',\n                host: '',\n                popularize: '',\n                material: '',\n                status: '',\n                auditing: '',\n                userList: [],\n                guestList: [],\n                image: '',\n                fileList: []\n            }\n        }\n\n    }\n    componentDidMount() {\n        this.getMeetingDetail(this.meetingId)\n    }\n    getMeetingDetail = (meetingId) => {\n        actionMeeting.getMeetingDetail(meetingId).then(res => {\n            if (res.code !== 200) {\n                this.showToast({ type: 'error', content: '获取直播详情失败' })\n            } else {\n                let info = res.data;\n                let data = {};\n                let status = '';\n                let auditing = '';\n                if (info.meeting.status == 3) {\n                    status = '已结束'\n                } else if (info.meeting.status == 2) {\n                    status = '已开始'\n                } else if (info.meeting.status == 1) {\n                    status = '进行中'\n                } else {\n                    status = '未开始'\n                }\n                if (info.meeting.auditing == 3) {\n                    auditing = '撤销'\n                } else if (info.meeting.auditing == 2) {\n                    auditing = '审批没通过'\n                } else if (info.meeting.auditing == 1) {\n                    auditing = '审批通过'\n                } else {\n                    auditing = '审批中'\n                }\n                data = {\n                    meeting_id: info.meeting.meeting_id,\n                    room: info.meeting.room,\n                    title: info.meeting.title,\n                    start_time_at: dealTableTime(info.meeting.start_time_at),\n                    end_time_at: dealTableTime(info.meeting.end_time_at),\n                    max_user_limit: info.meeting.max_user_limit + '人',\n                    meeting_type: info.meeting.meeting_type == 1 ? '公开' : '非公开',\n                    password: info.meeting.password ? info.meeting.password : '无',\n                    description: info.meeting.description,\n                    participants_description: info.meeting.participants_description,\n                    host: info.host.nickname,\n                    popularize: info.meeting.popularize == 1 ? '是' : '不是',\n                    material: info.meeting.material,\n                    status, auditing,\n                    user_list: info.user_list,\n                    phone_list: info.phone_list,\n                    guest_list: info.guest_list,\n                    image: info.meeting.image,\n                    fileList: info.doc_list.map(i => {\n                        return {\n                            id: i.id,\n                            title: i.title + '.' + i.suffix,\n                            doc_url: i.url,\n                            lid: i.id,\n                            size: '',\n                            is_me: i.is_me\n                        }\n                    })\n                }\n                this.setState({\n                    meetingDetail: {\n                        ...data\n                    }\n                })\n            }\n        })\n    }\n    pageTitle = () => {\n        return (\n            <div className=\"custom-page-title\">\n                <span>直播详情</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.closeDetail()\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n    render() {\n        let valueBtnStyle = {\n            flex: 10,\n            display: 'flex',\n            flexDirection: 'row'\n        }\n        let labelStyle = {\n            color: '#999',\n            fontSize: 14,\n            textAlign: 'left',\n            width: 56,\n            flex: 'none'\n        }\n        let valueStyle = {\n            color: '#333',\n            fontSize: 14\n        }\n        let basicBoxStyle = {\n            width: 500,\n            height: 200,\n            border: '1px solid rgb(220, 223, 230)',\n            borderRadius: 3,\n            padding: '10px 10px 10px 10px',\n            boxSizing: 'border-box'\n        }\n        let meetingInfo = [\n            {\n                list: [\n                    {\n                        label: '直播主题',\n                        value: this.state.meetingDetail.title,\n                        labelStyle,\n                        valueStyle,\n                    },\n                    {\n                        label: '直播号',\n                        labelStyle,\n                        valueStyle,\n                        value: <div style={valueBtnStyle}>\n                            <div style={valueStyle}>{this.state.meetingDetail.room != 0 ? this.state.meetingDetail.room : '——'}</div>\n                            {this.state.meetingDetail.room != 0 ? <Tooltip title=\"点击复制\">\n                                <img\n                                    alt=''\n                                    style={{ marginLeft: 10, height: 24, width: 24, cursor: 'pointer' }}\n                                    src={require('../../../assets/images/copy.png').default} onClick={() => {\n                                        utils.copy(this.state.meetingDetail.room, () => {\n                                            this.showToast({ type: 'success', content: '复制成功' })\n                                        })\n\n                                    }}\n                                />\n                            </Tooltip> : null}\n                        </div>\n                    },\n                    {\n                        label: '开始时间',\n                        labelStyle,\n                        valueStyle,\n                        value: this.state.meetingDetail.start_time_at\n                    },\n                    {\n                        label: '结束时间',\n                        labelStyle,\n                        valueStyle,\n                        value: this.state.meetingDetail.end_time_at\n                    },\n                    {\n                        label: '直播人数限制',\n                        labelStyle,\n                        valueStyle,\n                        value: this.state.meetingDetail.max_user_limit\n                    },\n                    {\n                        label: '直播性质',\n                        labelStyle,\n                        valueStyle,\n                        value: this.state.meetingDetail.meeting_type\n                    },\n                    {\n                        label: '直播密码',\n                        labelStyle,\n                        valueStyle,\n                        value: this.state.meetingDetail.password\n                    },\n                    {\n                        label: '直播封面',\n                        labelStyle,\n                        valueStyle,\n                        value: <div>\n                            <img src={this.state.meetingDetail.image} width='300' alt='' />\n                        </div>\n                    },\n                    {\n                        label: '主持人',\n                        labelStyle,\n                        valueStyle,\n                        value: this.state.meetingDetail.host\n                    },\n                    {\n                        label: '直播人员名单',\n                        labelStyle,\n                        valueStyle,\n                        value: ((this.state.meetingDetail.user_list && this.state.meetingDetail.user_list.length) || (this.state.meetingDetail.phone_list && this.state.meetingDetail.phone_list.length)) ? <div style={{\n                            display: 'flex',\n                            flexWrap: 'wrap',\n                            width: 500,\n                            minHeight: 60,\n                            maxHeight: 150,\n                            padding: '10px 10px 10px 10px',\n                            boxSizing: 'border-box',\n                            overflowY: 'scroll'\n                        }}>\n                            {this.state.meetingDetail.user_list ? this.state.meetingDetail.user_list.map(ele => {\n                                return <div style={{ height: 19, marginTop: 4 }} key={ele.uid}><RLTag label={ele.nickname} /></div>\n                            }) : null}\n                            {\n                                this.state.meetingDetail.phone_list ? this.state.meetingDetail.phone_list.map(ele => {\n                                    return <div style={{ height: 19, marginTop: 4 }} key={ele.uid}><RLTag label={ele.number} /></div>\n                                }) : null\n                            }\n                        </div> : '未添加'\n                    },\n                    {\n                        label: '嘉宾名单',\n                        labelStyle,\n                        valueStyle,\n                        value: this.state.meetingDetail.guest_list && this.state.meetingDetail.guest_list.length ? <div style={{\n                            display: 'flex',\n                            flexWrap: 'wrap',\n                            width: 500,\n                            minHeight: 60,\n                            maxHeight: 150,\n                            padding: '10px 10px 10px 10px',\n                            boxSizing: 'border-box',\n                            overflowY: 'scroll'\n                        }}>\n                            {this.state.meetingDetail.guest_list ? this.state.meetingDetail.guest_list.map(ele => {\n                                return <div style={{ height: 19, marginTop: 4 }} key={ele.uid}><RLTag label={ele.nickname} /></div>\n                            }) : null}\n                        </div> : '未添加'\n                    },\n                    {\n                        label: '直播说明',\n                        labelStyle,\n                        valueStyle,\n                        value: this.state.meetingDetail.description ? <div style={{\n                            display: 'flex',\n                            flexWrap: 'wrap',\n                            width: 500,\n                            minHeight: 60,\n                            maxHeight: 150,\n                            padding: '10px 10px 10px 10px',\n                            boxSizing: 'border-box',\n                            overflowY: 'scroll'\n                        }}>\n                            <p>{this.state.meetingDetail.description}</p>\n                        </div> : '未填写'\n                    },\n                    // {\n                    //     label: '直播人员说明',\n                    //     labelStyle,\n                    //     valueStyle,\n                    //     value: this.state.meetingDetail.participants_description ? <div style={{\n                    //         display: 'flex',\n                    //         flexWrap: 'wrap',\n                    //         width: 500,\n                    //         minHeight: 60,\n                    //         maxHeight: 150,\n                    //         padding: '10px 10px 10px 10px',\n                    //         boxSizing: 'border-box',\n                    //         overflowY: 'scroll'\n                    //     }}>\n                    //         <p>{this.state.meetingDetail.participants_description}</p>\n                    //     </div> : '未填写'\n                    // },\n                    {\n                        label: '是否推广',\n                        labelStyle,\n                        valueStyle,\n                        value: this.state.meetingDetail.popularize\n                    },\n                    {\n                        label: '机构授权材料',\n                        labelStyle,\n                        valueStyle,\n                        value: this.state.meetingDetail.material ? this.state.meetingDetail.material : '未上传'\n                    },\n                    {\n                        label: '文档',\n                        labelStyle,\n                        valueStyle,\n                        value: this.state.meetingDetail.fileList && this.state.meetingDetail.fileList.length ? <RLdocument\n                            fileList={this.state.meetingDetail.fileList}\n                            isDetail={true} /> : '未上传'\n                    },\n                    {\n                        label: '直播状态',\n                        labelStyle,\n                        valueStyle,\n                        value: this.state.meetingDetail.status\n                    },\n                    {\n                        label: '直播审核状态',\n                        labelStyle,\n                        valueStyle,\n                        value: this.state.meetingDetail.auditing\n                    }\n                ]\n            }\n        ]\n        return (\n            <div className=\"floatBox\">\n                <WindowContainer title={this.pageTitle} className='my-meeting-detail'>\n                    <RLDisplayBoard\n                        style={{ width: '100%', flex: 1 }}\n                        labelCol={2}\n                        valueCol={10}\n                        spaceWidth={20}\n                        className='meeting-info'\n                        items={meetingInfo}>\n                    </RLDisplayBoard>\n                </WindowContainer>\n            </div>\n\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props\n    }\n})(LiveDetail);","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/Appointment.js",["1137","1138","1139","1140","1141","1142","1143","1144","1145","1146","1147","1148","1149","1150","1151"],"import React from 'react';\n\nimport { connect } from 'react-redux'\nimport {\n  RLInput,\n  RLButton,\n  RLForm,\n  RLFormItem,\n  RLDatePicker,\n  RLCheckbox,\n  RLTag,\n  RLDisplayBoard,\n  RLRadioGroup,\n  RLTextarea\n} from '@components/index.js'\nimport './Appointment.less'\nimport WindowContainer from '@components/WindowContainer.js'\nimport actionMeetingList from '@actions/meetingManage/actionMeeting.js'\nimport commonActions from '@actions/commonActions.js'\nimport moment from 'moment'\nimport BaseCmp from '@components/BaseCmp.js'\nimport locale from 'antd/es/date-picker/locale/zh_CN';\nimport config from '@/config.js';\nimport { Upload } from 'antd'\nimport { dealSearchTime, dealTableTime, getFileTile } from '@/libs/utils'\nimport RLdocument from '@components/document/RLDocument.js'\nimport Uploader from '@/libs/Uploader.js';\n\nclass Appointment extends BaseCmp {\n  constructor(props) {\n    super(props);\n    this.urlParam = props\n    this.meetingId = this.urlParam.meetingId;\n    this.isExamine = this.urlParam.isExamine;\n    console.log('appoint--meeeting:', this.urlParam)\n    this.state = {\n      appointParam: {\n      },\n      masterValue: '',\n      userGroup: [],   // 成员名单\n      phoneList: [],   // 固话名单\n      disclaimer: false,\n      inviteUserModal: false,   // 显示邀请模态框\n      pageTitle: '',\n      submitLoading: false, // 提交按钮正在loading\n      editStart: '',\n      editEnd: '',\n      fileList: [],\n      showUpDoc: false\n    };\n    this.count = 100001\n    this.appointForm = React.createRef();\n  }\n\n  componentWillMount() {\n    let appointParam\n    if (this.meetingId) {  // 编辑会议\n      if (this.isExamine) {\n        this.setState({\n          pageTitle: '审核会议'\n        })\n      } else {\n        this.setState({\n          pageTitle: '编辑会议'\n        })\n      }\n      this.getMeetingDetail(this.meetingId)\n    } else {\n      let sMoment = this.getStartDate()\n      let eMoment = this.getEndDate(sMoment)\n      let start_date = moment(sMoment)\n      let start_time = moment(sMoment)\n      let end_date = moment(eMoment)\n      let end_time = moment(eMoment)\n      appointParam = {\n        user_list: '',\n        phone_list: '',\n        title: '', // 会议主题\n        start_time_at: '',\n        end_time_at: '',\n        max_user_limit: 20,\n        meeting_type: 1,\n        password: '',\n        description: '',\n        participants_description: '',\n        host: '',\n        popularize: 1,\n        material: '',\n        mustmaster: 1,\n        start_date,\n        start_time,\n        end_date,\n        end_time\n      }\n      this.setState({\n        appointParam,\n        pageTitle: '创建会议'\n      }, () => {\n        this.appointForm.current.setFieldsValue(appointParam)\n      })\n    }\n  }\n  componentDidMount() {\n    this.props.onRef(this)\n  }\n  getMeetingDetail = (meetingId) => {\n    actionMeetingList.getMeetingDetail(meetingId).then(res => {\n      if (res.code !== 200) {\n        this.showToast({ type: 'error', content: '获取会议详情失败' })\n      } else {\n        console.log('会议详情：', res)\n        if (res.data.meeting.status == 1) {\n          this.showToast('会议正在进行中');\n          this.props.closeCreat();\n          this.props.refeshAndhttp();\n          return\n        } else if (res.data.meeting.status === 3) {\n          this.showToast('会议已结束')\n          this.props.closeCreat();\n          this.props.refeshAndhttp();\n          return\n        }\n        let {\n          meeting_id,\n          title,\n          end_time_at,\n          start_time_at,\n          password,\n          max_user_limit,\n          meeting_type,\n          mustmaster,\n          popularize,\n          material,\n          description,\n          participants_description,\n        } = res.data.meeting;\n\n        let userGroup = res.data.user_list.map(user => {\n          return { id: Number(user.uid), ...user }\n        })\n        let phoneList = res.data.phone_list\n        let editStart = dealTableTime(start_time_at);\n        let editEnd = dealTableTime(end_time_at);\n        let host = res.data.host.uid;\n        let masterValue = res.data.host.nickname;\n        let fileList = res.data.doc_list.map(i => {\n          return {\n            id: i.id,\n            title: i.title + '.' + i.suffix,\n            doc_url: i.url,\n            lid: i.id,\n            size: '',\n            is_me: i.is_me\n          }\n        })\n        if (this.isExamine) {\n          this.setState({\n            userGroup,\n            phoneList,\n            editStart,\n            editEnd,\n            masterValue,\n            fileList,\n            appointParam: {\n              meeting_id,\n              title,\n              end_time_at,\n              start_time_at,\n              password,\n              max_user_limit,\n              meeting_type,\n              mustmaster,\n              popularize,\n              material,\n              description,\n              participants_description,\n              user_list: '',\n              phone_list: '',\n              host,\n              aud_desc: '',\n              auditing: 1\n            }\n          }, () => {\n            this.appointForm.current.setFieldsValue(this.state.appointParam)\n          })\n        } else {\n          this.setState({\n            userGroup,\n            phoneList,\n            editStart,\n            editEnd,\n            masterValue,\n            fileList,\n            appointParam: {\n              meeting_id,\n              title,\n              end_time_at,\n              start_time_at,\n              password,\n              max_user_limit,\n              meeting_type,\n              mustmaster,\n              popularize,\n              material,\n              description,\n              participants_description,\n              user_list: '',\n              phone_list: '',\n              host\n            }\n          }, () => {\n            this.appointForm.current.setFieldsValue(this.state.appointParam)\n          })\n        }\n\n      }\n    })\n  }\n  // 生成开始时间\n  getStartDate = () => {\n    let sMoment = moment().seconds(0)\n    let minute = sMoment.minute()\n    minute = (parseInt(minute / 15) + 1) * 15\n\n    sMoment.set('minute', minute)\n    console.log(22, sMoment.format())\n    return sMoment\n  }\n  // 根据开始时间生成下一个整1小时\n  getEndDate = (sMoment) => {\n    let eMoment = moment(sMoment)\n    let duration = 45\n    // if (this.props.userInfo.target_type[0] && this.props.userInfo.target_type[0].target_type === 'basicset') {\n    //   duration = 45\n    // }\n    let minute = eMoment.minute() + duration\n    eMoment.set('minute', minute)\n    return eMoment\n  }\n  addConfirm = (users) => {\n    console.log(users)\n    this.setState({\n      appointParam: {\n        ...this.state.appointParam,\n        userlist: users\n      }\n    })\n  }\n  startDateChange = (m) => {\n    let start_date = m;\n    let start_time = moment(start_date.format('YYYY-MM-DD') + ' ' + this.appointForm.current.getFieldValue('start_time').format('HH:mm'))\n    let end_date = this.getEndDate(start_time)\n    let end_time = this.getEndDate(start_time)\n    this.appointForm.current.setFieldsValue({ end_date, end_time })\n    this.appointForm.current.validateFields(['start_time'])\n  }\n  startTimeChange = (m) => {\n    let start_time = m;\n    start_time = moment(this.appointForm.current.getFieldValue('start_date').format('YYYY-MM-DD') + ' ' + start_time.format('HH:mm'))\n    console.log('astart_time:', start_time)\n    let end_date = this.getEndDate(start_time)\n    let end_time = this.getEndDate(start_time)\n    this.appointForm.current.setFieldsValue({ end_date, end_time })\n    this.appointForm.current.validateFields(['start_date'])\n  }\n  startDisabledDate = (current) => {\n    return current && current < moment().startOf('day')  // .subtract(1, 'day');\n  }\n  endDisabledDate = (_current) => {\n    let startDate = moment(this.appointForm.current.getFieldValue('start_date')).format('YYYY-MM-DD')\n    let startDate2 = moment(startDate).add(2, 'days').format('YYYY-MM-DD')\n    let current = _current.format('YYYY-MM-DD')\n    return current &&\n      (\n        current < startDate\n        ||\n        current > startDate2\n      )\n  }\n  appointFailed = (res) => {\n    this.showToast({ content: '您有必填项未填写', type: 'success' })\n  }\n  appointConfirm = (values) => {\n    let start_date, start_time, end_date, end_time;\n    if (!this.meetingId) {\n      start_date = values.start_date.format('YYYY-MM-DD')\n      start_time = values.start_time.format('HH:mm')\n      end_date = values.end_date.format('YYYY-MM-DD')\n      end_time = values.end_time.format('HH:mm')\n    }\n    let param = {}\n    let userStr = []\n    let phoneStr = []\n    for (let key in this.state.appointParam) {\n      if (key !== 'end_date' && key !== 'end_time' && key !== 'start_date' && key !== 'start_time' && key !== 'end_time_at' && key !== 'start_time_at') {\n        param[key] = this.state.appointParam[key]\n      } else if (key === 'start_time_at') {\n        !this.meetingId && (param[key] = new Date(start_date + ' ' + start_time).getTime() / 1000);\n        this.meetingId && (param[key] = this.state.appointParam[key]);\n      } else if (key === 'end_time_at') {\n        !this.meetingId && (param[key] = new Date(end_date + ' ' + end_time).getTime() / 1000);\n        this.meetingId && (param[key] = this.state.appointParam[key]);\n      }\n    }\n    this.state.userGroup.forEach(ele => {\n      userStr.push(ele.id);\n    })\n    param.user_list = userStr.join(',')\n    // 固话名单\n    this.state.phoneList.forEach(ele => {\n      phoneStr.push(ele.id);\n    })\n    param.phone_list = phoneStr.join(',')\n    param.doc_list = JSON.stringify(this.state.fileList)\n    this.setState({\n      submitLoading: true,\n      disclaimer: true\n    })\n    if (this.meetingId) {\n      param.meeting_id = this.meetingId;\n      if (this.isExamine) {\n        actionMeetingList.examineMeeting(param).then(res => {\n          if (res.code === 200) {\n            this.props.closeCreat && this.props.closeCreat();\n            this.props.refeshAndhttp && this.props.refeshAndhttp()\n          } else {\n            this.showToast({ content: res.msg, type: 'error' })\n          }\n        }).finally(() => {\n          this.setState({\n            submitLoading: false,\n            disclaimer: false\n          })\n        })\n      } else {\n        actionMeetingList.updateMeeting(param).then(res => {\n          if (res.code === 200) {\n            this.showToast({ content: '编辑成功', type: 'success' })\n            this.props.closeCreat && this.props.closeCreat();\n            this.props.refeshAndhttp && this.props.refeshAndhttp()\n          } else {\n            this.showToast({ content: res.msg, type: 'error' })\n          }\n        }).finally(() => {\n          this.setState({\n            submitLoading: false,\n            disclaimer: false\n          })\n        })\n      }\n    } else {\n      actionMeetingList.appointMeeting(param).then(res => {\n        if (res.code === 200) {\n          this.showToast({ content: '创建成功', type: 'success' })\n          this.props.closeCreat && this.props.closeCreat();\n          this.props.refeshAndhttp && this.props.refeshAndhttp()\n        } else {\n          this.showToast({ content: res.msg, type: 'error' })\n        }\n      }).finally(() => {\n        this.setState({\n          submitLoading: false,\n          disclaimer: false\n        })\n      })\n    }\n  }\n  /**\n   * 页面头部\n   */\n  pageTitle = () => {\n    return (\n      <div className=\"custom-page-title\">\n        <span>{this.state.pageTitle}</span>\n        <RLButton\n          className=\"custom-page-title-btn\"\n          type=\"default\"\n          onClick={() => {\n            this.props.closeCreat()\n          }}\n          label='返回'\n        />\n      </div>\n    )\n  }\n  /**\n   * 创建表单的label\n   */\n  createLabel = (labelName, need, style = {}) => {\n    return <div>\n      {need ? <span style={{ color: '#ff4d4f' }}>*</span> : null}\n      <span style={{ ...style }}>{labelName}</span>\n    </div>\n  }\n  /**\n   * 添加主持人\n   */\n  addMaster = () => {\n    this.props.addMaster({\n      showSelectGroup: true,\n      selectType: 'radio',\n      originArr: [],\n      originCanCancel: true,\n      returnStyle: 'object',\n      successFunName: 'changeMeetingMaster',\n      mustIdent: true\n    })\n  }\n  setHost = (data) => {\n    this.setState({\n      masterValue: data[0].nickname,\n      appointParam: {\n        ...this.state.appointParam,\n        host: data[0].id\n      }\n    })\n  }\n  setVisitor = (data) => {\n    for (let i = 0; i < data.length; i++) {\n      let isInOrigin = this.state.userGroup.findIndex(ele => { return ele.id === data[i].id })\n      if (isInOrigin === -1) {\n        this.state.userGroup.push(data[i])\n      }\n    }\n    this.setState({\n      userGroup: this.state.userGroup\n    }, () => {\n      this.appointForm.current.validateFields(['user_list'])\n    })\n  }\n  addUser = () => {\n    this.props.addMaster({\n      showSelectGroup: true,\n      selectType: 'checkbox',\n      originArr: this.state.userGroup,\n      originCanCancel: true,\n      returnStyle: 'object',\n      successFunName: 'changeVisit'\n    })\n  }\n  addPhone = () => {\n    this.props.addPhone({\n      showSelectGroup: true,\n      selectType: 'checkbox',\n      originArr: this.state.phoneList,\n      originCanCancel: true,\n      returnStyle: 'object',\n      successFunName: 'changeVisit'\n    })\n  }\n  setPhone = (data) => {\n    this.setState({\n      phoneList: data\n    }, () => {\n      this.appointForm.current.validateFields(['user_list'])\n    })\n  }\n  setActUser = (data) => {\n    for (let i = 0; i < data.length; i++) {\n      let isInOrigin = this.state.userGroup.findIndex(ele => { return ele.id === data[i].id })\n      if (isInOrigin === -1) {\n        this.state.userGroup.push(data[i])\n      }\n    }\n    this.setState({\n      userGroup: this.state.userGroup\n    }, () => {\n      this.appointForm.current.validateFields(['user_list'])\n    })\n  }\n  documentUpload = (upload) => {\n    let uploader = new Uploader({\n      file: upload.file,\n      method: 'POST',\n      baseURL: config.uploadBaseUrl,\n      url: '/api/playback/upload',\n      chunkSize: 2 * 1024 * 1024,   // 切片大小 2M\n      onStart: () => {\n        this.setState({\n          showUpDoc: true\n        })\n      },\n      onSuccess: (res) => {\n        console.log('--------上传成功-------', res)\n        let fileList = [...this.state.fileList, {\n          id: '',\n          title: res.name,\n          doc_url: res.url,\n          lid: this.count,\n          is_me: 1,\n          upLoad: 1,\n          size: ''\n        }]\n        this.count++\n        this.setState({\n          fileList,\n          showUpDoc: false\n        })\n      },\n      onError: () => {\n        console.log('--------上传失败-------')\n        this.showToast({ type: 'err', content: '上传文档失败' })\n        this.setState({\n          showUpDoc: false\n        })\n      },\n      onProgress: (progress) => {\n        console.log('-------上传进度---------', progress)\n        // 进度条\n      },\n      onCancel: () => {\n        console.log('-------上传取消---------')\n        this.setState({\n          showUpDoc: false\n        })\n      }\n    })\n    let dtype = 3\n    uploader.upload({\n      dtype,\n      dtranscode: false\n    })\n  }\n  docDelete = (id) => {\n    let fileList = this.state.fileList.filter(i => {\n      return (i.id !== id) && i.lid !== id\n    })\n    this.setState({\n      fileList\n    })\n  }\n  getUserListState = () => {\n    if (this.state.appointParam.meeting_type == 1) {\n      return false\n    } else {\n      if (this.isExamine) {\n        if (this.state.appointParam.auditing == 2) {\n          return false\n        } else {\n          return true\n        }\n      } else {\n        return true\n      }\n    }\n  }\n  render() {\n    return (\n      <div className=\"floatBox\">\n        <WindowContainer title={this.pageTitle}>\n          <div className=\"meeting-appointment\">\n            <RLDisplayBoard\n              style={{ padding: 70, paddingTop: 40 }}\n            >\n              <RLForm\n                labelCol={{ style: { width: 100, marginRight: 20 } }}\n                labelAlign='left'\n                wrapperCol={\n                  { span: 20 }\n                }\n                onFinish={this.appointConfirm}\n                onFinishFailed={this.appointFailed}\n                className='appointment-form'\n                ref={this.appointForm}\n                validateTrigger='onBlur'\n              >\n                {!this.meetingId && <RLFormItem label={this.createLabel('会议主题', true)} colon={true}\n                  name='title'\n                  rules={[{\n                    max: 50,\n                    message: '会议主题最多50位'\n                  }, {\n                    validator: (rule, val) => {\n                      if (!val) {\n                        return Promise.reject('会议主题不可为空')\n                      }\n                      return Promise.resolve()\n                    }\n                  }\n                  ]}\n                >\n                  <RLInput\n                    placeholder='请输入会议主题'\n                    style={{ width: 360 }}\n                    onChange={(e) => {\n                      let text = e.target.value\n                      this.setState({\n                        appointParam: {\n                          ...this.state.appointParam,\n                          title: text\n                        }\n                      })\n                    }}\n                  />\n                </RLFormItem>}\n                {this.meetingId && <RLFormItem label={this.createLabel('会议主题', true)} colon={true}>\n                  <span>{this.state.appointParam.title}</span>\n                </RLFormItem>}\n                {!this.meetingId && <RLFormItem label={this.createLabel('开始时间', true)} colon={true}>\n                  <div className='form-item-gropu'>\n                    <RLFormItem\n                      name='start_date'\n                      rules={[\n                        {\n                          required: true,\n                          message: '请选择开始日期'\n                        }, {\n                          validator: (rule, val) => {\n                            let { start_time } = this.appointForm.current.getFieldsValue(['start_time'])\n                            let startTime = moment(val.format('YYYY-MM-DD') + ' ' + start_time.format('HH:mm'))\n                            if (startTime < moment()) {\n                              return Promise.reject('开始时间不能小于当前时间')\n                            } else {\n                              return Promise.resolve()\n                            }\n                          },\n                        }\n                      ]}\n                    >\n                      <RLDatePicker\n                        allowClear={false}\n                        onChange={this.startDateChange}\n                        disabledDate={this.startDisabledDate}\n                        locale={locale}\n                        inputReadOnly={true}\n                      />\n                    </RLFormItem>\n                    <RLFormItem\n                      name='start_time'\n                      rules={[\n                        {\n                          required: true,\n                          message: '请选择开始时间'\n                        },\n                        {\n                          validator: (rule, val) => {\n                            let { start_date } = this.appointForm.current.getFieldsValue(['start_date'])\n                            let startTime = moment(start_date.format('YYYY-MM-DD') + ' ' + val.format('HH:mm'))\n                            if (startTime < moment()) {\n                              return Promise.reject('')\n                            }\n                            return Promise.resolve()\n                          },\n                        }\n                      ]}\n                    >\n                      <RLDatePicker\n                        allowClear={false}\n                        picker='time'\n                        showNow={false}\n                        format='HH:mm'\n                        minuteStep={15}\n                        onChange={this.startTimeChange}\n                        locale={locale}\n                        inputReadOnly={true}\n                      />\n                    </RLFormItem>\n                  </div>\n                </RLFormItem>}\n                {this.meetingId && <RLFormItem label={this.createLabel('开始时间', true)} colon={true}>\n                  <div>{this.state.editStart}</div>\n                </RLFormItem>}\n                {!this.meetingId && <RLFormItem label={this.createLabel('结束时间', true)} colon={true}>\n                  <div className='form-item-gropu'>\n                    <RLFormItem\n                      name='end_date'\n                      rules={[\n                        {\n                          required: true,\n                          message: '请选择结束日期'\n                        }, {\n                          validator: (rule, val) => {\n                            let { start_date, start_time, end_time } = this.appointForm.current.getFieldsValue(['start_date', 'start_time', 'end_time'])\n                            let startTime = moment(start_date.format('YYYY-MM-DD') + ' ' + start_time.format('HH:mm'))\n                            let endTime = moment(val.format('YYYY-MM-DD') + ' ' + end_time.format('HH:mm'))\n                            if (startTime >= endTime) {\n                              return Promise.reject('结束时间不能小于开始时间')\n                            }\n                            let msg = '会议时长不能超过24小时'\n                            let duration = endTime - startTime\n                            let maxDuration = 1000 * 60 * 60 * 24\n                            console.log('结束日期验证结果：', duration, maxDuration)\n                            if (duration > maxDuration) {\n                              return Promise.reject(msg)\n                            }\n                            return Promise.resolve()\n\n                          },\n                        }\n                      ]}\n                    >\n                      <RLDatePicker\n                        allowClear={false}\n                        disabledDate={this.endDisabledDate}\n                        locale={locale}\n                        inputReadOnly={true}\n                        onChange={() => {\n                          this.appointForm.current.validateFields(['end_time'])\n                        }}\n                      />\n                    </RLFormItem>\n                    <RLFormItem\n                      name='end_time'\n                      rules={[\n                        {\n                          required: true,\n                          message: '请选择结束时间'\n                        },\n                        {\n                          validator: (rule, val) => {\n                            let { start_date, start_time, end_date } = this.appointForm.current.getFieldsValue(['start_date', 'start_time', 'end_date'])\n                            let startTime = moment(start_date.format('YYYY-MM-DD') + ' ' + start_time.format('HH:mm'))\n                            let endTime = moment(end_date.format('YYYY-MM-DD') + ' ' + val.format('HH:mm'))\n                            let duration = endTime - startTime\n                            let maxDuration = 1000 * 60 * 60 * 24\n\n                            console.log('结束时间验证：', duration, maxDuration)\n                            if (startTime >= endTime) {\n                              return Promise.reject('')\n                            }\n                            if (duration > maxDuration) {\n                              return Promise.reject('')\n                            }\n                            return Promise.resolve()\n                          },\n                        }\n                      ]}\n                    >\n                      <RLDatePicker\n                        allowClear={false}\n                        showNow={false}\n                        picker='time'\n                        format='HH:mm'\n                        minuteStep={15}\n                        locale={locale}\n                        inputReadOnly={true}\n                        onChange={(e) => {\n                          this.appointForm.current.validateFields(['end_date'])\n                        }}\n                      />\n                    </RLFormItem>\n                  </div>\n                </RLFormItem>}\n                {this.meetingId && <RLFormItem label={this.createLabel('结束时间', true)} colon={true}>\n                  <div>{this.state.editEnd}</div>\n                </RLFormItem>}\n                {!this.meetingId && <RLFormItem label={this.createLabel('会议人数', true)} colon={true} >\n                  <div className='form-item-gropu'>\n                    <RLRadioGroup onChange={(e) => {\n                      this.setState({\n                        appointParam: {\n                          ...this.state.appointParam,\n                          max_user_limit: e.target.value\n                        }\n                      })\n                    }} items={config.meetingMaxNum} value={this.state.appointParam.max_user_limit} />\n                  </div>\n                </RLFormItem>}\n                {this.meetingId && <RLFormItem label={this.createLabel('会议人数', true)} colon={true} >\n                  <div>{this.state.appointParam.max_user_limit + '人'}</div>\n                </RLFormItem>}\n                {!this.meetingId && <RLFormItem label={this.createLabel('会议性质', true)} colon={true} >\n                  <div className='form-item-gropu'>\n                    <RLRadioGroup onChange={(e) => {\n                      this.setState({\n                        appointParam: {\n                          ...this.state.appointParam,\n                          meeting_type: e.target.value\n                        }\n                      }, () => {\n                        this.appointForm.current.validateFields(['user_list'])\n                      })\n                    }} items={config.meetingNature} value={this.state.appointParam.meeting_type} />\n                  </div>\n                </RLFormItem>}\n                {this.meetingId && <RLFormItem label={this.createLabel('会议性质', true)} colon={true} >\n                  <div>{this.state.appointParam.meeting_type == 1 ? '公开' : '非公开'}</div>\n                </RLFormItem>}\n                {!this.meetingId && <RLFormItem label='会议密码' colon={true} >\n                  <div className='form-item-gropu'>\n                    <RLFormItem\n                      name='is_password'\n                      valuePropName=\"checked\"\n                    >\n                      <RLCheckbox\n                        label='设置密码'\n                        onChange={(e) => {\n                          console.log(e.target.checked)\n                          this.setState({\n                            appointParam: {\n                              ...this.state.appointParam,\n                              is_password: e.target.checked,\n                              password: ''\n                            }\n                          }, () => {\n                            if (this.state.appointParam.is_password) {\n                              // console.log(this.refs)\n                              this.passwordInput.focus()\n                            }\n                          })\n                        }}\n                      />\n                      {/* checked={Number(this.state.appointParam.is_password) === 1} */}\n                    </RLFormItem>\n                    {\n                      Number(this.state.appointParam.is_password) === 1 && (\n                        <RLFormItem\n                          name='password'\n                          rules={[\n                            {\n                              required: true,\n                              message: '请输入会议密码'\n                            }, {\n                              pattern: /^\\d{4}$/,\n                              message: '请输入四位数字'\n                            }\n                          ]}\n                        >\n                          <RLInput\n                            ref={ref => this.passwordInput = ref}\n                            placeholder='请输入会议密码'\n                            maxLength={4}\n                            onChange={(e) => {\n                              let text = e.target.value\n                              text = text.replace(/[^\\d]/g, '')\n                              console.log(text);\n                              this.setState({\n                                appointParam: {\n                                  ...this.state.appointParam,\n                                  password: text\n                                }\n                              })\n                            }}\n                            type={'number'}\n                            value={this.state.appointParam.password}\n                          />\n                        </RLFormItem>\n                      )\n                    }\n                  </div>\n                </RLFormItem>}\n                {this.meetingId && <RLFormItem label='会议密码' colon={true} >\n                  {this.state.appointParam.password ? this.state.appointParam.password : '无'}\n                </RLFormItem>}\n                <RLFormItem label='指定主持人' colon={true} >\n                  <div className='form-item-gropu' style={{\n                    flexDirection: 'column'\n                  }}>\n                    <div style={{\n                      display: 'flex',\n                      flexDirection: 'row'\n                    }}>\n                      <RLInput\n                        disabled\n                        placeholder='请添加主持人,必须是认证用户'\n                        style={{ width: 360 }}\n                        value={this.state.masterValue}\n                      />\n                      {(!this.meetingId || this.isExamine) && <RLButton\n                        label='添加'\n                        type='primary'\n                        onClick={this.addMaster}\n                        style={{ marginLeft: 20 }}\n                      />}\n                    </div>\n                    <p style={{\n                      fontSize: 12,\n                      color: '#999',\n                      marginTop: 10\n                    }}>您不在会议中时，该邀请成员优先成为主持人</p>\n                  </div>\n                </RLFormItem>\n                <RLFormItem colon={true} >\n                  <div className='form-item-gropu'>\n                    <RLCheckbox\n                      label='允许成员在主持人进会前加入会议'\n                      onChange={(e) => {\n                        console.log(e.target.checked)\n                        this.setState({\n                          appointParam: {\n                            ...this.state.appointParam,\n                            mustmaster: e.target.checked ? 1 : 0\n                          }\n                        })\n                      }} checked={this.state.appointParam.mustmaster === 1 ? true : false}\n                    />\n                  </div>\n                </RLFormItem>\n                <RLFormItem label={this.createLabel('参会人员名单', this.getUserListState())} colon={true}\n                  name='user_list'\n                  rules={[\n                    {\n                      validator: () => {\n                        if (this.state.appointParam.meeting_type == 0) {\n                          if (!this.state.userGroup.length && !this.state.phoneList.length) {\n                            if (this.isExamine) {\n                              if (this.state.appointParam.auditing == 2) {\n                                return Promise.resolve()\n                              } else {\n                                return Promise.reject('如果会议性质选择的是非公开会议，参会者名单是必填项')\n                              }\n                            } else {\n                              return Promise.reject('如果会议性质选择的是非公开会议，参会者名单是必填项')\n                            }\n                          } else {\n                            return Promise.resolve()\n                          }\n                        } else {\n                          return Promise.resolve()\n                        }\n                      }\n                    }\n                  ]}\n                >\n                  <div style={{ display: 'flex', flexDirection: 'column' }}>\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\n                      <RLButton\n                        label='添加用户'\n                        type='primary'\n                        onClick={this.addUser}\n                        style={{ width: 110, marginBottom: 15 }}\n                      />\n                      <RLButton\n                        label='添加固话'\n                        type='primary'\n                        onClick={this.addPhone}\n                        style={{ width: 110, marginBottom: 15, marginLeft: 20 }}\n                      />\n                      <RLButton\n                        label='导入报名用户'\n                        type='primary'\n                        onClick={this.props.addActivityUser}\n                        style={{ width: 130, marginBottom: 15, marginLeft: 20 }}\n                      />\n                    </div>\n                    <div className='form-item-gropu'>\n                      <div style={{\n                        width: 500,\n                        minHeight: 60,\n                        border: '1px solid rgb(220, 223, 230)',\n                        borderRadius: 3,\n                        display: 'flex',\n                        flexWrap: 'wrap',\n                        padding: '10px 10px 10px 10px',\n                        boxSizing: 'border-box',\n                        overflowY: 'scroll'\n                      }}>\n                        {this.state.userGroup.map(ele => {\n                          return <div style={{ height: 19, marginTop: 4 }} key={ele.id}>\n                            <RLTag label={ele.nickname} closable onClose={() => {\n                              let all = [...this.state.userGroup]\n                              let index = all.findIndex(clc => { return clc.id == ele.id });\n                              all.splice(index, 1);\n                              this.setState({\n                                userGroup: all\n                              }, () => {\n                                this.appointForm.current.validateFields(['user_list'])\n                              })\n                            }} />\n                          </div>\n                        })}\n                        {this.state.phoneList.map(ele => {\n                          return <div style={{ height: 19, marginTop: 4 }} key={ele.id}>\n                            <RLTag label={ele.number} closable onClose={() => {\n                              let all = [...this.state.phoneList]\n                              let index = all.findIndex(clc => { return clc.id === ele.id });\n                              all.splice(index, 1);\n                              this.setState({\n                                phoneList: all\n                              }, () => {\n                                this.appointForm.current.validateFields(['user_list'])\n                              })\n                            }} />\n                          </div>\n                        })}\n                      </div>\n                    </div>\n                  </div>\n                </RLFormItem>\n                <RLFormItem label='会议说明' colon={true} >\n                  <div className='form-item-gropu'>\n                    <RLTextarea style={{\n                      width: 500,\n                      border: 'none',\n                      resize: 'none'\n                    }}\n                      autoSize={{\n                        minRows: 2, maxRows: 6\n                      }}\n                      showCount\n                      maxLength={200} value={this.state.appointParam.description} onChange={e => {\n                        this.setState({\n                          appointParam: {\n                            ...this.state.appointParam,\n                            description: e.target.value\n                          }\n                        })\n                      }} />\n                  </div>\n                </RLFormItem>\n                <RLFormItem label='参会人员说明' colon={true} >\n                  <div className='form-item-gropu'>\n                    <RLTextarea style={{\n                      width: 500,\n                      border: 'none',\n                      resize: 'none'\n                    }}\n                      autoSize={{\n                        minRows: 2, maxRows: 6\n                      }}\n                      showCount\n                      maxLength={200} value={this.state.appointParam.participants_description} onChange={e => {\n                        this.setState({\n                          appointParam: {\n                            ...this.state.appointParam,\n                            participants_description: e.target.value\n                          }\n                        })\n                      }} />\n                  </div>\n                </RLFormItem>\n                <RLFormItem label={this.createLabel('是否推广', true)} colon={true} >\n                  <div className='form-item-gropu'>\n                    <RLRadioGroup onChange={(e) => {\n                      this.setState({\n                        appointParam: {\n                          ...this.state.appointParam,\n                          popularize: e.target.value\n                        }\n                      })\n                    }} items={config.meetingExtend} value={this.state.appointParam.popularize} />\n                  </div>\n                </RLFormItem>\n                <RLFormItem label='机构授权材料' colon={true} >\n                  <div className='form-item-gropu' style={{\n                    flexDirection: 'column'\n                  }}>\n                    <div style={{\n                      display: 'flex',\n                      flexDirection: 'row'\n                    }}>\n                      <RLInput\n                        disabled\n                        style={{ width: 360 }}\n                        value={this.state.appointParam.material}\n                      />\n                      <Upload accept=\n                        \".png,.jpg,.pdf,.doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                        customRequest={(upload) => {\n                          let fileType = getFileTile(upload.file.name);\n                          if (fileType !== 'doc' &&\n                            fileType !== 'docx' && fileType !== 'xls' &&\n                            fileType !== 'xlsx' && fileType !== 'pdf' &&\n                            fileType !== 'png' && fileType !== 'jpg') {\n                            this.showToast({ type: 'error', content: '上传文件格式不对' })\n                            return\n                          }\n                          let formData = new FormData();\n                          if (upload.file.type.indexOf('image') !== -1) {\n                            formData.append('type', 'picture')\n                          } else {\n                            formData.append('type', 'doc')\n                          }\n                          formData.append('resource', upload.file);\n                          commonActions.fileUpload(formData).then(res => {\n                            this.setState({\n                              appointParam: {\n                                ...this.state.appointParam,\n                                material: res.data.fileurl\n                              }\n                            })\n                          })\n                        }}\n                        showUploadList={false}\n                      >\n                        <RLButton\n                          label='上传文件'\n                          type='primary'\n                          onClick={this.getMeetingList}\n                          style={{ marginLeft: 20 }}\n                        />\n                      </Upload>\n                    </div>\n                    <p style={{\n                      fontSize: 12,\n                      color: '#999',\n                      marginTop: 10\n                    }}>支持doc/docx/xls/xlsx/pdf/png/jpg格式</p>\n                  </div>\n                </RLFormItem>\n                <RLFormItem label='文档' colon={true}>\n                  <Upload\n                    accept=\".doc,.docx,.xls,.xlsx,.ppt,.pptx,.pdf\"\n                    showUploadList={false}\n                    className=\"in-job-upload\"\n                    customRequest={(upload) => {\n                      console.log('media-upload--file:', upload)\n                      const fileType = upload.file && upload.file.name   // 文件类型\n                      if (fileType) {\n                        let type = fileType.split('.').pop()\n                        console.log('-----文档类型-----', type);\n                        if (type != 'doc' && type != 'docx' && type != 'xls' && type != 'xlsx' && type != 'ppt' && type != 'pptx' && type != 'pdf') return this.showToast({ content: '文件格式不支持', type: 'error' })\n                      }\n                      this.documentUpload(upload)\n                    }}\n                    fileList={[]}\n                    maxCount={1}\n                    onRemove={() => { }\n                    }>\n                    {!this.state.showUpDoc ? <RLButton\n                      label='添加文档'\n                      type='primary'\n                    /> : <p style={{\n                      fontSize: 12,\n                      color: '#999',\n                      marginTop: 10\n                    }}>正在上传...</p>}\n                    <p style={{\n                      fontSize: 12,\n                      color: '#999',\n                      marginTop: 10\n                    }}>支持doc/docx、xls/xlsx、ppt/pptx、pdf格式</p>\n                  </Upload>\n                  <RLdocument\n                    fileList={this.state.fileList}\n                    docDelete={this.docDelete} />\n                </RLFormItem>\n                {/* {!this.isExamine ? <RLFormItem colon={true} >\n                  <div className='form-item-gropu'>\n                    <RLCheckbox\n                      label='在线会议服务免责声明'\n                      onChange={(e) => {\n                        this.setState({\n                          disclaimer: e.target.checked\n                        })\n                      }} checked={this.state.disclaimer}\n                    />\n                  </div>\n                </RLFormItem> : null} */}\n                {this.isExamine && <RLFormItem label={this.createLabel('会议审核', false, { fontWeight: 'bold' })} colon={true} >\n                  <div className='form-item-gropu'>\n                    <RLRadioGroup onChange={(e) => {\n                      this.setState({\n                        appointParam: {\n                          ...this.state.appointParam,\n                          auditing: e.target.value\n                        }\n                      }, () => {\n                        this.appointForm.current.validateFields(['user_list'])\n                      })\n                    }} items={config.meetingExamine} value={this.state.appointParam.auditing} />\n                  </div>\n                </RLFormItem>}\n                {this.isExamine && < RLFormItem label={this.createLabel('审核详情', false, { fontWeight: 'bold' })} colon={true} >\n                  <div className='form-item-gropu'>\n                    <RLTextarea style={{\n                      width: 500,\n                      height: 170,\n                      resize: 'none'\n                    }} maxLength={200} value={this.state.appointParam.aud_desc} onChange={e => {\n                      this.setState({\n                        appointParam: {\n                          ...this.state.appointParam,\n                          aud_desc: e.target.value\n                        }\n                      })\n                    }} />\n                  </div>\n                </RLFormItem>}\n                <div style={{ width: '100%', display: 'flex', flex: 1, justifyContent: 'center' }}>\n                  <RLButton\n                    type=\"default\"\n                    label='取消'\n                    width={80}\n                    onClick={() => {\n                      this.props.closeCreat()\n                    }}\n                  />\n                  <RLButton type=\"primary\"\n                    htmlType=\"submit\"\n                    label={this.meetingId ? (this.isExamine ? '确认' : '保存') : '创建'}\n                    style={{ marginLeft: 40 }}\n                    width={80}\n                    loading={this.state.submitLoading}\n                    disabled={this.state.disclaimer}\n                  />\n                </div>\n\n                {/* </RLFormItem> */}\n              </RLForm>\n            </RLDisplayBoard>\n          </div>\n        </WindowContainer >\n      </div >\n    );\n  }\n}\n\nexport default connect((store, props) => {\n  return {\n    ...props,\n    accountType: store.storeCommon.accountType\n  }\n})(Appointment)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/MeetingDetail.js",["1152","1153","1154","1155","1156","1157","1158","1159","1160","1161","1162","1163"],"import React from 'react';\nimport {\n    RLButton,\n    RLDisplayBoard,\n    RLTag\n} from '@components/index.js'\nimport { Tooltip } from 'antd'\nimport WindowContainer from '@components/WindowContainer.js'\nimport actionMeeting from '@actions/meetingManage/actionMeeting.js'\nimport BaseCmp from '@components/BaseCmp.js'\nimport { connect } from 'react-redux';\nimport utils, { dealTableTime } from '@/libs/utils.js'\nimport './MeetingDetail.less'\nimport RLdocument from '@components/document/RLDocument.js'\n\nclass MeetingDetail extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.urlParam = props\n        this.meetingId = this.urlParam.meetingId\n        this.state = {\n            meetingDetail: {\n                title: '',\n                start_time_at: '',\n                end_time_at: '',\n                max_user_limit: '',\n                meeting_type: '',\n                password: '',\n                description: '',\n                participants_description: '',\n                host: '',\n                record_users: '',\n                popularize: '',\n                material: '',\n                mustmaster: '',\n                status: '',\n                auditing: '',\n                userList: [],\n                fileList: []\n            }\n        }\n\n    }\n    componentDidMount() {\n        this.getMeetingDetail(this.meetingId)\n    }\n    getMeetingDetail = (meetingId) => {\n        actionMeeting.getMeetingDetail(meetingId).then(res => {\n            if (res.code !== 200) {\n                this.showToast({ type: 'error', content: '获取会议详情失败' })\n            } else {\n                let info = res.data;\n                let data = {};\n                let status = '';\n                let auditing = '';\n                if (info.meeting.status == 3) {\n                    status = '已结束'\n                } else if (info.meeting.status == 2) {\n                    status = '已开始'\n                } else if (info.meeting.status == 1) {\n                    status = '进行中'\n                } else {\n                    status = '未开始'\n                }\n                if (info.meeting.auditing == 3) {\n                    auditing = '撤销'\n                } else if (info.meeting.auditing == 2) {\n                    auditing = '审批没通过'\n                } else if (info.meeting.auditing == 1) {\n                    auditing = '审批通过'\n                } else {\n                    auditing = '审批中'\n                }\n                data = {\n                    meeting_id: info.meeting.meeting_id,\n                    room: info.meeting.room,\n                    title: info.meeting.title,\n                    start_time_at: dealTableTime(info.meeting.start_time_at),\n                    end_time_at: dealTableTime(info.meeting.end_time_at),\n                    max_user_limit: info.meeting.max_user_limit + '人',\n                    meeting_type: info.meeting.meeting_type == 1 ? '公开' : '非公开',\n                    password: info.meeting.password ? info.meeting.password : '无',\n                    description: info.meeting.description,\n                    participants_description: info.meeting.participants_description,\n                    host: info.host.nickname,\n                    record_users: '',\n                    popularize: info.meeting.popularize == 1 ? '是' : '不是',\n                    material: info.meeting.material,\n                    mustmaster: info.meeting.mustmaster == 1 ? '允许在主持人之前入会' : '不允许在主持人之前入会',\n                    status, auditing,\n                    user_list: info.user_list,\n                    phone_list: info.phone_list,\n                    fileList: info.doc_list.map(i => {\n                        return {\n                            id: i.id,\n                            title: i.title + '.' + i.suffix,\n                            doc_url: i.url,\n                            lid: i.id,\n                            size: '',\n                            is_me: i.is_me\n                        }\n                    })\n                }\n                this.setState({\n                    meetingDetail: {\n                        ...data\n                    }\n                })\n            }\n        })\n    }\n    pageTitle = () => {\n        return (\n            <div className=\"custom-page-title\">\n                <span>会议详情</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.closeDetail()\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n    render() {\n        let valueBtnStyle = {\n            flex: 10,\n            display: 'flex',\n            flexDirection: 'row'\n        }\n        let labelStyle = {\n            color: '#999',\n            fontSize: 14,\n            textAlign: 'left',\n            width: 56,\n            flex: 'none'\n        }\n        let valueStyle = {\n            color: '#333',\n            fontSize: 14\n        }\n        let basicBoxStyle = {\n            width: 500,\n            height: 200,\n            border: '1px solid rgb(220, 223, 230)',\n            borderRadius: 3,\n            padding: '10px 10px 10px 10px',\n            boxSizing: 'border-box'\n        }\n        let meetingInfo = [\n            {\n                list: [\n                    {\n                        label: '会议主题',\n                        value: this.state.meetingDetail.title,\n                        labelStyle,\n                        valueStyle,\n                    },\n                    {\n                        label: '会议号',\n                        labelStyle,\n                        valueStyle,\n                        value: <div style={valueBtnStyle}>\n                            <div style={valueStyle}>{this.state.meetingDetail.room != 0 ? this.state.meetingDetail.room : '——'}</div>\n                            {this.state.meetingDetail.room != 0 ? <Tooltip title=\"点击复制\">\n                                <img\n                                    alt=''\n                                    style={{ marginLeft: 10, height: 24, width: 24, cursor: 'pointer' }}\n                                    src={require('../../../assets/images/copy.png').default} onClick={() => {\n                                        utils.copy(this.state.meetingDetail.room, () => {\n                                            alert(this.state.meetingDetail.room);\n                                            this.showToast({ type: 'success', content: '复制成功' })\n                                        })\n\n                                    }}\n                                />\n                            </Tooltip> : null}\n                        </div>\n                    },\n                    {\n                        label: '开始时间',\n                        labelStyle,\n                        valueStyle,\n                        value: this.state.meetingDetail.start_time_at\n                    },\n                    {\n                        label: '结束时间',\n                        labelStyle,\n                        valueStyle,\n                        value: this.state.meetingDetail.end_time_at\n                    },\n                    {\n                        label: '会议人数限制',\n                        labelStyle,\n                        valueStyle,\n                        value: this.state.meetingDetail.max_user_limit\n                    },\n                    {\n                        label: '会议性质',\n                        labelStyle,\n                        valueStyle,\n                        value: this.state.meetingDetail.meeting_type\n                    },\n                    {\n                        label: '会议密码',\n                        labelStyle,\n                        valueStyle,\n                        value: this.state.meetingDetail.password\n                    },\n                    {\n                        label: '主持人',\n                        labelStyle,\n                        valueStyle,\n                        value: this.state.meetingDetail.host\n                    },\n                    {\n                        label: '参会人员名单',\n                        labelStyle,\n                        valueStyle,\n                        value: ((this.state.meetingDetail.user_list && this.state.meetingDetail.user_list.length) || (this.state.meetingDetail.phone_list && this.state.meetingDetail.phone_list.length)) ? <div style={{\n                            display: 'flex',\n                            flexWrap: 'wrap',\n                            width: 500,\n                            minHeight: 60,\n                            maxHeight: 150,\n                            padding: '10px 10px 10px 10px',\n                            boxSizing: 'border-box',\n                            overflowY: 'scroll'\n                        }}>\n                            {this.state.meetingDetail.user_list ? this.state.meetingDetail.user_list.map(ele => {\n                                return <div style={{ height: 19, marginTop: 4 }} key={ele.uid}><RLTag label={ele.nickname} /></div>\n                            }) : null}\n                            {\n                                this.state.meetingDetail.phone_list ? this.state.meetingDetail.phone_list.map(ele => {\n                                    return <div style={{ height: 19, marginTop: 4 }} key={ele.uid}><RLTag label={ele.number} /></div>\n                                }) : null\n                            }\n                        </div> : '未添加'\n                    },\n                    {\n                        label: '会议说明',\n                        labelStyle,\n                        valueStyle,\n                        value: this.state.meetingDetail.description ? <div style={{\n                            display: 'flex',\n                            flexWrap: 'wrap',\n                            width: 500,\n                            minHeight: 60,\n                            maxHeight: 150,\n                            padding: '10px 10px 10px 10px',\n                            boxSizing: 'border-box',\n                            overflowY: 'scroll'\n                        }}>\n                            <p>{this.state.meetingDetail.description}</p>\n                        </div> : '未填写'\n                    },\n                    {\n                        label: '参会者说明',\n                        labelStyle,\n                        valueStyle,\n                        value: this.state.meetingDetail.participants_description ? <div style={{\n                            display: 'flex',\n                            flexWrap: 'wrap',\n                            width: 500,\n                            minHeight: 60,\n                            maxHeight: 150,\n                            padding: '10px 10px 10px 10px',\n                            boxSizing: 'border-box',\n                            overflowY: 'scroll'\n                        }}>\n                            <p>{this.state.meetingDetail.participants_description}</p>\n                        </div> : '未填写'\n                    },\n                    {\n                        label: '是否推广',\n                        labelStyle,\n                        valueStyle,\n                        value: this.state.meetingDetail.popularize\n                    },\n                    {\n                        label: '材料地址',\n                        labelStyle,\n                        valueStyle,\n                        value: this.state.meetingDetail.material ? this.state.meetingDetail.material : '未上传'\n                    },\n                    {\n                        label: '文档',\n                        labelStyle,\n                        valueStyle,\n                        value: this.state.meetingDetail.fileList && this.state.meetingDetail.fileList.length ? <RLdocument\n                            fileList={this.state.meetingDetail.fileList}\n                            isDetail={true} /> : '未上传'\n                    },\n                    {\n                        label: '会议状态',\n                        labelStyle,\n                        valueStyle,\n                        value: this.state.meetingDetail.status\n                    },\n                    {\n                        label: '会议审核状态',\n                        labelStyle,\n                        valueStyle,\n                        value: this.state.meetingDetail.auditing\n                    }\n                ]\n            }\n        ]\n        return (\n            <div className=\"floatBox\">\n                <WindowContainer title={this.pageTitle} className='my-meeting-detail'>\n                    <RLDisplayBoard\n                        style={{ width: '100%', flex: 1 }}\n                        labelCol={2}\n                        valueCol={10}\n                        spaceWidth={20}\n                        className='meeting-info'\n                        items={meetingInfo}>\n                    </RLDisplayBoard>\n                </WindowContainer>\n            </div>\n\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props\n    }\n})(MeetingDetail);","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/myMeeting/actionPersonalMeeting.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/myMeeting/meetingList/component/CmpMeetingList.js",["1164","1165"],"import { Component, forwardRef } from 'react';\nimport { connect } from 'react-redux';\nimport UpcomingMeeting from '@/pages/common/meeting/UpcomingMeeting.js';\nimport CurrentMeeting from '@/pages/common/meeting/CurrentMeeting.js';\nimport HistoryMeeting from '@/pages/common/meeting/HistoryMeeting.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { RLTabs } from '@components/index.js'\n\n// import utils from '@/libs/utils.js'\nimport BaseCmp from '@components/BaseCmp.js'\n\nclass CmpMeeingList extends BaseCmp {\n    constructor(props) {\n        super(props);\n        this.state = {\n            defaultTabKey: props.tabKey ? props.tabKey : 'upcoming'\n        };\n\n    }\n    render() {\n        let tabPanes = [\n            {\n                tab: '即将举行的会议',\n                id: 'upcoming',\n            },\n            {\n                tab: '实时会议',\n                id: 'current',\n            },\n            {\n                tab: '已结束的会议',\n                id: 'history',\n            }\n        ]\n        if (this.props.accountType === 'personal') {\n            if (this.props.userInfo.target_type && this.props.userInfo.target_type[0]) {\n                let targetType = this.props.userInfo.target_type[0].target_type\n                if (targetType === 'basicset') {\n                    tabPanes.splice(1, 1)\n                }\n            }\n        }\n        return (\n            <WindowContainer title='会议列表'>\n                <div className=\"page-meetinglist\">\n                    <RLTabs\n                        onChange={(key) => {\n                            console.log('tab:', key);\n                            this.setState({\n                                defaultTabKey: key\n                            })\n                        }}\n                        tabPanes={tabPanes}\n                        defaultActiveKey={this.state.defaultTabKey}\n                    />\n                    {\n                        (() => {\n                            if (this.state.defaultTabKey === 'upcoming') {\n                                return <UpcomingMeeting\n                                    history={this.props.history}\n                                    changePage={this.props.changePage}\n                                    pageType={'mine'}\n                                />\n                            } else if (this.state.defaultTabKey === 'current') {\n                                return <CurrentMeeting\n                                    history={this.props.history}\n                                    changePage={this.props.changePage}\n                                    pageType={'mine'}\n                                />\n                            } else if (this.state.defaultTabKey === 'history') {\n                                return <HistoryMeeting\n                                    history={this.props.history}\n                                    changePage={this.props.changePage}\n                                    pageType={'mine'}\n                                />\n                            }\n                        })()\n                    }\n                </div>\n            </WindowContainer>\n\n        )\n    }\n}\n\nexport default connect((store, props) => {\n    return {\n        ...props,\n        accountType: store.storeCommon.accountType,\n        userInfo: store.personalInfo.userInfo,\n    }\n})(CmpMeeingList);","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/seminar/mySeminar/MySeminar.js",["1166","1167","1168","1169"],"import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { PageHeaderWrapper } from '@ant-design/pro-layout';\nimport { Tabs, Button, message } from 'antd';\nimport SeminarList from './components/SeminarList.js';\nimport SeminarDetail from './components/SeminarDetail.js';\nimport SeminarEdit from './components/SeminarEdit.js';\nconst { TabPane } = Tabs;\n\nclass MySeminar extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            /**\n             * list:        研讨会列表\n             * detail:      研讨会详情\n             * edit:        编辑/添加研讨会\n            \n            */\n            showPage: 'list',\n            props\n        };\n    }\n\n    changePage = (page, props = {}) => {\n        this.setState({\n            showPage: page,\n            props\n        })\n    }\n    render() {\n        let showCmp\n        if (this.state.showPage === 'list') {\n            showCmp = <SeminarList\n                changePage={this.changePage}\n                {...this.state.props}\n                pageType={this.pageType}\n            />\n        } else if (this.state.showPage === 'detail') {\n            showCmp = <SeminarDetail\n                changePage={this.changePage}\n                {...this.state.props}\n                pageType={this.pageType}\n            />\n        } else if (this.state.showPage === 'edit') {\n            showCmp = <SeminarEdit\n                changePage={this.changePage}\n                {...this.state.props}\n                pageType={this.pageType}\n            />\n        }\n        return (\n            <div style={{ flex: 1, display: 'flex', flexDirection: 'column', overflow: 'auto' }}>\n                {showCmp}\n            </div>\n        )\n    }\n\n}\n\nexport default connect((store, props) => {\n    return {\n        ...props,\n    }\n})(MySeminar);","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/PrivateRoute.js",["1170","1171","1172"],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/ExamineDetail.js",["1173","1174","1175","1176","1177"],"import BaseCmp from '@components/BaseCmp.js'\nimport { RLModal, RLTable } from '@components/index.js'\nimport actionMeeting from '@actions/meetingManage/actionMeeting.js';\nimport actionSeminar from '@actions/seminar/actionSeminar.js';\nimport { dealTableTime } from '@/libs/utils'\nclass ExamineDetail extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.state = {\n            user: {\n                pageNum: 1,  // 总叶数\n                count: 1,    // 总条数\n                list: [],    // 数据数组\n                page: 1,     // 当前第几页\n            }\n        }\n    }\n    componentDidMount() {\n        this.getDetail()\n    }\n    getRowColumns() {\n        let columns = [{\n            title: '审核员',\n            dataIndex: 'nickname',\n            key: 'nickname',\n            width: '20%',\n        },\n        {\n            title: '审核时间',\n            key: 'create_at',\n            width: '30%',\n            render: (record) => {\n                return <div>\n                    {dealTableTime(record.create_at)}\n                </div>\n            },\n        },\n        {\n            title: '审核结果',\n            key: 'auditing',\n            width: '20%',\n            render(record) {\n                if (record.auditing == 1) {\n                    return <div>\n                        已通过\n                    </div>\n                } else if (record.auditing == 2) {\n                    return <div>\n                        已拒绝\n                    </div>\n                } else if (record.auditing == 3) {\n                    return <div>\n                        撤销\n                    </div>\n                } else {\n                    return <div>\n                        审批中\n                    </div>\n                }\n            },\n        },\n        {\n            title: '审核详情',\n            dataIndex: 'aud_desc',\n            key: 'aud_desc',\n            width: '30%',\n        }]\n        return columns\n    }\n    getDetail() {\n        if (this.props.isLive) {\n            actionSeminar.getExamineResult({ meeting_id: this.props.meetingId }).then(res => {\n                if (res.code == 200) {\n                    let newState = {\n                        user: {\n                            list: [{ ...res.data }],\n                            page: 1,\n                            count: 1,\n                            pageNum: Math.ceil(1 / 10)\n                        }\n                    }\n                    this.setState({\n                        user: newState.user\n                    })\n                } else {\n                    this.showToast({ type: 'error', content: '获取会议详情失败' })\n                }\n            })\n        } else {\n            actionMeeting.getExmineDetail({ meeting_id: this.props.meetingId }).then(res => {\n                if (res.code == 200) {\n                    let newState = {\n                        user: {\n                            list: [{ ...res.data }],\n                            page: 1,\n                            count: 1,\n                            pageNum: Math.ceil(1 / 10)\n                        }\n                    }\n                    this.setState({\n                        user: newState.user\n                    })\n                } else {\n                    this.showToast({ type: 'error', content: '获取会议详情失败' })\n                }\n            })\n        }\n\n    }\n    render() {\n        return <RLModal\n            visible={true}\n            title='审核详情'\n            footer={null}\n            onCancel={() => {\n                this.props.closeExamineDetail && this.props.closeExamineDetail()\n            }}\n        >\n            <RLTable\n                columns={this.getRowColumns()}\n                dataSource={this.state.user.list}\n                rowKey='auditing_uid'\n            />\n        </RLModal>\n    }\n}\nexport default ExamineDetail","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/meetingManage/myMeeting/MyMeeting.js",["1178"],"import BaseCmp from '@components/BaseCmp.js'\nimport { connect } from 'react-redux'\nimport MemberManage from '@/pages/common/meeting/MemberManage.js'\nimport MeetingDetail from '@/pages/common/meeting/MeetingDetail.js'\nimport CmpMeetingList from '@/pages/common/listManage/CmpMeetingList.js'\nimport Appointment from '@/pages/common/meeting/Appointment.js'\nimport AddUser from '@/pages/common/meeting/AddUser.js'\nimport DocumentDetail from '@/components/document/DocumentDetail.js'\nimport actionMeeting from '@actions/meetingManage/actionMeeting.js'\nimport interfaces from '../../../api/interfaces.js'\nimport AddPhone from '@/pages/common/meeting/AddPhone.js'\nimport AddActivityUser from '@/pages/common/meeting/AddActivityUser.js'\nclass MyMeeting extends BaseCmp {\n    constructor(props) {\n        super(props);\n        this.tabPanes = [\n            {\n                tab: '即将开始的会议',\n                id: 'upcoming',\n            },\n            {\n                tab: '实时会议',\n                id: 'current',\n            },\n            {\n                tab: '已结束的会议',\n                id: 'history',\n            }\n        ]\n        this.state = {\n            showPage: 'list',     // 要现实的页面appoint：预约会议/detail：会议详情/list：会议列表\n            props,\n            isShowMemberManage: false,\n            isShowCreateMeeting: false,\n            isShowMeetingDetail: false,\n            isShowDocumentsDetail: false,\n            addUser: false,\n            tempRoom: undefined,\n            addUserConfig: {\n                showSelectGroup: true,\n                selectType: 'checkbox',\n                originArr: [],\n                originCanCancel: true,\n                returnStyle: 'object',\n                successFunName: ''\n            },\n            // 添加固话\n            addPhone: false,\n            addPhoneConfig: {\n                showSelectGroup: true,\n                selectType: 'checkbox',\n                originArr: [],\n                originCanCancel: true,\n                returnStyle: 'object',\n                successFunName: ''\n            },\n            // 导入报名用户\n            addActivityUser: false\n        };\n    }\n    closeMember = () => {\n        this.setState({\n            isShowMemberManage: false\n        });\n        this.refeshAndhttp()\n    }\n    closeCreat = () => {\n        this.setState({\n            isShowCreateMeeting: false\n        })\n    }\n    closeDetail = () => {\n        this.setState({\n            isShowMeetingDetail: false\n        })\n    }\n    changeMeetingMaster = (data) => {\n        this.appointment && this.appointment.setHost(data)\n    }\n    changePage = (page, props = {}) => {\n        if (page === 'memberManage') {\n            this.setState({\n                isShowMemberManage: true,\n                props\n            })\n            return\n        } else if (page === 'createMeeting') {\n            this.setState({\n                isShowCreateMeeting: true,\n                props\n            })\n            return\n        } else if (page === 'detail') {\n            this.setState({\n                isShowMeetingDetail: true,\n                props\n            })\n            return\n        } else if (page === 'edit') {\n            this.setState({\n                isShowCreateMeeting: true,\n                props\n            })\n            return\n        }\n        this.setState({\n            showPage: page,\n            props\n        })\n    }\n    addSuccess = (data) => {\n        if (this.state.addUserConfig.successFunName === 'changeMeetingMaster') {\n            this.changeMeetingMaster(data)\n        } else if (this.state.addUserConfig.successFunName === 'changeVisit') {\n            this.appointment && this.appointment.setVisitor(data)\n        } else if (this.state.addUserConfig.successFunName === 'listAddUser') {\n            let arr = [];\n            data.forEach(ele => {\n                arr.push(ele.id)\n            })\n            arr = arr.join(',')\n            actionMeeting.listInviteUser({\n                meeting_id: this.state.meetingId,\n                uids: arr,\n                type: 3\n            }).then(res => {\n                if (res.code == 200) {\n                    this.showToast({ type: 'success', content: '邀请成功' })\n                }\n            })\n        }\n    }\n    addPhoneSuccess = (data) => {\n        if (this.state.addPhoneConfig.successFunName === 'changeVisit') {\n            this.appointment && this.appointment.setPhone(data)\n        }\n    }\n    addActUserSuccess = (data) => {\n        this.appointment && this.appointment.setActUser(data)\n    }\n    refeshAndhttp = () => {\n        this.cmpMeetingList.refesh()\n    }\n    listAddUser = (meetingId) => {\n        if (!interfaces.USER_LIST) {\n            this.showToast({ type: 'error', content: '您当前没有此权限' });\n            return\n        }\n        this.setState({\n            meetingId\n        })\n        actionMeeting.getMeetingDetail(meetingId).then(res => {\n            if (res.code !== 200) {\n                this.showToast({ type: 'error', content: '获取会议详情失败' });\n                return\n            }\n            const data = res.data;\n            let userList = data.user_list.map(ele => {\n                return { ...ele }\n            })\n            this.setState({\n                addUser: true,\n                addUserConfig: {\n                    ...this.state.addUserConfig,\n                    showSelectGroup: true,\n                    selectType: 'checkbox',\n                    originArr: userList,\n                    originCanCancel: false,\n                    returnStyle: 'object',\n                    successFunName: 'listAddUser'\n                }\n            })\n        })\n    }\n    showDoc = (res) => {\n        this.setState({\n            isShowDocumentsDetail: true,\n            tempRoom: res\n        })\n    }\n    render() {\n        let showCmp;\n        let isDetail = undefined    //展示用户详情\n        let isMemberManage = undefined  //展示会控管理 \n        let isCreateMeeting = undefined   //展示创建会议\n        if (this.state.showPage === 'list') {\n            showCmp = <CmpMeetingList\n                changePage={this.changePage}\n                {...this.state.props}\n                tabPanes={this.tabPanes}\n                isMyMeeting={true}\n                onRef={e => this.cmpMeetingList = e}\n                showDoc={this.showDoc}\n                listAddUser={(res) => {\n                    this.listAddUser(res);\n                }}\n            />\n        }\n        isMemberManage = <MemberManage closeMember={this.closeMember} {...this.state.props} />\n        isCreateMeeting = <Appointment\n            closeCreat={this.closeCreat}\n            onRef={e => this.appointment = e}\n            {...this.state.props}\n            addMaster={(res) => {\n                if (!interfaces.USER_LIST) {\n                    this.showToast({ type: 'error', content: '您当前没有此权限' });\n                    return\n                }\n                this.setState({\n                    addUser: true,\n                    addUserConfig: {\n                        ...this.state.addUserConfig,\n                        ...res\n                    }\n                })\n            }}\n            addPhone={(res) => {\n                if (!interfaces.PHONE_LIST) {\n                    this.showToast({ type: 'error', content: '您当前没有此权限' });\n                    return\n                }\n                this.setState({\n                    addPhone: true,\n                    addPhoneConfig: {\n                        ...this.state.addPhoneConfig,\n                        ...res\n                    }\n                })\n            }}\n            addActivityUser={(res) => {\n                if (!interfaces.EVENT_LIST) {\n                    this.showToast({ type: 'error', content: '您当前没有此权限' });\n                    return\n                }\n                this.setState({\n                    addActivityUser: true\n                })\n            }}\n            refeshAndhttp={this.refeshAndhttp}\n        />\n        isDetail = <MeetingDetail closeDetail={this.closeDetail} {...this.state.props} />\n        return (\n            <div style={{ position: 'relative', width: '100%', height: '100%' }}>\n                {this.state.isShowMemberManage ? isMemberManage : null}\n                {this.state.isShowCreateMeeting ? isCreateMeeting : null}\n                {this.state.isShowMeetingDetail ? isDetail : null}\n                {this.state.isShowDocumentsDetail ?\n                    <DocumentDetail\n                        room={this.state.tempRoom}\n                        closeDoc={() => {\n                            this.setState({\n                                isShowDocumentsDetail: false,\n                                tempRoom: undefined\n                            })\n                        }}\n                    /> : null}\n                {showCmp}\n                {this.state.addUser ? <AddUser\n                    visible={true}\n                    showSelectGroup={this.state.addUserConfig.showSelectGroup}\n                    selectType={this.state.addUserConfig.selectType}\n                    originArr={this.state.addUserConfig.originArr}\n                    originCanCancel={this.state.addUserConfig.originCanCancel}\n                    returnStyle={this.state.addUserConfig.returnStyle}\n                    mustIdent={this.state.addUserConfig.mustIdent}\n                    onCancel={() => {\n                        this.setState({\n                            addUser: false\n                        })\n                    }}\n                    onAdd={(data) => {\n                        console.log(data);\n                        console.log('回传数据')\n                        this.addSuccess(data)\n                    }}\n                /> : null}\n                {this.state.addPhone ? <AddPhone\n                    visible={true}\n                    showSelectGroup={this.state.addPhoneConfig.showSelectGroup}\n                    selectType={this.state.addPhoneConfig.selectType}\n                    originArr={this.state.addPhoneConfig.originArr}\n                    originCanCancel={this.state.addPhoneConfig.originCanCancel}\n                    returnStyle={this.state.addPhoneConfig.returnStyle}\n                    onCancel={() => {\n                        this.setState({\n                            addPhone: false\n                        })\n                    }}\n                    onAdd={(data) => {\n                        console.log(data);\n                        console.log('回传数据')\n                        this.addPhoneSuccess(data)\n                    }}\n                /> : null}\n                {this.state.addActivityUser ? <AddActivityUser\n                    visible={true}\n                    onCancel={() => {\n                        this.setState({\n                            addActivityUser: false\n                        })\n                    }}\n                    onAdd={(data) => {\n                        console.log(data);\n                        console.log('回传数据')\n                        this.addActUserSuccess(data)\n                    }}\n                /> : null}\n            </div>\n        )\n    }\n\n}\nexport default connect((store, props) => {\n    return {\n        ...props,\n    }\n})(MyMeeting)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/meetingManage/meetingDocument/MeetingDocument.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/meetingManage/meetingManage/MeetingManage.js",["1179"],"import BaseCmp from '@components/BaseCmp.js'\nimport { connect } from 'react-redux'\nimport MemberManage from '@/pages/common/meeting/MemberManage.js'\nimport MeetingDetail from '@/pages/common/meeting/MeetingDetail.js'\nimport CmpMeetingList from '@/pages/common/listManage/CmpMeetingList.js'\nimport Appointment from '@/pages/common/meeting/Appointment.js'\nimport AddUser from '@/pages/common/meeting/AddUser.js'\nimport actionMeeting from '@actions/meetingManage/actionMeeting.js'\nimport interfaces from '../../../api/interfaces.js'\nimport AddPhone from '@/pages/common/meeting/AddPhone.js'\nimport AddActivityUser from '@/pages/common/meeting/AddActivityUser.js'\n\nclass MeetingManage extends BaseCmp {\n    constructor(props) {\n        super(props);\n        this.tabPanes = [\n            {\n                tab: '即将开始的会议',\n                id: 'upcoming',\n            },\n            {\n                tab: '实时会议',\n                id: 'current',\n            },\n            {\n                tab: '已结束的会议',\n                id: 'history',\n            }\n        ]\n        this.state = {\n            showPage: 'list',     // 要现实的页面appoint：预约会议/detail：会议详情/list：会议列表\n            props,\n            isShowMemberManage: false,\n            isShowCreateMeeting: false,\n            isShowMeetingDetail: false,\n            addUser: false,\n            addUserConfig: {\n                showSelectGroup: true,\n                selectType: 'checkbox',\n                originArr: [],\n                originCanCancel: true,\n                returnStyle: 'object',\n                successFunName: ''\n            },\n            // 添加固话\n            addPhone: false,\n            addPhoneConfig: {\n                showSelectGroup: true,\n                selectType: 'checkbox',\n                originArr: [],\n                originCanCancel: true,\n                returnStyle: 'object',\n                successFunName: ''\n            },\n            // 导入报名用户\n            addActivityUser: false\n        };\n    }\n    closeMember = () => {\n        this.setState({\n            isShowMemberManage: false\n        });\n        this.refeshAndhttp()\n    }\n    closeCreat = () => {\n        this.setState({\n            isShowCreateMeeting: false\n        })\n    }\n    closeDetail = () => {\n        this.setState({\n            isShowMeetingDetail: false\n        })\n    }\n    changeMeetingMaster = (data) => {\n        this.appointment && this.appointment.setHost(data)\n    }\n    changePage = (page, props = {}) => {\n        if (page === 'memberManage') {\n            this.setState({\n                isShowMemberManage: true,\n                props\n            })\n            return\n        } else if (page === 'createMeeting') {\n            this.setState({\n                isShowCreateMeeting: true,\n                props\n            })\n            return\n        } else if (page === 'detail') {\n            this.setState({\n                isShowMeetingDetail: true,\n                props\n            })\n            return\n        } else if (page === 'edit') {\n            this.setState({\n                isShowCreateMeeting: true,\n                props\n            })\n            return\n        }\n        this.setState({\n            showPage: page,\n            props\n        })\n    }\n    addSuccess = (data) => {\n        if (this.state.addUserConfig.successFunName === 'changeMeetingMaster') {\n            this.changeMeetingMaster(data)\n        } else if (this.state.addUserConfig.successFunName === 'changeVisit') {\n            this.appointment && this.appointment.setVisitor(data)\n        } else if (this.state.addUserConfig.successFunName === 'listAddUser') {\n            let arr = [];\n            data.forEach(ele => {\n                arr.push(ele.id)\n            })\n            arr = arr.join(',')\n            actionMeeting.listInviteUser({\n                meeting_id: this.state.meetingId,\n                uids: arr,\n                type: 3\n            }).then(res => {\n                if (res.code == 200) {\n                    this.showToast({ type: 'success', content: '邀请成功' })\n                }\n            })\n        }\n    }\n    addPhoneSuccess = (data) => {\n        if (this.state.addPhoneConfig.successFunName === 'changeVisit') {\n            this.appointment && this.appointment.setPhone(data)\n        }\n    }\n    addActUserSuccess = (data) => {\n        this.appointment && this.appointment.setActUser(data)\n    }\n    refeshAndhttp = () => {\n        this.cmpMeetingList.refesh()\n    }\n    listAddUser = (meetingId) => {\n        if (!interfaces.USER_LIST) {\n            this.showToast({ type: 'error', content: '您当前没有此权限' });\n            return\n        }\n        this.setState({\n            meetingId\n        })\n        actionMeeting.getMeetingDetail(meetingId).then(res => {\n            if (res.code !== 200) {\n                this.showToast({ type: 'error', content: '获取会议详情失败' });\n                return\n            }\n            const data = res.data;\n            let userList = data.user_list.map(ele => {\n                return { ...ele }\n            })\n            this.setState({\n                addUser: true,\n                addUserConfig: {\n                    ...this.state.addUserConfig,\n                    showSelectGroup: true,\n                    selectType: 'checkbox',\n                    originArr: userList,\n                    originCanCancel: false,\n                    returnStyle: 'object',\n                    successFunName: 'listAddUser'\n                }\n            })\n        })\n    }\n    render() {\n        let showCmp;\n        let isDetail = undefined    //展示用户详情\n        let isMemberManage = undefined  //展示会控管理 \n        let isCreateMeeting = undefined   //展示创建会议\n        if (this.state.showPage === 'list') {\n            showCmp = <CmpMeetingList\n                changePage={this.changePage}\n                {...this.state.props}\n                tabPanes={this.tabPanes}\n                isMyMeeting={false}\n                onRef={e => this.cmpMeetingList = e}\n                listAddUser={(res) => {\n                    this.listAddUser(res);\n                }}\n            />\n        }\n        isMemberManage = <MemberManage closeMember={this.closeMember} {...this.state.props} />\n        isCreateMeeting = <Appointment\n            closeCreat={this.closeCreat}\n            onRef={e => this.appointment = e}\n            {...this.state.props}\n            addMaster={(res) => {\n                if (!interfaces.USER_LIST) {\n                    this.showToast({ type: 'error', content: '您当前没有此权限' });\n                    return\n                }\n                this.setState({\n                    addUser: true,\n                    addUserConfig: {\n                        ...this.state.addUserConfig,\n                        ...res\n                    }\n                })\n            }}\n            addPhone={(res) => {\n                if (!interfaces.PHONE_LIST) {\n                    this.showToast({ type: 'error', content: '您当前没有此权限' });\n                    return\n                }\n                this.setState({\n                    addPhone: true,\n                    addPhoneConfig: {\n                        ...this.state.addPhoneConfig,\n                        ...res\n                    }\n                })\n            }}\n            addActivityUser={(res) => {\n                if (!interfaces.EVENT_LIST) {\n                    this.showToast({ type: 'error', content: '您当前没有此权限' });\n                    return\n                }\n                this.setState({\n                    addActivityUser: true\n                })\n            }}\n            refeshAndhttp={this.refeshAndhttp}\n        />\n        isDetail = <MeetingDetail closeDetail={this.closeDetail} {...this.state.props} />\n        return (\n            <div style={{ position: 'relative', width: '100%', height: '100%' }}>\n                {this.state.isShowMemberManage ? isMemberManage : null}\n                {this.state.isShowCreateMeeting ? isCreateMeeting : null}\n                {this.state.isShowMeetingDetail ? isDetail : null}\n                {showCmp}\n                {this.state.addUser ? <AddUser\n                    visible={true}\n                    showSelectGroup={this.state.addUserConfig.showSelectGroup}\n                    selectType={this.state.addUserConfig.selectType}\n                    originArr={this.state.addUserConfig.originArr}\n                    originCanCancel={this.state.addUserConfig.originCanCancel}\n                    returnStyle={this.state.addUserConfig.returnStyle}\n                    mustIdent={this.state.addUserConfig.mustIdent}\n                    onCancel={() => {\n                        this.setState({\n                            addUser: false\n                        })\n                    }}\n                    onAdd={(data) => {\n                        console.log(data);\n                        console.log('回传数据')\n                        this.addSuccess(data)\n                    }}\n                /> : null}\n                {this.state.addPhone ? <AddPhone\n                    visible={true}\n                    showSelectGroup={this.state.addPhoneConfig.showSelectGroup}\n                    selectType={this.state.addPhoneConfig.selectType}\n                    originArr={this.state.addPhoneConfig.originArr}\n                    originCanCancel={this.state.addPhoneConfig.originCanCancel}\n                    returnStyle={this.state.addPhoneConfig.returnStyle}\n                    onCancel={() => {\n                        this.setState({\n                            addPhone: false\n                        })\n                    }}\n                    onAdd={(data) => {\n                        console.log(data);\n                        console.log('回传数据')\n                        this.addPhoneSuccess(data)\n                    }}\n                /> : null}\n                {this.state.addActivityUser ? <AddActivityUser\n                    visible={true}\n                    onCancel={() => {\n                        this.setState({\n                            addActivityUser: false\n                        })\n                    }}\n                    onAdd={(data) => {\n                        console.log(data);\n                        console.log('回传数据')\n                        this.addActUserSuccess(data)\n                    }}\n                /> : null}\n            </div>\n        )\n    }\n\n}\nexport default connect((store, props) => {\n    return {\n        ...props,\n    }\n})(MeetingManage)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/meetingManage/examineMeetingList/ExamineMeetingList.js",["1180"],"import BaseCmp from '@components/BaseCmp.js'\nimport { connect } from 'react-redux'\nimport MemberManage from '@/pages/common/meeting/MemberManage.js'\nimport MeetingDetail from '@/pages/common/meeting/MeetingDetail.js'\nimport CmpMeetingList from '@/pages/common/listManage/CmpMeetingList.js'\nimport Appointment from '@/pages/common/meeting/Appointment.js'\nimport AddUser from '@/pages/common/meeting/AddUser.js'\nimport actionMeeting from '@actions/meetingManage/actionMeeting.js'\nimport ExamineDetail from '@/pages/common/meeting/ExamineDetail.js'\nimport interfaces from '../../../api/interfaces.js'\nimport AddPhone from '@/pages/common/meeting/AddPhone.js'\nimport AddActivityUser from '@/pages/common/meeting/AddActivityUser.js'\n\nclass ExamineMeetingList extends BaseCmp {\n    constructor(props) {\n        super(props);\n        this.tabPanes = [\n            {\n                tab: '待审核',\n                id: 'waitExamine',\n            },\n            {\n                tab: '全部已审核会议',\n                id: 'haveExamineAll',\n            },\n            {\n                tab: '我已审核',\n                id: 'haveExmineMe',\n            }, {\n                tab: '我发起的',\n                id: 'launchMe',\n            }\n        ]\n        this.state = {\n            showPage: 'list',     // 要现实的页面appoint：预约会议/detail：会议详情/list：会议列表\n            props,\n            isShowMemberManage: false,\n            isShowCreateMeeting: false,\n            isShowMeetingDetail: false,\n            isShowExamineDetail: false,\n            // 添加用户\n            addUser: false,\n            addUserConfig: {\n                showSelectGroup: true,\n                selectType: 'checkbox',\n                originArr: [],\n                originCanCancel: true,\n                returnStyle: 'object',\n                successFunName: ''\n            },\n            // 添加固话\n            addPhone: false,\n            addPhoneConfig: {\n                showSelectGroup: true,\n                selectType: 'checkbox',\n                originArr: [],\n                originCanCancel: true,\n                returnStyle: 'object',\n                successFunName: ''\n            },\n            // 导入报名用户\n            addActivityUser: false\n        };\n    }\n    closeMember = () => {\n        this.setState({\n            isShowMemberManage: false\n        })\n    }\n    closeCreat = () => {\n        this.setState({\n            isShowCreateMeeting: false\n        })\n    }\n    closeDetail = () => {\n        this.setState({\n            isShowMeetingDetail: false\n        })\n    }\n    changeMeetingMaster = (data) => {\n        this.appointment && this.appointment.setHost(data)\n    }\n    changePage = (page, props = {}) => {\n        if (page === 'memberManage') {\n            this.setState({\n                isShowMemberManage: true,\n                props\n            })\n            return\n        } else if (page === 'createMeeting') {\n            this.setState({\n                isShowCreateMeeting: true,\n                props\n            })\n            return\n        } else if (page === 'detail') {\n            this.setState({\n                isShowMeetingDetail: true,\n                props\n            })\n            return\n        } else if (page === 'edit') {\n            this.setState({\n                isShowCreateMeeting: true,\n                props\n            })\n            return\n        } else if (page === 'examine') {\n            this.setState({\n                isShowCreateMeeting: true,\n                props\n            })\n            return\n        } else if (page === 'examineDetail') {\n            this.setState({\n                isShowExamineDetail: true,\n                props\n            })\n            return\n        }\n        this.setState({\n            showPage: page,\n            props\n        })\n    }\n    addSuccess = (data) => {\n        if (this.state.addUserConfig.successFunName === 'changeMeetingMaster') {\n            this.changeMeetingMaster(data)\n        } else if (this.state.addUserConfig.successFunName === 'changeVisit') {\n            this.appointment && this.appointment.setVisitor(data)\n        } else if (this.state.addUserConfig.successFunName === 'listAddUser') {\n            let arr = [];\n            data.forEach(ele => {\n                arr.push(ele.id)\n            })\n            arr = arr.join(',')\n            actionMeeting.listInviteUser({\n                meeting_id: this.state.meetingId,\n                uids: arr,\n                type: 3\n            }).then(res => {\n                if (res.code == 200) {\n                    this.showToast({ type: 'success', content: '邀请成功' })\n                }\n            })\n        }\n    }\n    addPhoneSuccess = (data) => {\n        if (this.state.addPhoneConfig.successFunName === 'changeVisit') {\n            this.appointment && this.appointment.setPhone(data)\n        }\n    }\n    addActUserSuccess = (data) => {\n        this.appointment && this.appointment.setActUser(data)\n    }\n    refeshAndhttp = () => {\n        this.cmpMeetingList.refesh()\n    }\n    listAddUser = (meetingId) => {\n        if (!interfaces.USER_LIST) {\n            this.showToast({ type: 'error', content: '您当前没有此权限' });\n            return\n        }\n        this.setState({\n            meetingId\n        })\n        actionMeeting.getMeetingDetail(meetingId).then(res => {\n            if (res.code !== 200) {\n                this.showToast({ type: 'error', content: '获取会议详情失败' });\n                return\n            }\n            const data = res.data;\n            let userList = data.user_list.map(ele => {\n                return { ...ele }\n            })\n            this.setState({\n                addUser: true,\n                addUserConfig: {\n                    ...this.state.addUserConfig,\n                    showSelectGroup: true,\n                    selectType: 'checkbox',\n                    originArr: userList,\n                    originCanCancel: false,\n                    returnStyle: 'object',\n                    successFunName: 'listAddUser'\n                }\n            })\n        })\n    }\n    render() {\n        let showCmp;\n        let isDetail = undefined    //展示用户详情\n        let isMemberManage = undefined  //展示会控管理 \n        let isCreateMeeting = undefined   //展示创建会议\n        if (this.state.showPage === 'list') {\n            showCmp = <CmpMeetingList\n                changePage={this.changePage}\n                {...this.state.props}\n                tabPanes={this.tabPanes}\n                tabKey={'waitExamine'}\n                isMyMeeting={false}\n                onRef={e => this.cmpMeetingList = e}\n                listAddUser={(res) => {\n                    this.listAddUser(res);\n                }}\n            />\n        }\n        isMemberManage = <MemberManage closeMember={this.closeMember} {...this.state.props} />\n        isCreateMeeting = <Appointment\n            closeCreat={this.closeCreat}\n            onRef={e => this.appointment = e}\n            {...this.state.props}\n            addMaster={(res) => {\n                if (!interfaces.USER_LIST) {\n                    this.showToast({ type: 'error', content: '您当前没有此权限' });\n                    return\n                }\n                this.setState({\n                    addUser: true,\n                    addUserConfig: {\n                        ...this.state.addUserConfig,\n                        ...res\n                    }\n                })\n            }}\n            addPhone={(res) => {\n                if (!interfaces.PHONE_LIST) {\n                    this.showToast({ type: 'error', content: '您当前没有此权限' });\n                    return\n                }\n                this.setState({\n                    addPhone: true,\n                    addPhoneConfig: {\n                        ...this.state.addPhoneConfig,\n                        ...res\n                    }\n                })\n            }}\n            addActivityUser={(res) => {\n                if (!interfaces.EVENT_LIST) {\n                    this.showToast({ type: 'error', content: '您当前没有此权限' });\n                    return\n                }\n                this.setState({\n                    addActivityUser: true\n                })\n            }}\n            refeshAndhttp={this.refeshAndhttp}\n        />\n        isDetail = <MeetingDetail closeDetail={this.closeDetail} {...this.state.props} />\n        return (\n            <div style={{ position: 'relative', width: '100%', height: '100%' }}>\n                {this.state.isShowMemberManage ? isMemberManage : null}\n                {this.state.isShowCreateMeeting ? isCreateMeeting : null}\n                {this.state.isShowMeetingDetail ? isDetail : null}\n                {showCmp}\n                {this.state.addUser ? <AddUser\n                    visible={true}\n                    showSelectGroup={this.state.addUserConfig.showSelectGroup}\n                    selectType={this.state.addUserConfig.selectType}\n                    originArr={this.state.addUserConfig.originArr}\n                    originCanCancel={this.state.addUserConfig.originCanCancel}\n                    returnStyle={this.state.addUserConfig.returnStyle}\n                    mustIdent={this.state.addUserConfig.mustIdent}\n                    onCancel={() => {\n                        this.setState({\n                            addUser: false\n                        })\n                    }}\n                    onAdd={(data) => {\n                        console.log(data);\n                        console.log('回传数据')\n                        this.addSuccess(data)\n                    }}\n                /> : null}\n                {this.state.addPhone ? <AddPhone\n                    visible={true}\n                    showSelectGroup={this.state.addPhoneConfig.showSelectGroup}\n                    selectType={this.state.addPhoneConfig.selectType}\n                    originArr={this.state.addPhoneConfig.originArr}\n                    originCanCancel={this.state.addPhoneConfig.originCanCancel}\n                    returnStyle={this.state.addPhoneConfig.returnStyle}\n                    onCancel={() => {\n                        this.setState({\n                            addPhone: false\n                        })\n                    }}\n                    onAdd={(data) => {\n                        console.log(data);\n                        console.log('回传数据')\n                        this.addPhoneSuccess(data)\n                    }}\n                /> : null}\n                {this.state.addActivityUser ? <AddActivityUser\n                    visible={true}\n                    onCancel={() => {\n                        this.setState({\n                            addActivityUser: false\n                        })\n                    }}\n                    onAdd={(data) => {\n                        console.log(data);\n                        console.log('回传数据')\n                        this.addActUserSuccess(data)\n                    }}\n                /> : null}\n                {this.state.isShowExamineDetail ? <ExamineDetail {...this.state.props}\n                    closeExamineDetail={() => {\n                        this.setState({\n                            isShowExamineDetail: false\n                        })\n                    }} /> : null}\n            </div>\n        )\n    }\n\n}\nexport default connect((store, props) => {\n    return {\n        ...props,\n    }\n})(ExamineMeetingList)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/document/RLDocument.js",["1181","1182","1183"],"import BaseCmp from '@components/BaseCmp.js'\nimport './RLDocument.less'\nimport images from '@/libs/images/index.js'\nconst commonImg = images.commonImg\n\nexport default class RLdocument extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.state = {\n\n        }\n    }\n    docUpLoad = (url) => {\n        return () => {\n            window.open(url)\n        }\n    }\n    docDelete = (id) => {\n        return () => {\n            this.props.docDelete(id)\n        }\n    }\n    render() {\n        let detailNameBox = this.props.isDetail ? 'docUpListBoxDetail' : 'docUpListBox'\n        let docUpListItem = this.props.isDetail ? 'docUpListItemDetail' : 'docUpListItem'\n        return (\n            <div className={detailNameBox}>\n                {this.props.fileList.map(i => {\n                    let docImg = commonImg.documentWOC\n                    let docArr = i.title && i.title.split('.')\n                    let docType = docArr && docArr.pop()\n                    let docTitle = docArr && docArr.join('.')\n                    if (docType === 'xls' || docType === 'xlsx') docImg = commonImg.documentX\n                    if (docType === 'ppt' || docType === 'pptx') docImg = commonImg.documentPPT\n                    if (docType === 'pdf') docImg = commonImg.documentPDF\n                    let docId = i.id || i.lid\n                    return <div className={docUpListItem}>\n                        <div className='docUpListItemLeft'>\n                            <img src={docImg} style={{ width: 20, height: 20 }} />\n                            <div className='docUpListItemLeftTitle'>{docTitle}</div>\n                            <div>.{docType}</div>\n                        </div>\n                        {i.is_me ? <div className='docUpListItemRight'>\n                            {(!i.upLoad) ? <div onClick={this.docUpLoad(i.doc_url)}><img src={commonImg.docUpLoad} style={{ width: 20, height: 20, cursor: 'pointer' }} /></div> : null}\n                            {(!this.props.isDetail) ? <div onClick={this.docDelete(docId)}><img src={commonImg.docDelete} style={{ width: 20, height: 20, marginLeft: 5, cursor: 'pointer' }} /></div> : null}\n                        </div> : null}\n                    </div>\n                })}\n            </div>\n        )\n    }\n} ","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/ComExamineMeetingList.js",["1184","1185","1186","1187","1188","1189","1190","1191","1192","1193","1194","1195","1196","1197","1198","1199","1200","1201"],"import BaseCmp from '@components/BaseCmp.js'\nimport { RLDatePicker, RLFilterTool, RLButton, RLTable, RLDropdown, RLSelect, RLInput } from '@components/index.js'\nimport actionMeeting from '@actions/meetingManage/actionMeeting.js'\nimport interfaces from '@/api/interfaces';\nimport { dealSearchTime, dealTableTime } from '@/libs/utils'\nimport config from '@/config.js'\nimport { connect } from 'react-redux';\nimport locale from 'antd/es/date-picker/locale/zh_CN';\nimport ImagesList from '@/libs/images/index.js'\nclass ComExamineMeetingList extends BaseCmp {\n    constructor(props) {\n        super(props);\n        let auditing = undefined;\n        if (this.props.type === 'haveExamineAll') {\n            auditing = 1;\n        } else if (this.props.type === 'waitExamine') {\n            auditing = 2;\n        } else if (this.props.type === 'haveExmineMe') {\n            auditing = 3;\n        } else if (this.props.type === 'launchMe') {\n            auditing = 4;\n        }\n        this.tableOption = {\n            haveExamineAll: ['meeting_id', 'room', 'meeting_type', 'user_num', 'nickname', 'create_at', 'auditing', 'selfDoIt'],\n            waitExamine: ['meeting_id', 'meeting_type', 'user_num', 'nickname', 'create_at', 'selfDoIt'],\n            haveExmineMe: ['meeting_id', 'room', 'meeting_type', 'user_num', 'nickname', 'create_at', 'auditing', 'selfDoIt'],\n            launchMe: ['meeting_id', 'room', 'meeting_type', 'user_num', 'create_at', 'auditing']\n        }\n        this.state = {\n            start_date: '',\n            end_date: '',\n            searchParam: {  // 搜索列表筛选条件\n                auditing: auditing,\n                aud_status: '',\n                nickname: '',\n                start_time_c: '',\n                end_time_c: ''\n            },\n            upcomingListInfo: {  // 列表信息\n                pageNum: 1,  // 总叶数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: 1,     // 当前第几页\n            },\n            listLoading: true,      // 获取列表中loading\n            listInfo: {\n                type: this.props.type   //haveExamineAll / waitExamine / haveExmineMe / launchMe\n            }\n        };\n    }\n    componentDidMount() {\n        this.props.onRef(this)\n        this.getMeetingList()\n    }\n    createRow = (rowType) => {\n        switch (rowType) {\n            case 'meeting_id':\n                return {\n                    title: '会议',\n                    key: 'meeting_id',\n                    width: '35%',\n                    render: (record) => {\n                        return <div>\n                            <p className='addItemColor' onClick={() => {\n                                this.rowClick(record);\n                            }}>主题:<span className='addTextDecoration'>{record.title}</span></p>\n                            <p><span className='addItemColor'>ID</span>:{record.meeting_id}</p>\n                            <p><img src={ImagesList.menuIcon.newClock} alt='' width='20' height='20' />:{dealTableTime(record.start_time_at)}~{dealTableTime(record.end_time_at)}</p>\n                        </div>\n                    },\n                }\n            case 'room':\n                return {\n                    title: '会议号',\n                    key: 'room',\n                    width: '10%',\n                    render: (record) => {\n                        return <span>{record.room != 0 ? record.room : '——'}</span>\n                    }\n                }\n            case 'meeting_type':\n                return {\n                    title: '会议性质',\n                    key: 'meeting_type',\n                    width: '10%',\n                    render: (record) => {\n                        return <div>\n                            {record.meeting_type == 1 ? '公开' : '非公开'}\n                        </div>\n                    }\n                }\n            case 'user_num':\n                return {\n                    title: '会议人数',\n                    dataIndex: 'user_num',\n                    key: 'user_num',\n                    width: '10%'\n                }\n            case 'nickname':\n                return {\n                    title: '申请人',\n                    dataIndex: 'nickname',\n                    key: 'nickname',\n                    width: '10%'\n                }\n            case 'create_at':\n                return {\n                    title: this.props.type === 'launchMe' ? '提交时间' : '申请时间',\n                    key: 'create_at',\n                    width: '15%',\n                    render: (record) => {\n                        return <div>\n                            {dealTableTime(record.create_at)}\n                        </div>\n                    }\n                }\n            case 'auditing':\n                return {\n                    title: '审核状态',\n                    key: 'auditing',\n                    width: '10%',\n                    render: (record) => {\n                        return <div>\n                            <p>{record.auditing == 1 ? '已通过' : null}</p>\n                            <p>{record.auditing == 2 ? '已拒绝' : null}</p>\n                            <p>{record.auditing == 0 ? '待审核' : null}</p>\n                            <p className='addItemColor' style={{ fontSize: 12 }} onClick={() => {\n                                this.props.changePage('examineDetail', {\n                                    meetingId: record.meeting_id\n                                })\n                            }}>{record.auditing == 1 || record.auditing == 2 ? '审核详情' : null}</p>\n                        </div>\n                    }\n                }\n            case 'selfDoIt':\n                return {\n                    title: '操作',\n                    key: 'selfDoIt',\n                    width: '18%',\n                    render: (record) => {\n                        return this.getOptionBtns(record)\n                    }\n                }\n            default:\n                return undefined\n        }\n    }\n    getColumns = () => {\n        let rowArr = [];\n        this.tableOption[this.state.listInfo.type].forEach(ele => {\n            rowArr.push(this.createRow(ele));\n        })\n        return rowArr\n    }\n    getOptionBtns = (record) => {\n        return this.getBtnsFromList(this.getBtnList(record), record)\n    }\n    getBtnList = (record) => {\n        let btns = []\n        // status 会议状态0未开始1进行中2已开始3已结束\n        // is_me  1.我创建的 0不是我创建的\n        // time_status  1。预约时间到了 0时间没到\n        if (this.state.searchParam.auditing == 1) {\n            btns = this.createAllRight(btns, record)\n        } else if (this.state.searchParam.auditing == 2) {\n            btns = this.createWaitRight(btns, record)\n        } else if (this.state.searchParam.auditing == 3) {\n            btns = this.createAllRight(btns, record)\n        }\n        return btns\n    }\n    createAllRight = (btns, record) => {\n        let { status, time_status } = record;\n        if (record.auditing == 1) {\n            if (status == 1) {\n                if (interfaces.MEETING_APPROVE) {\n                    // btns.push({\n                    //     label: '邀请',\n                    //     type: 'invite'\n                    // });\n                    // btns.push({\n                    //     label: '进入',\n                    //     type: 'meeting'\n                    // })\n                } else {\n                    // btns.push({\n                    //     label: '进入',\n                    //     type: 'meeting'\n                    // })\n                }\n            } else if (status == 3) {\n                btns.push({\n                    label: '查看',\n                    type: 'check'\n                })\n                btns.push({\n                    label: '删除',\n                    type: 'delete'\n                })\n            } else {\n                if (time_status == 1) {\n                    if (interfaces.MEETING_APPROVE) {\n                        // btns.push({\n                        //     label: '邀请',\n                        //     type: 'invite'\n                        // })\n                    }\n                    // btns.push({\n                    //     label: '开始',\n                    //     type: 'start'\n                    // })\n                } else {\n                    if (interfaces.MEETING_APPROVE) {\n                        btns.push({\n                            label: '编辑',\n                            type: 'edit'\n                        });\n                        // btns.push({\n                        //     label: '取消',\n                        //     type: 'delete'\n                        // })\n                    }\n                    // btns.push({\n                    //     label: '开始',\n                    //     type: 'start'\n                    // })\n                }\n            }\n        } else {\n            btns.push({\n                label: '查看',\n                type: 'check'\n            })\n            btns.push({\n                label: '删除',\n                type: 'delete'\n            })\n        }\n\n        return btns\n    }\n    createWaitRight = (btns, record) => {\n        btns.push({\n            label: '查看',\n            type: 'check'\n        })\n        if (interfaces.MEETING_APPROVE) {\n            btns.push({\n                label: '审核',\n                type: 'examine'\n            })\n        }\n        return btns\n    }\n    // 获取列表右侧按钮组件\n    getBtnsFromList = (btns, record) => {\n        if (btns.length <= 3) {\n            return <div style={{ display: 'flex', flexDirection: 'row' }}>\n                {\n                    btns.map(({ label, type }) => {\n                        return <RLButton\n                            type='link'\n                            key={type}\n                            label={label}\n                            onClick={(e) => {\n                                this.optionAction(type, record)\n                                e.stopPropagation()\n                            }}\n                        />\n                    })\n                }\n            </div>\n        } else {\n            let btnList = []\n            let subList = []\n            for (let i = 0; i < btns.length; i++) {\n                if (i < 2) {\n                    btnList.push(\n                        (<RLButton\n                            type='link'\n                            key={btns[i].type}\n                            label={btns[i].label}\n                            onClick={(e) => {\n                                this.optionAction(btns[i].type, record)\n                                e.stopPropagation()\n                            }}\n                        />)\n                    )\n                } else {\n                    subList.push(\n                        { label: btns[i].label, key: btns[i].type }\n                    )\n                }\n            }\n            btnList.push(\n                (<RLDropdown\n                    subBtns={subList}\n                    label='更多'\n                    onClick={(e, key) => {\n                        this.optionAction(key, record)\n                        e.stopPropagation()\n                    }}\n                />)\n            )\n\n\n            return <div style={{ display: 'flex', flexDirection: 'row' }}>\n                {btnList}\n            </div>\n        }\n    }\n\n    /**\n     * 权限操作\n     */\n    optionAction = (type, record) => {\n        if (type === 'joinmeeting') {\n            actionMeeting.getMeetingHash({\n                master: record.master,\n                roomId: record.room,\n                startTime: record.start_time,\n                endTime: record.end_time,\n                title: record.title,\n                password: record.password.password\n            }).then(res => {\n                if (res.code === 200) {\n                    window.open(config.pullUpLink + '?q=' + res.data)\n                } else {\n                    this.showToast({ type: 'error', content: '获取会议链接错误' })\n                }\n            })\n        } else if (type === 'invite') {\n            console.log('邀请')\n            this.props.listAddUser(record.meeting_id)\n        } else if (type === 'check') {\n            console.log('查看')\n            this.rowClick(record);\n        } else if (type === 'cancel') {\n            // 取消会议\n            this.showModal({\n                content: '是否取消会议',\n                title: '取消会议',\n                okText: '取消会议',\n                cancelText: '我再想想',\n                onOk: () => {\n                    return actionMeeting.deleteMeeting({ meeting_ids: record.meeting_id }).then(res => {\n                        if (res.code === 200) {\n                            this.showToast({ type: 'success', content: '取消成功' });\n                            this.getMeetingList()\n                        } else {\n                            this.showToast({ type: 'error', content: res.msg })\n                        }\n                    })\n                },\n                onCancel: () => {\n                },\n                size: 'big'\n            })\n\n        } else if (type === 'edit') {\n            console.log('编辑会议')\n            this.props.changePage('edit', {\n                meetingId: record.meeting_id\n            })\n        } else if (type === 'delete') {\n            // 删除会议\n            this.showModal({\n                title: '您是否确定删除此会议？',\n                okText: '确定',\n                cancelText: '取消',\n                onOk: () => {\n                    return actionMeeting.deleteMeeting({ meeting_ids: record.meeting_id }).then(res => {\n                        if (res.code === 200) {\n                            this.showToast({ type: 'success', content: '删除成功' });\n                            this.getMeetingList()\n                        } else {\n                            this.showToast({ type: 'error', content: res.msg })\n                        }\n                    })\n                },\n                onCancel: () => {\n\n                },\n                size: 'small'\n            })\n\n        } else if (type === 'start') {\n            console.log('开始会议');\n            window.open(config.pullUpLink + '?q=' + record.hash_key)\n        } else if (type === 'meeting') {\n            console.log('进入会议');\n            window.open(config.pullUpLink + '?q=' + record.hash_key)\n        } else if (type === 'examine') {\n            console.log('审核会议')\n            this.props.changePage('examine', {\n                meetingId: record.meeting_id,\n                isExamine: true\n            })\n        }\n    }\n    //\n    pageChange = (page, pageSize) => {\n        this.getMeetingList({ page })\n    }\n    getMeetingList = ({ page = this.state.upcomingListInfo.page } = { page: this.state.upcomingListInfo.page }) => {\n        this.setState({\n            listLoading: true,\n        })\n        actionMeeting.getMeetingExamineList({\n            ...this.state.searchParam,\n            page,\n            pagesize: this.pageSize,\n        }).then(res => {\n            if (res.code === 200) {\n                let newState = {\n                    upcomingListInfo: {\n                        list: res.data.list,\n                        page,\n                        count: res.data.count,\n                        pageNum: Math.ceil(res.data.count / this.pageSize)\n                    }\n                }\n                this.setState(newState)\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        }).finally(() => {\n            this.setState({\n                listLoading: false,\n            })\n        })\n    }\n    getLeftItems = () => {\n        let status = [];\n        let status_value0 = {\n            label: '未审核',\n            value: 0\n        }\n        let status_value1 = {\n            label: '已通过',\n            value: 1\n        }\n        let status_value2 = {\n            label: '已拒绝',\n            value: 2\n        }\n        if (this.state.searchParam.auditing == 1) {\n            status = [status_value1, status_value2]\n        } else if (this.state.searchParam.auditing == 3) {\n            status = [status_value1, status_value2]\n        } else if (this.state.searchParam.auditing == 4) {\n            status = [status_value0, status_value1, status_value2]\n        }\n        return [\n            <div className=\"newTimeArea\" key={'date'}>\n                <p>从</p>\n                <RLDatePicker\n                    allowClear={true}\n                    onChange={this.startDateChange}\n                    disabledDate={this.startDisabledDate}\n                    locale={locale}\n                    inputReadOnly={true}\n                    format=\"YYYY-MM-DD\"\n                    placeholder='请选择日期'\n                    value={this.state.start_date}\n                />\n                <p>至</p>\n                <RLDatePicker\n                    allowClear={true}\n                    onChange={this.endDateChange}\n                    disabledDate={this.startDisabledDate}\n                    locale={locale}\n                    inputReadOnly={true}\n                    format=\"YYYY-MM-DD\"\n                    placeholder='请选择日期'\n                    value={this.state.end_date}\n                />\n            </div>,\n            <div className=\"newSelectArea\" key={'input'}>\n                {status.length ? <RLSelect\n                    options={status}\n                    allowClear\n                    style={{ width: 120, marginLeft: 30, marginRight: 10 }}\n                    placeholder={'请选择审核状态'}\n                    value={this.state.searchParam.aud_status ? this.state.searchParam.aud_status : undefined}\n                    onChange={(e) => {\n                        if (e === undefined) {\n                            e = ''\n                        }\n                        this.setState({\n                            searchParam: {\n                                ...this.state.searchParam,\n                                aud_status: e\n                            }\n                        })\n                    }}\n                /> : null}\n                {this.state.searchParam.auditing != 4 ? <RLInput\n                    placeholder='请输入创建者姓名'\n                    allowClear\n                    value={this.state.searchParam.nickname}\n                    style={{ width: 150, marginLeft: 20, marginRight: 10 }}\n                    onChange={(e) => {\n                        this.setState({\n                            searchParam: {\n                                ...this.state.searchParam,\n                                nickname: e.target.value\n                            }\n                        })\n                    }}\n                /> : null}\n            </div>\n        ]\n    }\n    startDateChange = (val, dateString) => {\n        let numTime = dealSearchTime(dateString, true);\n        this.setState({\n            start_date: val,\n            searchParam: {\n                ...this.state.searchParam,\n                start_time_c: numTime\n            }\n        })\n    }\n    endDateChange = (val, dateString) => {\n        let numTime = dealSearchTime(dateString, false);\n        this.setState({\n            end_date: val,\n            searchParam: {\n                ...this.state.searchParam,\n                end_time_c: numTime\n            }\n        })\n    }\n    getRightItems = () => {\n        return (\n            [\n                <RLButton\n                    label='搜索'\n                    type='primary'\n                    key={'search'}\n                    onClick={() => { this.getMeetingList({ page: 1 }) }}\n                    style={{ marginRight: 20 }}\n                />,\n                <RLButton\n                    label='重置'\n                    type='default'\n                    key={'reset'}\n                    onClick={this.reset}\n                    style={{ marginRight: 20 }}\n                />\n            ]\n        )\n    }\n    getTableTopRight = () => {\n        return (\n            [\n                <RLButton\n                    label='刷新'\n                    type='default'\n                    key={'refresh'}\n                    onClick={this.getMeetingList}\n                    style={{ marginRight: 20 }}\n                />\n            ]\n        )\n    }\n    reset = () => {\n        this.setState({\n            start_date: null,\n            end_date: null,\n            searchParam: {\n                ...this.state.searchParam,\n                aud_status: '',\n                nickname: '',\n                start_time_c: '',\n                end_time_c: ''\n            }\n        })\n    }\n    rowClick = (record) => {\n        this.props.changePage('detail', { meetingId: record.meeting_id })\n    }\n    render() {\n        return (\n            <div className=''>\n                <RLFilterTool leftItems={this.getLeftItems} rightItems={this.getRightItems} />\n                <RLFilterTool rightItems={this.getTableTopRight} />\n                <RLTable\n                    loading={this.state.listLoading}\n                    dataSource={this.state.upcomingListInfo.list}\n                    rowKey='meeting_id'\n                    columns={this.getColumns()}\n                    paginationInfo={{\n                        total: this.state.upcomingListInfo.count,\n                        pageSize: this.pageSize,\n                        onChange: this.pageChange,\n                        current: this.state.upcomingListInfo.page\n                    }}\n                    rowClassName='rl-table-click-row'\n                />\n            </div>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props\n    }\n})(ComExamineMeetingList);","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/liveCom/AllLiveList.js",["1202","1203","1204","1205","1206","1207","1208","1209","1210","1211","1212","1213","1214","1215"],"import BaseCmp from '@components/BaseCmp.js'\nimport { RLDatePicker, RLFilterTool, RLButton, RLTable, RLDropdown, RLSelect, RLInput } from '@components/index.js'\nimport actionSeminar from '@actions/seminar/actionSeminar.js'\nimport actionMeeting from '@actions/meetingManage/actionMeeting.js'\nimport interfaces from '@/api/interfaces';\nimport { dealSearchTime, dealTableTime } from '@/libs/utils'\nimport config from '@/config.js'\nimport { connect } from 'react-redux';\nimport locale from 'antd/es/date-picker/locale/zh_CN';\nimport { downloadFile } from '@/libs/utils.js';\nclass AllliveList extends BaseCmp {\n    constructor(props) {\n        super(props);\n        let meeting_status = 3;\n        if (this.props.type === 'upcomingLive') {\n            meeting_status = 0\n        } else if (this.props.type === 'endLive') {\n            meeting_status = 2\n        }\n        if (this.props.isMyLive) {\n            this.tableOption = {\n                upcomingLive: ['meeting_id', 'title', 'room', 'start_time_at', 'end_time_at', 'nickname', 'doc_num', 'selfDoIt'],\n                endLive: ['meeting_id', 'titleNoColor', 'room', 'real_start_time_at', 'nickname', 'doc_num', 'selfDoIt']\n            }\n        } else {\n            this.tableOption = {\n                upcomingLive: ['meeting_id', 'title', 'room', 'start_time_at', 'end_time_at', 'nickname', 'selfDoIt'],\n                endLive: ['meeting_id', 'titleNoColor', 'room', 'real_start_time_at', 'nickname', 'selfDoIt']\n            }\n        }\n\n        let select = [];\n        let selectList = [];\n\n        this.state = {\n            meetingSelected: [],\n            start_date: '',\n            end_date: '',\n            searchInput: '',\n            selectOption: 'name',\n            searchParam: {  // 搜索列表筛选条件\n                meeting_status: meeting_status,\n                nickname: '',\n                room: '',\n                start_time: '',\n                end_time: '',\n                order: this.props.type === 'upcomingLive' ? 1 : 0,//1 正序    0 倒序\n            },\n            upcomingListInfo: {  // 列表信息\n                pageNum: 1,  // 总叶数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: 1,     // 当前第几页\n            },\n            listLoading: true,      // 获取列表中loading\n            listInfo: {\n                type: this.props.type   //upcomingLive / endLive\n            },\n            allSelect: [...select],    //所有选择meeting_id集合\n            allSelectList: [...selectList],   //所有选择列表集合\n        };\n    }\n    componentDidMount() {\n        this.props.onRef(this)\n        this.getMeetingList();\n    }\n    createRow = (rowType) => {\n        switch (rowType) {\n            case 'meeting_id':\n                return {\n                    title: 'ID',\n                    dataIndex: 'meeting_id',\n                    key: 'meeting_id',\n                    width: '10%'\n                }\n            case 'title':\n                return {\n                    title: '直播主题',\n                    dataIndex: 'title',\n                    key: 'title',\n                    width: '20%',\n                    render: (text, record) => {\n                        return (\n                            <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                                {Number(record.status) === 1 && (\n                                    <div style={{\n                                        borderRadius: 3,\n                                        background: '#8F1D22',\n                                        width: 46, height: 20,\n                                        display: 'flex', justifyContent: 'center', alignItems: 'center',\n                                        color: '#fff', fontSize: 12, lineHeight: '17px',\n                                        marginRight: 3\n                                    }}>\n                                        <span>进行中</span>\n                                    </div>\n                                )}\n                                <span className='line-clamp-2' onClick={() => {\n                                    this.rowClick(record)\n                                }}>\n                                    {record.title}\n                                </span>\n                            </div>\n                        )\n                    }\n                }\n            case 'titleNoColor':\n                return {\n                    title: '直播主题',\n                    dataIndex: 'title',\n                    key: 'title',\n                    width: '20%',\n                    render: (text, record) => {\n                        return (\n                            <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                                {Number(record.status) === 1 && (\n                                    <div style={{\n                                        borderRadius: 3,\n                                        background: '#8F1D22',\n                                        width: 46, height: 20,\n                                        display: 'flex', justifyContent: 'center', alignItems: 'center',\n                                        color: '#fff', fontSize: 12, lineHeight: '17px',\n                                        marginRight: 3\n                                    }}>\n                                        <span>进行中</span>\n                                    </div>\n                                )}\n                                <span className='line-clamp-noColor'>\n                                    {record.title}\n                                </span>\n                            </div>\n                        )\n                    }\n                }\n            case 'room':\n                return {\n                    title: '直播号',\n                    dataIndex: 'room',\n                    key: 'room',\n                    width: '10%'\n                }\n            case 'nickname':\n                return {\n                    title: '创建者',\n                    dataIndex: 'nickname',\n                    key: 'nickname',\n                    width: '10%'\n                }\n            case 'real_start_time_at':\n                return {\n                    title: <div onClick={() => {\n                        this.setState({\n                            searchParam: {\n                                ...this.state.searchParam,\n                                order: this.state.searchParam.order == 1 ? 0 : 1\n                            }\n                        }, () => {\n                            this.getMeetingList()\n                        })\n                    }}\n                        style={{ cursor: 'pointer', display: 'flex', flexDirection: 'row', alignItems: 'center' }}\n                    >\n                        <span style={{ marginRight: 4 }}>开始时间</span>\n                        {\n                            this.state.searchParam.order == 1 ? (\n                                <img\n                                    alt=''\n                                    src={require('../../../assets/images/common/sort_up.png').default}\n                                    style={{ width: 16, height: 16 }}\n                                />\n                            ) : (\n                                <img\n                                    alt=''\n                                    src={require('../../../assets/images/common/sort_down.png').default}\n                                    style={{ width: 16, height: 16 }}\n                                />\n                            )\n                        }\n                    </div>,\n                    key: 'real_start_time_at',\n                    width: '15%',\n                    render: (record) => {\n                        return <div>\n                            {dealTableTime(record.real_start_time_at)}\n                        </div>\n                    }\n                }\n            case 'start_time_at':\n                return {\n                    title: <div onClick={() => {\n                        this.setState({\n                            searchParam: {\n                                ...this.state.searchParam,\n                                order: this.state.searchParam.order == 1 ? 0 : 1\n                            }\n                        }, () => {\n                            this.getMeetingList()\n                        })\n                    }}\n                        style={{ cursor: 'pointer', display: 'flex', flexDirection: 'row', alignItems: 'center' }}\n                    >\n                        <span style={{ marginRight: 4 }}>开始时间</span>\n                        {\n                            this.state.searchParam.order == 1 ? (\n                                <img\n                                    alt=''\n                                    src={require('../../../assets/images/common/sort_up.png').default}\n                                    style={{ width: 16, height: 16 }}\n                                />\n                            ) : (\n                                <img\n                                    alt=''\n                                    src={require('../../../assets/images/common/sort_down.png').default}\n                                    style={{ width: 16, height: 16 }}\n                                />\n                            )\n                        }\n                    </div>,\n                    key: 'start_time_at',\n                    width: '15%',\n                    render: (record) => {\n                        return <div>\n                            {dealTableTime(record.start_time_at)}\n                        </div>\n                    }\n                }\n            case 'end_time_at':\n                return {\n                    title: '结束时间',\n                    key: 'end_time_at',\n                    width: '15%',\n                    render: (record) => {\n                        return <div>\n                            {dealTableTime(record.end_time_at)}\n                        </div>\n                    }\n                }\n            case 'doc_num':\n                return {\n                    title: '文档数量',\n                    key: 'doc_num',\n                    width: '9%',\n                    render: (record) => {\n                        return <div>\n                            <span className='line-clamp-2' onClick={() => {\n                                this.props.showDoc && this.props.showDoc(record.room)\n                            }}>\n                                {record.doc_num}\n                            </span>\n                        </div>\n                    }\n                }\n            case 'selfDoIt':\n                return {\n                    title: '操作',\n                    key: 'selfDoIt',\n                    width: '18%',\n                    render: (record) => {\n                        return this.getOptionBtns(record)\n                    }\n                }\n            default:\n                return undefined\n        }\n    }\n    getColumns = () => {\n        let rowArr = [];\n        this.tableOption[this.state.listInfo.type].forEach(ele => {\n            rowArr.push(this.createRow(ele));\n        })\n        return rowArr\n    }\n    getOptionBtns = (record) => {\n        return this.getBtnsFromList(this.getBtnList(record), record)\n    }\n    getBtnList = (record) => {\n        let btns = []\n        // status 会议状态0未开始1进行中2已开始3已结束\n        // is_me  1.我创建的 0不是我创建的\n        // time_status  1。预约时间到了 0时间没到\n        if (this.props.modelName === 'allLive') {\n            if (this.state.listInfo.type === 'upcomingLive') {\n                btns = this.createAllRight(btns, record)\n            } else if (this.state.listInfo.type === 'endLive') {\n                btns = this.creatEndRight(btns, record)\n            }\n        } else if (this.props.modelName === 'myLive') {\n            if (this.state.listInfo.type === 'upcomingLive') {\n                btns = this.createMyAllRight(btns, record)\n            } else if (this.state.listInfo.type === 'endLive') {\n                btns = this.creatEndRight(btns, record)\n            }\n        }\n        return btns\n    }\n    creatEndRight = (btns, record) => {\n        if (Number(record.user_num) <= 0) {\n            return btns\n        }\n        if (interfaces.LIVEBROADCAST_PARTICIPANT_EXPORT) {\n            btns.push({\n                label: '导出参会成员',\n                type: 'exportMembers'\n            })\n        }\n        return btns\n    }\n    createAllRight = (btns, record) => {\n        let { status, time_status } = record;\n        if (status == 1) {\n            if (interfaces.MEETING_ENDMEETING) {\n                btns.push({\n                    label: '结束',\n                    type: 'ending'\n                })\n            }\n            if (interfaces.MEETING_APPROVE) {\n                btns.push({\n                    label: '邀请成员',\n                    type: 'invite'\n                });\n                btns.push({\n                    label: '设置嘉宾',\n                    type: 'inviteUser'\n                });\n                // btns.push({\n                //     label: '进入',\n                //     type: 'meeting'\n                // })\n            } else {\n                // btns.push({\n                //     label: '进入',\n                //     type: 'meeting'\n                // })\n            }\n        } else {\n            if (time_status == 1) {\n                if (interfaces.MEETING_APPROVE) {\n                    btns.push({\n                        label: '邀请成员',\n                        type: 'invite'\n                    })\n                    btns.push({\n                        label: '设置嘉宾',\n                        type: 'inviteUser'\n                    });\n                }\n                // btns.push({\n                //     label: '开始',\n                //     type: 'start'\n                // })\n            } else {\n                if (interfaces.MEETING_APPROVE) {\n                    btns.push({\n                        label: '编辑',\n                        type: 'edit'\n                    });\n                    btns.push({\n                        label: '取消',\n                        type: 'delete'\n                    })\n                }\n                // btns.push({\n                //     label: '开始',\n                //     type: 'start'\n                // })\n            }\n        }\n\n        return btns\n    }\n    createMyAllRight = (btns, record) => {\n        let { status, time_status, is_me } = record;\n        if (is_me) {\n            if (status == 1) {\n                if (interfaces.MEETING_ENDMEETING) {\n                    btns.push({\n                        label: '结束',\n                        type: 'ending'\n                    })\n                }\n                if (interfaces.MEETING_APPROVE) {\n                    btns.push({\n                        label: '邀请成员',\n                        type: 'invite'\n                    });\n                    btns.push({\n                        label: '设置嘉宾',\n                        type: 'inviteUser'\n                    });\n                    btns.push({\n                        label: '进入',\n                        type: 'meeting'\n                    })\n                } else {\n                    btns.push({\n                        label: '进入',\n                        type: 'meeting'\n                    })\n                }\n            } else {\n                if (time_status == 1) {\n                    if (interfaces.MEETING_APPROVE) {\n                        btns.push({\n                            label: '邀请成员',\n                            type: 'invite'\n                        })\n                        btns.push({\n                            label: '设置嘉宾',\n                            type: 'inviteUser'\n                        });\n                    }\n                    btns.push({\n                        label: '开始',\n                        type: 'start'\n                    })\n                } else {\n                    if (interfaces.MEETING_APPROVE) {\n                        btns.push({\n                            label: '编辑',\n                            type: 'edit'\n                        });\n                        btns.push({\n                            label: '取消',\n                            type: 'delete'\n                        })\n                    }\n                    btns.push({\n                        label: '开始',\n                        type: 'start'\n                    })\n                }\n            }\n        } else {\n            btns.push({\n                label: '进入',\n                type: 'meeting'\n            })\n        }\n\n        return btns\n    }\n    // 获取列表右侧按钮组件\n    getBtnsFromList = (btns, record) => {\n        if (btns.length <= 3) {\n            return <div style={{ display: 'flex', flexDirection: 'row' }}>\n                {\n                    btns.map(({ label, type }) => {\n                        return <RLButton\n                            type='link'\n                            key={type}\n                            label={label}\n                            onClick={(e) => {\n                                this.optionAction(type, record)\n                                e.stopPropagation()\n                            }}\n                        />\n                    })\n                }\n            </div>\n        } else {\n            let btnList = []\n            let subList = []\n            for (let i = 0; i < btns.length; i++) {\n                if (i < 2) {\n                    btnList.push(\n                        (<RLButton\n                            type='link'\n                            key={btns[i].type}\n                            label={btns[i].label}\n                            onClick={(e) => {\n                                this.optionAction(btns[i].type, record)\n                                e.stopPropagation()\n                            }}\n                        />)\n                    )\n                } else {\n                    subList.push(\n                        { label: btns[i].label, key: btns[i].type }\n                    )\n                }\n            }\n            btnList.push(\n                (<RLDropdown\n                    subBtns={subList}\n                    label='更多'\n                    onClick={(e, key) => {\n                        this.optionAction(key, record)\n                        e.stopPropagation()\n                    }}\n                />)\n            )\n\n\n            return <div style={{ display: 'flex', flexDirection: 'row' }}>\n                {btnList}\n            </div>\n        }\n    }\n\n    /**\n     * 权限操作\n     */\n    optionAction = (type, record) => {\n        if (type === 'invite') {\n            console.log('邀请成员')\n            this.props.listAddUser(record.meeting_id)\n        } else if (type === 'inviteUser') {\n            console.log('邀请嘉宾');\n            this.props.listAddNewUser && this.props.listAddNewUser(record.meeting_id)\n        }\n        else if (type === 'check') {\n            console.log('查看')\n            this.rowClick(record);\n        } else if (type === 'cancel') {\n            // 取消会议\n            this.showModal({\n                content: '是否取消直播',\n                title: '取消会议',\n                okText: '取消会议',\n                cancelText: '我再想想',\n                onOk: () => {\n                    return actionMeeting.deleteMeeting({ meeting_ids: record.meeting_id }).then(res => {\n                        if (res.code === 200) {\n                            this.showToast({ type: 'success', content: '取消成功' })\n                        } else {\n                            this.showToast({ type: 'error', content: res.msg })\n                        }\n                    })\n                },\n                onCancel: () => {\n                },\n                size: 'big'\n            })\n\n        } else if (type === 'edit') {\n            console.log('编辑会议')\n            this.props.changePage('edit', {\n                meetingId: record.meeting_id\n            })\n        } else if (type === 'delete') {\n            // 删除会议\n            this.showModal({\n                title: '您是否确定删除此会议？',\n                okText: '确定',\n                cancelText: '取消',\n                onOk: () => {\n                    return actionMeeting.deleteMeeting({ meeting_ids: record.meeting_id }).then(res => {\n                        if (res.code === 200) {\n                            this.showToast({ type: 'success', content: '删除成功' });\n                            this.getMeetingList();\n                        } else {\n                            this.showToast({ type: 'error', content: res.msg })\n                        }\n                    })\n                },\n                onCancel: () => {\n\n                },\n                size: 'small'\n            })\n\n        } else if (type === 'start') {\n            console.log('开始会议');\n            window.open(config.pullUpLink + '?q=' + record.hash_key)\n        } else if (type === 'meeting') {\n            console.log('进入会议');\n            window.open(config.pullUpLink + '?q=' + record.hash_key)\n        } else if (type === 'examine') {\n            console.log('审核会议')\n            this.props.changePage('examine', {\n                meetingId: record.meeting_id,\n                isExamine: true\n            })\n        } else if (type === 'ending') {\n            console.log('结束会议')\n            this.showModal({\n                title: '您是否确定结束此会议？',\n                okText: '确定',\n                cancelText: '取消',\n                onOk: () => {\n                    return actionMeeting.endMeeting({ meeting_id: record.meeting_id }).then(res => {\n                        if (res.code === 200) {\n                            this.showToast({ type: 'success', content: '结束成功' })\n                            this.getMeetingList()\n                        } else {\n                            this.showToast({ type: 'error', content: res.msg })\n                        }\n                    })\n                },\n                onCancel: () => {\n\n                },\n                size: 'small'\n            })\n        } else if (type === 'exportMembers') {\n            console.log('导出参会者列表');\n            // actionMeeting.exportMemberList(record.meeting_id)\n            actionMeeting.exportMemberList(record.meeting_id).then(res => {\n                if (res.code === 200) {\n                    downloadFile(res.data, '参会者列表.xlsx')\n                } else {\n                    this.showToast({ type: 'error', content: '导出文件出错' })\n                }\n            }).catch(err => {\n                this.showToast({ type: 'error', content: err.msg })\n            })\n        }\n    }\n    //\n    pageChange = (page, pageSize) => {\n        this.getMeetingList({ page })\n    }\n    getMeetingList = ({ page = this.state.upcomingListInfo.page } = { page: this.state.upcomingListInfo.page }) => {\n        this.setState({\n            listLoading: true,\n            // meetingSelected: []\n        })\n        if (this.props.isMyLive) {\n            actionSeminar.myLiveList({\n                ...this.state.searchParam,\n                page,\n                pagesize: this.pageSize,\n            }).then(res => {\n                if (res.code === 200) {\n                    let newState = {\n                        upcomingListInfo: {\n                            list: res.data.list,\n                            page,\n                            count: res.data.count,\n                            pageNum: Math.ceil(res.data.count / this.pageSize)\n                        }\n                    }\n                    this.setState(newState)\n                } else {\n                    this.showToast({ type: 'error', content: res.msg })\n                }\n            }).finally(() => {\n                this.setState({\n                    listLoading: false,\n                })\n            })\n        } else {\n            actionSeminar.getAllLiveList({\n                ...this.state.searchParam,\n                page,\n                pagesize: this.pageSize,\n            }).then(res => {\n                if (res.code === 200) {\n                    let newState = {\n                        upcomingListInfo: {\n                            list: res.data.list,\n                            page,\n                            count: res.data.count,\n                            pageNum: Math.ceil(res.data.count / this.pageSize)\n                        }\n                    }\n                    this.setState(newState)\n                } else {\n                    this.showToast({ type: 'error', content: res.msg })\n                }\n            }).finally(() => {\n                this.setState({\n                    listLoading: false,\n                })\n            })\n        }\n    }\n    getLeftItems = () => {\n        if (this.props.modelName === 'myLive') {\n            if (this.state.listInfo.type === 'endLive') {\n                return [\n                    <RLInput\n                        allowClear\n                        placeholder='请输入直播号'\n                        value={this.state.searchInput}\n                        key={'meeting_Id'}\n                        onChange={(e) => {\n                            this.setState({\n                                searchInput: e.target.value,\n                                searchParam: {\n                                    ...this.state.searchParam,\n                                    room: e.target.value\n                                }\n                            })\n                        }}\n                    />\n                ]\n            }\n        }\n        return [\n            <div className=\"newTimeArea\" key={'date'}>\n                <p>从</p>\n                <RLDatePicker\n                    allowClear\n                    onChange={this.startDateChange}\n                    disabledDate={this.startDisabledDate}\n                    locale={locale}\n                    inputReadOnly={true}\n                    format=\"YYYY-MM-DD\"\n                    placeholder='请选择日期'\n                    value={this.state.start_date}\n                />\n                <p>至</p>\n                <RLDatePicker\n                    allowClear\n                    onChange={this.endDateChange}\n                    disabledDate={this.startDisabledDate}\n                    locale={locale}\n                    inputReadOnly={true}\n                    format=\"YYYY-MM-DD\"\n                    placeholder='请选择日期'\n                    value={this.state.end_date}\n                />\n            </div>,\n            <div className=\"newSelectArea\" key={'input'}>\n                <RLSelect\n                    options={config.liveSearch}\n                    style={{ width: 120, marginLeft: 30, marginRight: 10 }}\n                    placeholder='请选择'\n                    value={this.state.selectOption}\n                    onChange={(e) => {\n                        this.setState({\n                            selectOption: e,\n                            searchParam: {\n                                ...this.state.searchParam,\n                                room: e === 'roomID' ? this.state.searchInput : '',\n                                nickname: e === 'name' ? this.state.searchInput : ''\n                            }\n                        })\n                    }}\n                />\n                <RLInput\n                    allowClear\n                    placeholder='请输入内容'\n                    value={this.state.searchInput}\n                    onChange={(e) => {\n                        this.setState({\n                            searchInput: e.target.value,\n                            searchParam: {\n                                ...this.state.searchParam,\n                                room: this.state.selectOption === 'roomID' ? e.target.value : '',\n                                nickname: this.state.selectOption === 'name' ? e.target.value : '',\n                            }\n                        })\n                    }}\n                />\n            </div>\n        ]\n    }\n    startDateChange = (val, dateString) => {\n        let numTime = dealSearchTime(dateString, true);\n        this.setState({\n            start_date: val,\n            searchParam: {\n                ...this.state.searchParam,\n                start_time: numTime\n            }\n        })\n    }\n    endDateChange = (val, dateString) => {\n        let numTime = dealSearchTime(dateString, false);\n        this.setState({\n            end_date: val,\n            searchParam: {\n                ...this.state.searchParam,\n                end_time: numTime\n            }\n        })\n    }\n    getRightItems = () => {\n        return (\n            [\n                <RLButton\n                    label='搜索'\n                    type='primary'\n                    key={'search'}\n                    onClick={() => { this.getMeetingList({ page: 1 }) }}\n                    style={{ marginRight: 20 }}\n                />,\n                <RLButton\n                    label='重置'\n                    type='default'\n                    key={'reset'}\n                    onClick={this.reset}\n                    style={{ marginRight: 20 }}\n                />\n            ]\n        )\n    }\n    getTableTopRight = () => {\n        return (\n            [\n                (this.props.modelName === 'myLive' && this.state.listInfo.type === 'upcomingLive' ? <RLButton\n                    label='创建直播'\n                    type='primary'\n                    key='create'\n                    style={{ marginRight: 20 }}\n                    onClick={() => {\n                        this.props.changePage('createMeeting')\n                    }}\n                /> : null),\n                (this.props.type === 'endLive' && interfaces.LIVEBROADCAST_PARTICIPANT_EXPORT ? <RLButton\n                    label='批量导出'\n                    type='primary'\n                    key=\"exportList\"\n                    disabled={this.state.allSelect.length ? false : true}\n                    onClick={() => {\n                        actionMeeting.exportMeetingList(this.state.allSelect.join(',')).then(res => {\n                            if (res.code === 200) {\n                                downloadFile(res.data, '直播列表.xlsx')\n                                this.setState({\n                                    allSelect: [],\n                                    allSelectList: []\n                                })\n                            } else {\n                                this.showToast({ type: 'error', content: '导出文件出错' })\n                            }\n                        }).catch(err => {\n                            this.showToast({ type: 'error', content: err.msg })\n                        })\n                    }}\n                    style={{ marginRight: 20 }}\n                /> : null),\n                <RLButton\n                    label='刷新'\n                    type='default'\n                    key={'refresh'}\n                    onClick={this.getMeetingList}\n                    style={{ marginRight: 20 }}\n                />\n            ]\n        )\n    }\n    reset = () => {\n        this.setState({\n            start_date: null,\n            end_date: null,\n            searchInput: '',\n            searchParam: {\n                ...this.state.searchParam,\n                nickname: '',\n                start_time: '',\n                end_time: '',\n                room: ''\n            }\n        })\n    }\n    rowClick = (record) => {\n        this.props.changePage('detail', { meetingId: record.meeting_id })\n    }\n    onSelectChange = (selectedRowKeys, selectedRows) => {\n        let i = 0;\n        let currentPage = this.state.upcomingListInfo.list;\n        let allSelect = [...this.state.allSelect];\n        let allSelectList = [...this.state.allSelectList];\n        for (i; i < currentPage.length; i++) {\n            let isInSelect = selectedRowKeys.findIndex(ele => { return ele == currentPage[i].meeting_id })\n            let isInOrigin = allSelect.findIndex(ele => { return ele == currentPage[i].meeting_id })\n            let isInList = allSelectList.findIndex(ele => { return ele.meeting_id == currentPage[i].meeting_id })\n            if (isInSelect === -1 && isInOrigin !== -1) {\n                allSelect.splice(isInOrigin, 1);\n                if (isInList !== -1) {\n                    allSelectList.splice(isInList, 1);\n                }\n            } else if (isInSelect !== -1 && isInOrigin === -1) {\n                allSelect.push(selectedRowKeys[isInSelect]);\n                if (isInList === -1) {\n                    allSelectList.push(currentPage[i]);\n                }\n            }\n            this.setState({\n                allSelect: [...allSelect],\n                allSelectList: [...allSelectList]\n            })\n        }\n    }\n    render() {\n        let rowSelection = undefined\n        if (this.state.listInfo.type === 'endLive') {\n            rowSelection = {\n                type: \"checkbox\",\n                selectedRowKeys: this.state.allSelect,\n                onChange: this.onSelectChange\n                // onChange: (selectedRowKeys, selectedRows) => {\n                //     this.setState({\n                //         meetingSelected: selectedRowKeys\n                //     })\n                // }\n            }\n        }\n        return (\n            <div className=''>\n                <RLFilterTool leftItems={this.getLeftItems} rightItems={this.getRightItems} />\n                <RLFilterTool rightItems={this.getTableTopRight} />\n                <RLTable\n                    loading={this.state.listLoading}\n                    dataSource={this.state.upcomingListInfo.list}\n                    rowKey='meeting_id'\n                    columns={this.getColumns()}\n                    rowSelection={rowSelection}\n                    paginationInfo={{\n                        total: this.state.upcomingListInfo.count,\n                        pageSize: this.pageSize,\n                        onChange: this.pageChange,\n                        current: this.state.upcomingListInfo.page\n                    }}\n                    rowClassName='rl-table-click-row'\n                />\n            </div>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props\n    }\n})(AllliveList);","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/liveCom/ExamineList.js",["1216","1217","1218","1219","1220","1221","1222","1223","1224","1225","1226","1227","1228","1229","1230","1231","1232","1233"],"import BaseCmp from '@components/BaseCmp.js'\nimport { RLDatePicker, RLFilterTool, RLButton, RLTable, RLDropdown, RLSelect, RLInput } from '@components/index.js'\nimport actionMeeting from '@actions/meetingManage/actionMeeting.js'\nimport actionSeminar from '@actions/seminar/actionSeminar.js'\nimport interfaces from '@/api/interfaces';\nimport { dealSearchTime, dealTableTime } from '@/libs/utils'\nimport config from '@/config.js'\nimport { connect } from 'react-redux';\nimport locale from 'antd/es/date-picker/locale/zh_CN';\nimport ImagesList from '@/libs/images/index.js'\nclass ExamineList extends BaseCmp {\n    constructor(props) {\n        super(props);\n        let auditing = undefined;\n        if (this.props.type === 'haveExamineAll') {\n            auditing = 1;\n        } else if (this.props.type === 'waitExamine') {\n            auditing = 2;\n        } else if (this.props.type === 'haveExmineMe') {\n            auditing = 3;\n        } else if (this.props.type === 'launchMe') {\n            auditing = 4;\n        }\n        this.tableOption = {\n            haveExamineAll: ['meeting_id', 'room', 'meeting_type', 'user_num', 'nickname', 'create_at', 'auditing', 'selfDoIt'],\n            waitExamine: ['meeting_id', 'meeting_type', 'user_num', 'nickname', 'create_at', 'selfDoIt'],\n            haveExmineMe: ['meeting_id', 'room', 'meeting_type', 'user_num', 'nickname', 'create_at', 'auditing', 'selfDoIt'],\n            launchMe: ['meeting_id', 'room', 'meeting_type', 'user_num', 'create_at', 'auditing']\n        }\n        this.state = {\n            start_date: '',\n            end_date: '',\n            searchParam: {  // 搜索列表筛选条件\n                auditing: auditing,\n                aud_status: '',\n                nickname: '',\n                start_time_c: '',\n                end_time_c: ''\n            },\n            upcomingListInfo: {  // 列表信息\n                pageNum: 1,  // 总叶数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: 1,     // 当前第几页\n            },\n            listLoading: true,      // 获取列表中loading\n            listInfo: {\n                type: this.props.type   //haveExamineAll / waitExamine / haveExmineMe / launchMe\n            }\n        };\n    }\n    componentDidMount() {\n        this.props.onRef(this)\n        this.getMeetingList()\n    }\n    createRow = (rowType) => {\n        switch (rowType) {\n            case 'meeting_id':\n                return {\n                    title: '直播',\n                    key: 'meeting_id',\n                    width: '35%',\n                    render: (record) => {\n                        return <div>\n                            <p className='addItemColor' onClick={() => {\n                                this.rowClick(record);\n                            }}>主题:<span className='addTextDecoration'>{record.title}</span></p>\n                            <p><span className='addItemColor'>ID</span>:{record.meeting_id}</p>\n                            <p><img src={ImagesList.menuIcon.newClock} alt='' width='20' height='20' />:{dealTableTime(record.start_time_at)}~{dealTableTime(record.end_time_at)}</p>\n                        </div>\n                    },\n                }\n            case 'room':\n                return {\n                    title: '直播号',\n                    key: 'room',\n                    width: '10%',\n                    render: (record) => {\n                        return <span>{record.room != 0 ? record.room : '——'}</span>\n                    }\n                }\n            case 'meeting_type':\n                return {\n                    title: '直播性质',\n                    key: 'meeting_type',\n                    width: '10%',\n                    render: (record) => {\n                        return <div>\n                            {record.meeting_type == 1 ? '公开' : '非公开'}\n                        </div>\n                    }\n                }\n            case 'user_num':\n                return {\n                    title: '直播人数',\n                    dataIndex: 'user_num',\n                    key: 'user_num',\n                    width: '10%'\n                }\n            case 'nickname':\n                return {\n                    title: '申请人',\n                    dataIndex: 'nickname',\n                    key: 'nickname',\n                    width: '10%'\n                }\n            case 'create_at':\n                return {\n                    title: this.props.type === 'launchMe' ? '提交时间' : '申请时间',\n                    key: 'create_at',\n                    width: '15%',\n                    render: (record) => {\n                        return <div>\n                            {dealTableTime(record.create_at)}\n                        </div>\n                    }\n                }\n            case 'auditing':\n                return {\n                    title: '审核状态',\n                    key: 'auditing',\n                    width: '10%',\n                    render: (record) => {\n                        return <div>\n                            <p>{record.auditing == 1 ? '已通过' : null}</p>\n                            <p>{record.auditing == 2 ? '已拒绝' : null}</p>\n                            <p>{record.auditing == 0 ? '待审核' : null}</p>\n                            <p className='addItemColor' style={{ fontSize: 12 }} onClick={() => {\n                                this.props.changePage('examineDetail', {\n                                    meetingId: record.meeting_id\n                                })\n                            }}>{record.auditing == 1 || record.auditing == 2 ? '审核详情' : null}</p>\n                        </div>\n                    }\n                }\n            case 'selfDoIt':\n                return {\n                    title: '操作',\n                    key: 'selfDoIt',\n                    width: '18%',\n                    render: (record) => {\n                        return this.getOptionBtns(record)\n                    }\n                }\n            default:\n                return undefined\n        }\n    }\n    getColumns = () => {\n        let rowArr = [];\n        this.tableOption[this.state.listInfo.type].forEach(ele => {\n            rowArr.push(this.createRow(ele));\n        })\n        return rowArr\n    }\n    getOptionBtns = (record) => {\n        return this.getBtnsFromList(this.getBtnList(record), record)\n    }\n    getBtnList = (record) => {\n        let btns = []\n        // status 直播状态0未开始1进行中2已开始3已结束\n        // is_me  1.我创建的 0不是我创建的\n        // time_status  1。预约时间到了 0时间没到\n        if (this.state.searchParam.auditing == 1) {\n            btns = this.createAllRight(btns, record)\n        } else if (this.state.searchParam.auditing == 2) {\n            btns = this.createWaitRight(btns, record)\n        } else if (this.state.searchParam.auditing == 3) {\n            btns = this.createAllRight(btns, record)\n        }\n        return btns\n    }\n    createAllRight = (btns, record) => {\n        let { status, time_status } = record;\n        if (record.auditing == 1) {\n            if (status == 1) {\n                if (interfaces.MEETING_APPROVE) {\n                    // btns.push({\n                    //     label: '邀请',\n                    //     type: 'invite'\n                    // });\n                    // btns.push({\n                    //     label: '进入',\n                    //     type: 'meeting'\n                    // })\n                } else {\n                    // btns.push({\n                    //     label: '进入',\n                    //     type: 'meeting'\n                    // })\n                }\n            } else if (status == 3) {\n                btns.push({\n                    label: '查看',\n                    type: 'check'\n                })\n                btns.push({\n                    label: '删除',\n                    type: 'delete'\n                })\n            } else {\n                if (time_status == 1) {\n                    if (interfaces.MEETING_APPROVE) {\n                        // btns.push({\n                        //     label: '邀请',\n                        //     type: 'invite'\n                        // })\n                    }\n                    // btns.push({\n                    //     label: '开始',\n                    //     type: 'start'\n                    // })\n                } else {\n                    if (interfaces.MEETING_APPROVE) {\n                        btns.push({\n                            label: '编辑',\n                            type: 'edit'\n                        });\n                        // btns.push({\n                        //     label: '取消',\n                        //     type: 'delete'\n                        // })\n                    }\n                    // btns.push({\n                    //     label: '开始',\n                    //     type: 'start'\n                    // })\n                }\n            }\n        } else {\n            btns.push({\n                label: '查看',\n                type: 'check'\n            })\n            btns.push({\n                label: '删除',\n                type: 'delete'\n            })\n        }\n\n        return btns\n    }\n    createWaitRight = (btns, record) => {\n        btns.push({\n            label: '查看',\n            type: 'check'\n        })\n        if (interfaces.MEETING_APPROVE) {\n            btns.push({\n                label: '审核',\n                type: 'examine'\n            })\n        }\n        return btns\n    }\n    // 获取列表右侧按钮组件\n    getBtnsFromList = (btns, record) => {\n        if (btns.length <= 3) {\n            return <div style={{ display: 'flex', flexDirection: 'row' }}>\n                {\n                    btns.map(({ label, type }) => {\n                        return <RLButton\n                            type='link'\n                            key={type}\n                            label={label}\n                            onClick={(e) => {\n                                this.optionAction(type, record)\n                                e.stopPropagation()\n                            }}\n                        />\n                    })\n                }\n            </div>\n        } else {\n            let btnList = []\n            let subList = []\n            for (let i = 0; i < btns.length; i++) {\n                if (i < 2) {\n                    btnList.push(\n                        (<RLButton\n                            type='link'\n                            key={btns[i].type}\n                            label={btns[i].label}\n                            onClick={(e) => {\n                                this.optionAction(btns[i].type, record)\n                                e.stopPropagation()\n                            }}\n                        />)\n                    )\n                } else {\n                    subList.push(\n                        { label: btns[i].label, key: btns[i].type }\n                    )\n                }\n            }\n            btnList.push(\n                (<RLDropdown\n                    subBtns={subList}\n                    label='更多'\n                    onClick={(e, key) => {\n                        this.optionAction(key, record)\n                        e.stopPropagation()\n                    }}\n                />)\n            )\n\n\n            return <div style={{ display: 'flex', flexDirection: 'row' }}>\n                {btnList}\n            </div>\n        }\n    }\n\n    /**\n     * 权限操作\n     */\n    optionAction = (type, record) => {\n        if (type === 'joinmeeting') {\n            actionMeeting.getMeetingHash({\n                master: record.master,\n                roomId: record.room,\n                startTime: record.start_time,\n                endTime: record.end_time,\n                title: record.title,\n                password: record.password.password\n            }).then(res => {\n                if (res.code === 200) {\n                    window.open(config.pullUpLink + '?q=' + res.data)\n                } else {\n                    this.showToast({ type: 'error', content: '获取直播链接错误' })\n                }\n            })\n        } else if (type === 'invite') {\n            console.log('邀请')\n            this.props.listAddUser(record.meeting_id)\n        } else if (type === 'check') {\n            console.log('查看')\n            this.rowClick(record);\n        } else if (type === 'cancel') {\n            // 取消直播\n            this.showModal({\n                content: '是否取消直播',\n                title: '取消直播',\n                okText: '取消直播',\n                cancelText: '我再想想',\n                onOk: () => {\n                    return actionMeeting.deleteMeeting({ meeting_ids: record.meeting_id }).then(res => {\n                        if (res.code === 200) {\n                            this.showToast({ type: 'success', content: '取消成功' })\n                            this.getMeetingList()\n                        } else {\n                            this.showToast({ type: 'error', content: res.msg })\n                        }\n                    })\n                },\n                onCancel: () => {\n                },\n                size: 'big'\n            })\n\n        } else if (type === 'edit') {\n            console.log('编辑直播')\n            this.props.changePage('edit', {\n                meetingId: record.meeting_id\n            })\n        } else if (type === 'delete') {\n            // 删除会议\n            this.showModal({\n                title: '您是否确定删除此直播？',\n                okText: '确定',\n                cancelText: '取消',\n                onOk: () => {\n                    return actionMeeting.deleteMeeting({ meeting_ids: record.meeting_id }).then(res => {\n                        if (res.code === 200) {\n                            this.showToast({ type: 'success', content: '删除成功' });\n                            this.getMeetingList()\n                        } else {\n                            this.showToast({ type: 'error', content: res.msg })\n                        }\n                    })\n                },\n                onCancel: () => {\n\n                },\n                size: 'small'\n            })\n\n        } else if (type === 'start') {\n            console.log('开始直播');\n            window.open(config.pullUpLink + '?q=' + record.hash_key)\n        } else if (type === 'meeting') {\n            console.log('进入直播');\n            window.open(config.pullUpLink + '?q=' + record.hash_key)\n        } else if (type === 'examine') {\n            console.log('审核直播')\n            this.props.changePage('examine', {\n                meetingId: record.meeting_id,\n                isExamine: true\n            })\n        }\n    }\n    //\n    pageChange = (page, pageSize) => {\n        this.getMeetingList({ page })\n    }\n    getMeetingList = ({ page = this.state.upcomingListInfo.page } = { page: this.state.upcomingListInfo.page }) => {\n        this.setState({\n            listLoading: true,\n        })\n        actionSeminar.examineLiveList({\n            ...this.state.searchParam,\n            page,\n            pagesize: this.pageSize,\n        }).then(res => {\n            if (res.code === 200) {\n                let newState = {\n                    upcomingListInfo: {\n                        list: res.data.list,\n                        page,\n                        count: res.data.count,\n                        pageNum: Math.ceil(res.data.count / this.pageSize)\n                    }\n                }\n                this.setState(newState)\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        }).finally(() => {\n            this.setState({\n                listLoading: false,\n            })\n        })\n    }\n    getLeftItems = () => {\n        let status = [];\n        let status_value0 = {\n            label: '未审核',\n            value: 0\n        }\n        let status_value1 = {\n            label: '已通过',\n            value: 1\n        }\n        let status_value2 = {\n            label: '已拒绝',\n            value: 2\n        }\n        if (this.state.searchParam.auditing == 1) {\n            status = [status_value1, status_value2]\n        } else if (this.state.searchParam.auditing == 3) {\n            status = [status_value1, status_value2]\n        } else if (this.state.searchParam.auditing == 4) {\n            status = [status_value0, status_value1, status_value2]\n        }\n        return [\n            <div className=\"newTimeArea\" key={'date'}>\n                <p>从</p>\n                <RLDatePicker\n                    allowClear\n                    onChange={this.startDateChange}\n                    disabledDate={this.startDisabledDate}\n                    locale={locale}\n                    inputReadOnly={true}\n                    format=\"YYYY-MM-DD\"\n                    placeholder='请选择日期'\n                    value={this.state.start_date}\n                />\n                <p>至</p>\n                <RLDatePicker\n                    allowClear\n                    onChange={this.endDateChange}\n                    disabledDate={this.startDisabledDate}\n                    locale={locale}\n                    inputReadOnly={true}\n                    format=\"YYYY-MM-DD\"\n                    placeholder='请选择日期'\n                    value={this.state.end_date}\n                />\n            </div>,\n            <div className=\"newSelectArea\" key={'input'}>\n                {status.length ? <RLSelect\n                    options={status}\n                    allowClear\n                    style={{ width: 120, marginLeft: 30, marginRight: 10 }}\n                    placeholder='请选择审核状态'\n                    value={this.state.searchParam.aud_status ? this.state.searchParam.aud_status : undefined}\n                    onChange={(e) => {\n                        if (e === undefined) {\n                            e = ''\n                        }\n                        this.setState({\n                            searchParam: {\n                                ...this.state.searchParam,\n                                aud_status: e\n                            }\n                        })\n                    }}\n                /> : null}\n                {this.state.searchParam.auditing != 4 ? <RLInput\n                    placeholder='请输入创建者姓名'\n                    allowClear\n                    value={this.state.searchParam.nickname}\n                    style={{ width: 150, marginLeft: 20, marginRight: 10 }}\n                    onChange={(e) => {\n                        this.setState({\n                            searchParam: {\n                                ...this.state.searchParam,\n                                nickname: e.target.value\n                            }\n                        })\n                    }}\n                /> : null}\n            </div>\n        ]\n    }\n    startDateChange = (val, dateString) => {\n        let numTime = dealSearchTime(dateString, true);\n        this.setState({\n            start_date: val,\n            searchParam: {\n                ...this.state.searchParam,\n                start_time_c: numTime\n            }\n        })\n    }\n    endDateChange = (val, dateString) => {\n        let numTime = dealSearchTime(dateString, false);\n        this.setState({\n            end_date: val,\n            searchParam: {\n                ...this.state.searchParam,\n                end_time_c: numTime\n            }\n        })\n    }\n    getRightItems = () => {\n        return (\n            [\n                <RLButton\n                    label='搜索'\n                    type='primary'\n                    key={'search'}\n                    onClick={() => { this.getMeetingList({ page: 1 }) }}\n                    style={{ marginRight: 20 }}\n                />,\n                <RLButton\n                    label='重置'\n                    type='default'\n                    key={'reset'}\n                    onClick={this.reset}\n                    style={{ marginRight: 20 }}\n                />\n            ]\n        )\n    }\n    getTableTopRight = () => {\n        return (\n            [\n                <RLButton\n                    label='刷新'\n                    type='default'\n                    key={'refresh'}\n                    onClick={this.getMeetingList}\n                    style={{ marginRight: 20 }}\n                />\n            ]\n        )\n    }\n    reset = () => {\n        this.setState({\n            start_date: null,\n            end_date: null,\n            searchParam: {\n                ...this.state.searchParam,\n                aud_status: '',\n                nickname: '',\n                start_time_c: '',\n                end_time_c: ''\n            }\n        })\n    }\n    rowClick = (record) => {\n        this.props.changePage('detail', { meetingId: record.meeting_id })\n    }\n    render() {\n        return (\n            <div className=''>\n                <RLFilterTool leftItems={this.getLeftItems} rightItems={this.getRightItems} />\n                <RLFilterTool rightItems={this.getTableTopRight} />\n                <RLTable\n                    loading={this.state.listLoading}\n                    dataSource={this.state.upcomingListInfo.list}\n                    rowKey='meeting_id'\n                    columns={this.getColumns()}\n                    paginationInfo={{\n                        total: this.state.upcomingListInfo.count,\n                        pageSize: this.pageSize,\n                        onChange: this.pageChange,\n                        current: this.state.upcomingListInfo.page\n                    }}\n                    rowClassName='rl-table-click-row'\n                />\n            </div>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props\n    }\n})(ExamineList);","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/marketingTool/actionEventRegistration.js",["1234","1235","1236"],"import { getData } from '@/libs/utils.js'\nimport store from '@/store/index.js'\nimport actionTypes from '@/store/actionTypes.js'\nimport interfaces from '@/api/interfaces.js'\nimport config from '@/config.js'\n\nconst actionEventRegistration = {\n\n    // 根据链接获取二维码\n    getQRCode(data) {\n        return getData({\n            method: 'get',\n            url: interfaces.GET_QRCODE,\n            data\n        })\n    },\n    // 获取活动列表\n    getEventList(data) {\n        return getData({\n            method: 'get',\n            url: interfaces.EVENT_LIST,\n            data\n        })\n    },\n    // 获取显示字段\n    getEventShowField() {\n        return getData({\n            method: 'get',\n            url: interfaces.EVENT_SHOW_FIELD\n        })\n    },\n    // 活动创建\n    eventCreate(data) {\n        return getData({\n            method: 'post',\n            url: interfaces.EVENT_CREATE,\n            data\n        })\n    },\n    // 活动编辑\n    eventEdit(data) {\n        return getData({\n            method: 'post',\n            url: interfaces.EVENT_EDIT,\n            data\n        })\n    },\n    // 活动详情\n    getEventDetail(data) {\n        return getData({\n            method: 'get',\n            url: interfaces.EVENT_DETAIL,\n            data\n        })\n    },\n    // 活动删除\n    eventDelete(data) {\n        return getData({\n            method: 'get',\n            url: interfaces.EVENT_DELETE,\n            data\n        })\n    },\n    // 活动上下架\n    eventUpdateTag(data) {\n        return getData({\n            method: 'get',\n            url: interfaces.EVENT_UPDATE_TAG,\n            data\n        })\n    },\n    // 报名信息\n    getRegistrationList(data) {\n        return getData({\n            method: 'get',\n            url: interfaces.REGISTRATION_INFO,\n            data\n        })\n    },\n    // 导出报名信息\n    registrationInfoExport(data) {\n        return getData({\n            method: 'get',\n            url: interfaces.REGISTRATION_INFO_EXPORT,\n            data,\n            responseType: 'blob'\n        })\n    },\n\n    getActionUser(data){\n        return getData({\n            method: 'get',\n            url: interfaces.REGISTRATION_USER_GET,\n            data: data\n        })\n    }\n\n}\n\nexport default actionEventRegistration\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/marketingTool/components/EventRegistration/CmpRegistrationList.js",["1237","1238","1239","1240","1241","1242","1243","1244","1245","1246"],"import BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport {\n    RLInput, RLButton, RLSelect, RLTable, RLFilterTool, RLSwitch, RLTooltip\n} from '@components/index.js'\nimport utils, { downloadFile } from '@/libs/utils.js'\nimport config from '@/config.js'\nimport { dealTableTime, dealDateTime } from '@/libs/utils.js'\nimport locale from 'antd/es/date-picker/locale/zh_CN'\n\nimport actionEventRegistration from '@actions/marketingTool/actionEventRegistration.js'\n\n\nclass CmpRegistrationList extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.state = {\n            searchParam: {   // 筛选报名信息\n                id: props.eventId,\n                user_type: undefined,   // 用户类型\n            },\n            registrationInfo: {\n                pageNum: 1,  // 总页数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: 1,     // 当前第几页\n            },\n            selectedMemberKeys: [],  // 选中的用户\n\n            getListLoading: true,   // 获取列表loading\n            allSelect: [],    //所有选择ID集合\n        }\n        this.columns = [\n            {\n                title: '序号',\n                dataIndex: 'id',\n                key: 'id',\n                width: '8%',\n                render: (text, record, index) => {\n                    return <div>{(this.state.registrationInfo.page - 1) * this.pageSize + index + 1}</div>\n                }\n            },\n            {\n                title: '用户昵称',\n                dataIndex: 'nickname',\n                key: 'nickname',\n                width: '15%',\n                render: (text, record) => {\n                    return (\n                        <div>\n                            <RLTooltip placement=\"bottomLeft\" title={record.nickname}>\n                                <div className='line-clamp-noColor'>\n                                    {record.nickname}\n                                </div>\n                            </RLTooltip>\n                            {\n                                record.user_type === 2 &&\n                                <div style={{ fontSize: 14 }}>(认证用户)</div>\n                            }\n                        </div>\n                    )\n                }\n            },\n            {\n                title: '性别',\n                dataIndex: 'sex',\n                key: 'sex',\n                width: '8%',\n                render: (text, record) => {\n                    switch (record.sex) {\n                        case 0:\n                            return <div>-</div>\n                        case 1:\n                            return <div>男</div>\n                        case 2:\n                            return <div>女</div>\n                        default:\n                            return <div>-</div>\n                    }\n                }\n            },\n            {\n                title: '邮箱',\n                key: 'email',\n                width: '12%',\n                render: (text, record) => {\n                    return <RLTooltip placement=\"bottomLeft\" title={record.email}>\n                        <div className='line-clamp-noColor'>\n                            {record.email}\n                        </div>\n                    </RLTooltip>\n                }\n            },\n            {\n                title: '手机号',\n                key: 'phone',\n                width: '12%',\n                render: (text, record) => {\n                    return <RLTooltip placement=\"bottomLeft\" title={record.phone}>\n                        <div className='line-clamp-noColor'>\n                            {record.phone}\n                        </div>\n                    </RLTooltip>\n                }\n            },\n            {\n                title: '证件号',\n                key: 'certificates',\n                width: '12%',\n                render: (text, record) => {\n                    return <RLTooltip placement=\"bottomLeft\" title={record.certificates}>\n                        <div className='line-clamp-noColor'>\n                            {record.certificates}\n                        </div>\n                    </RLTooltip>\n                }\n            },\n            {\n                title: '机构名称',\n                dataIndex: 'company',\n                key: 'company',\n                width: '12%',\n                render: (text, record) => {\n                    return <RLTooltip placement=\"bottomLeft\" title={record.company}>\n                        <div className='line-clamp-noColor'>\n                            {record.company}\n                        </div>\n                    </RLTooltip>\n                }\n            },\n            {\n                title: '提交时间',\n                dataIndex: 'create_at',\n                key: 'create_at',\n                width: '13%',\n                render: (text, record) => {\n                    return <div>\n                        {dealTableTime(record.create_at)}\n                    </div>\n                }\n            }\n        ]\n    }\n    componentDidMount() {\n        this.getRegistrationList()\n    }\n    componentWillUnmount() {\n\n    }\n\n    getRegistrationList({ sign, page = this.state.registrationInfo.page } = { sign: true, page: this.state.registrationInfo.page }) {\n        if (sign) {\n            this.setState({\n                getListLoading: true\n            })\n        }\n        actionEventRegistration.getRegistrationList({\n            ...this.state.searchParam,\n            user_type: typeof(this.state.searchParam.user_type) === 'undefined' ? '' : this.state.searchParam.user_type,\n            page,\n            page_size: this.pageSize\n        }).then(res => {\n            if (res.code === 200) {\n                if (res.date && res.data.list.length === 0 && page > 1) {\n                    this.getRegistrationList({ page: page - 1 })\n                } else {\n                    let newState = {\n                        registrationInfo: {\n                            list: res.data.list,\n                            page,\n                            count: res.data.count,\n                            pageNum: Math.ceil(res.data.count / this.pageSize)\n                        }\n                    }\n                    this.setState(newState)\n                }\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        }).finally(() => {\n            this.setState({\n                getListLoading: false\n            })\n        })\n    }\n\n    pageTitle = () => {\n        return (\n            <div className=\"custom-page-title\">\n                <span>报名信息</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.changePage('list', { page: this.props.page })\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n\n    getleftItems = () => {\n        return ([\n            <div>活动主题：{this.props.eventTitle}</div>\n        ])\n    }\n\n    getRightItems = () => {\n        return ([\n            <RLSelect\n                options={[\n                    { value: 2, label: '认证用户' },\n                    { value: 1, label: '普通用户' }\n                ]}\n                style={{ width: 200, marginRight: 12 }}\n                allowClear\n                key='user_type'\n                placeholder='用户类型'\n                value={this.state.searchParam.user_type}\n                onChange={val => {\n                    this.setState({\n                        searchParam: {\n                            ...this.state.searchParam,\n                            user_type: val\n                        }\n                    }, () => {\n                        this.getRegistrationList()\n                    })\n                }}\n            />,\n            <RLButton\n                label='批量导出'\n                key='export'\n                disabled={this.state.allSelect.length <= 0}\n                onClick={() => {\n                    actionEventRegistration.registrationInfoExport({ ids: this.state.allSelect.join(',') }).then(res => {\n                        if (res.code === 200) {\n                            downloadFile(res.data, '活动报名信息.xlsx')\n                            this.setState({\n                                allSelect: []\n                            })\n                        } else {\n                            this.showToast({ type: 'error', content: '导出文件出错' })\n                        }\n                    }).catch(err => {\n                        console.log(err)\n                    })\n                }}\n            />\n        ])\n    }\n\n    onSelectChange = (selectedRowKeys, selectedRows) => {\n        let i = 0\n        let currentPage = this.state.registrationInfo.list\n        let allSelect = [...this.state.allSelect]\n        for (i; i < currentPage.length; i++) {\n            let isInSelect = selectedRowKeys.findIndex(ele => { return ele == currentPage[i].id })\n            let isInOrigin = allSelect.findIndex(ele => { return ele == currentPage[i].id })\n            // 取消勾选\n            if (isInSelect === -1 && isInOrigin !== -1) {\n                allSelect.splice(isInOrigin, 1)\n            }\n            // 勾选\n            else if (isInSelect !== -1 && isInOrigin === -1) {\n                allSelect.push(selectedRowKeys[isInSelect])\n            }\n            this.setState({\n                allSelect: [...allSelect]\n            })\n        }\n    }\n\n    pageChange = (page, pageSize) => {\n        this.getRegistrationList({ page })\n    }\n\n    render() {\n        const { list, count, page } = this.state.registrationInfo\n        return (\n            <WindowContainer title={this.pageTitle}>\n                <div className=\"page-info-list\">\n                    <RLFilterTool leftItems={this.getleftItems} rightItems={this.getRightItems} />\n                    <RLTable\n                        loading={this.state.getListLoading}\n                        dataSource={list}\n                        rowKey='id'\n                        columns={this.columns}\n                        rowSelection={{\n                            type: 'checkbox',\n                            selectedRowKeys: this.state.allSelect,\n                            onChange: this.onSelectChange,\n                            getCheckboxProps: (record) => ({\n                                disabled: false\n                            })\n                        }}\n                        paginationInfo={{\n                            // selectedRowKeys: this.state.selectedMemberKeys,\n                            total: count,\n                            pageSize: this.pageSize,\n                            onChange: this.pageChange,\n                            current: page\n                        }}\n                        rowClassName='rl-table-click-row'\n                    />\n                </div>\n            </WindowContainer>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props\n    }\n})(CmpRegistrationList)\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/marketingTool/components/QAManage/CmpQuestionEdit.js",["1247","1248","1249","1250","1251","1252","1253","1254","1255","1256"],"import BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport { RLButton, RLDivider, RLTextarea, RLSwitch } from '@components/index.js'\nimport actionQAManage from '@actions/marketingTool/actionQAManage.js'\nimport commonAction from '@actions/commonActions'\nimport utils from '@/libs/utils.js'\nimport config from '@/config.js'\nimport CmpFile from './CmpFile.js';\nimport moment from 'moment';\nimport { createRef } from 'react'\nimport RLCheckbox from '../../../../components/RLCheckbox.js'\nimport { Divider, Upload } from 'antd';\nimport { StaticRouter } from 'react-router-dom'\nclass CmpCommentEdit extends BaseCmp {\n    constructor(props) {\n        super(props);\n\n        this.questionId = props.questionId;\n        this.questionPage = props.questionPage;\n        this.is_reply = props.is_reply;\n\n        this.is_edit = this.is_reply\n\n        this.state = {\n            question: {\n                accessory: {\n                    urls: []\n                },\n                creator: {}\n            },\n            reply: [],\n\n            is_edit: this.is_reply,\n\n            content: \"\",\n            urls: [],\n            is_show: 0,\n\n            addLoading: false\n        }\n        this.form = createRef()\n    }\n    componentWillMount() {\n        this.getQuestionDetail();\n    }\n\n    replyEdit(){\n        if(this.state.content.length === 0){\n            this.showToast({type:'error',content:'请输入回复内容'});\n            return;\n        }\n        if(this.state.content.length > 1000){\n            this.showToast({type:'error',content:'回复字数不得大于1000'});\n            return;\n        }\n        this.setState({\n            addLoading: true\n        });\n        actionQAManage.replyEdit({\n            id: this.state.reply[0].id,\n            content: this.state.content,\n            is_show: this.state.is_show,\n            urls: this.state.urls\n        }).then(res=>{\n            if(res.code === 200){\n                this.setState({\n                    addLoading: false\n                })\n                this.showToast({type:'sucuess',content:'修改成功'});\n                this.props.changePage('list', {\n                    questionPage: this.questionPage\n                })\n            }else{\n                this.setState({\n                    addLoading: false\n                })\n                this.showToast({type:'error',content: res.msg});\n            }\n        })\n    }\n    replyCommit(){\n        if(this.state.content.length === 0){\n            this.showToast({type:'error',content:'请输入回复内容'});\n            return;\n        }\n        if(this.state.content.length > 1000){\n            this.showToast({type:'error',content:'回复字数不得大于1000'});\n            return;\n        }\n        this.setState({\n            addLoading: true\n        });\n        \n        actionQAManage.replyCommit({\n            id: this.questionId,\n            content: this.state.content,\n            is_show: this.state.is_show,\n            urls: this.state.urls\n        }).then(res =>{\n            if(res.code === 200){\n                this.showToast({type:'sucuess',content:'回复成功'});\n                this.props.changePage('list', {\n                    questionPage: this.questionPage\n                })\n            }\n        });\n    }\n    pageTitle = () => {\n        return (\n            <div className=\"custom-page-title\">\n                <span>问题回复</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.changePage('list',{\n                            questionPage: this.questionPage\n                        })\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n    getQuestionDetail(){\n        actionQAManage.getQuestionDetail({\n            id: this.questionId\n        }).then(res => {\n            if(res.code === 200){\n                console.log('-------res------',res)\n                this.setState({\n                    question: res.data.question,\n                    reply: res.data.reply,\n                    content: res.data.reply[0] ? res.data.reply[0].content : '',\n                    urls: res.data.reply[0] ? res.data.reply[0].accessory.urls : [],\n                    is_show: res.data.question.is_show,\n                });\n            }\n        });\n    }\n\n    pageTitle = () => {\n        return (\n            <div className=\"custom-page-title\">\n                <span>{this.is_reply ? '问题回复': '问题查看'}</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.changePage('list',{\n                            questionPage: this.questionPage\n                        });\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n    render() {\n        console.log('-------question-------', this.state.question)\n        return (\n            <WindowContainer title={this.pageTitle}>\n                <div className='page-userAdd'>\n                        <div style={{ display:'flex', flexDirection:'row',marginBottom:20}}>\n                            <div style={{width:100,textAlign:'right',marginRight:50}}>提问者</div>\n                            <div>\n                                {this.state.question.creator.nickname}\n                                {this.state.question.is_hide !== 0 && this.state.question.creator.approval_status === 3 && <span>(认证用户)</span>}\n                            </div>\n                        </div>\n                        <div style={{ display:'flex', flexDirection:'row',marginBottom:20}}>\n                            <div style={{width:100,textAlign:'right',marginRight:50}}>提问时间</div>\n                            <div>{this.state.question.create_at && moment(this.state.question.create_at * 1000).format('YYYY-MM-DD HH:mm')}</div>\n                        </div>\n                        <div style={{ display:'flex', flexDirection:'row',marginBottom:40}}>\n                            <div style={{width:100,textAlign:'right',marginRight:50}}>问题描述</div>\n                            <div>{this.state.question.describe}</div>\n                        </div>\n                        <div style={{ display:'flex', flexDirection:'row',marginBottom:40}}>\n                            <div style={{width:100,textAlign:'right',marginRight:50}}>问题详情</div>\n                            <div>\n                                <div>{this.state.question.detail}</div>\n                                <div style={{display:'flex',flexDirection:'row',flexWrap:'wrap'}}>\n                                    {\n                                        this.state.question.accessory.urls\n                                        .filter( obj => !obj.title.endsWith('.pdf') && !obj.title.endsWith('.PDF'))\n                                        .map( obj => {\n                                            return <img src={obj.url} key={obj.title} style={{width:160,height:120,marginLeft:10}}/>\n                                        })\n                                    }\n                                </div>\n                                <div >\n                                    {\n                                        this.state.question.accessory.urls\n                                        .filter( obj => obj.title.endsWith('.pdf') || obj.title.endsWith('.PDF'))\n                                        .map( obj => {\n                                            return <CmpFile \n                                                        src={obj.url}\n                                                        name={obj.title}\n                                                        editable={false}\n                                                        click={()=>{\n                                                            window.open(obj.url);\n                                                        }}\n                                                    />\n                                        })\n                                    }\n                                </div>\n                            </div>\n                        </div>\n                        {\n                            !this.is_reply && <div style={{color:'#8F1D22'}}>管理员-{this.state.reply[0] && this.state.reply[0].creator}已回复</div>\n                        }\n                        <Divider style={{marginTop: 10, marginBottom:10}}/>\n                        <div style={{width:100,paddingLeft:5,textAlign:'left',marginRight:50,borderLeft:'5px solid #8F1D22'}}>回复</div>\n                        \n                        {\n\n                            this.state.is_edit ? \n                            <>\n                                <div style={{ display:'flex', flexDirection:'row',marginBottom:20, position:'relative'}}>\n                                    <div style={{width:100,textAlign:'right',marginRight:50}}><span style={{color:'red'}}>*</span>回复内容</div>\n                                    <div style={{position:'relative'}}>\n                                        <RLTextarea \n                                            value={this.state.content}\n                                            placeholder=\"请输入回复\"\n                                            onChange={(e)=>{\n                                                this.setState({\n                                                    content: e.target.value\n                                                })\n                                            }}\n                                            style={{width: 520, height: 120}}\n                                        />\n                                        <div style={{position:'absolute',right:5,bottom:5, color:this.state.content.length > 1000 ? 'red':''}}>{ this.state.content.length } / 1000 </div>\n                                    </div>   \n                                </div>\n\n                                <div style={{ display:'flex', flexDirection:'row',marginBottom:20}}>\n                                    <div style={{width:100,textAlign:'right',marginRight:50}}>辅助材料</div>\n                                    <div>\n                                        <div style={{display:'flex',flexDirection:'row',alignItems:'flex-end'}}>\n                                            <Upload \n                                                accept=\".jpeg,.png,.pdf\"\n                                                showUploadList={false}\n                                                customRequest={(upload) =>{\n                                                    if(! /^.*\\.(jpg|JPG|png|PNG|pdf|PDF)$/.test(upload.file.name)){\n                                                        this.showToast({type:'error', content:'上传文件类型应为jpg、png、pdf'});\n                                                        return;\n                                                    }\n                                                    if (upload.file.size > 5 * 1024 * 1024) {\n                                                        this.showToast('文件大小不应大于5M');\n                                                        return;\n                                                    }\n                                                    let formData = new FormData();\n                                                    formData.append('type', 'doc')\n                                                    formData.append('resource', upload.file);\n                                                    commonAction.fileUpload(formData).then(res => {\n                                                        if(res.code === 200){\n                                                            this.state.urls.push({title: upload.file.name, url: res.data.fileurl});\n                                                            this.forceUpdate();\n                                                        }else{\n                                                            this.showToast({type:'error',content: '上传失败'})\n                                                        }\n                                                       \n                                                    })\n                                                }}\n                                            >\n                                                <RLButton label=\"上传文件\"/>\n                                            </Upload>\n                                            <div style={{marginLeft:10}}>支持上传jpg、png、pdf文件，文件大小不超过5M</div>\n                                        </div>\n                                        {\n                                            this.state.urls.map(obj => {\n                                                return <CmpFile \n                                                    src={obj.url}\n                                                    name={obj.title}\n                                                    editable={true}\n                                                    onDelete={()=>{\n                                                        let index = this.state.urls.findIndex(url => url.url === obj.url);\n                                                        if(index >= 0){\n                                                            this.state.urls.splice(index, 1);\n                                                            this.forceUpdate();\n                                                        }\n                                                    }}\n                                                />\n                                            })\n                                        }\n                                    </div>\n                                </div>\n                                <div style={{ display:'flex', flexDirection:'row',marginBottom:20}}>\n                                    <div style={{width:100,textAlign:'right',marginRight:50}}>是否显示</div>\n                                    <RLSwitch \n                                        checked={this.state.is_show === 1}\n                                        onChange={(e)=>{\n                                            this.setState({\n                                                is_show: e ? 1 :0\n                                            })\n                                        }}\n                                    />\n                                </div>\n                            </>:\n                                <div style={{ display:'flex', flexDirection:'row',marginBottom:40}}>\n                                    <div style={{width:100, textAlign:'right',marginRight:50}}>回复详情</div>\n                                    <div style={{flex:1}}>\n                                        <div>{this.state.reply[0] && this.state.reply[0].content}</div>\n                                        <div>\n                                            {\n                                                this.state.urls\n                                                .filter( obj => !obj.url.endsWith('.pdf') && !obj.url.endsWith('.PDF') )\n                                                .map( obj => {\n                                                    return <img src={obj.url} style={{width:200,height:120}}></img>\n                                                })\n                                            }\n                                        </div>\n                                        <div style={{display:'flex',flexDirection:'row',flexWrap:'wrap'}}>\n                                            {\n                                                this.state.urls\n                                                .filter( obj => obj.url.endsWith('.pdf') || obj.url.endsWith('.PDF'))\n                                                .map( obj => {\n                                                    return <CmpFile \n                                                                src={obj.url}\n                                                                name={obj.title}\n                                                                editable={false}\n                                                            />\n                                                })\n                                            }\n                                        </div>\n                                    </div>\n                                </div>\n                        }\n                        \n                        <div style={{ display: 'flex', justifyContent: 'center',marginTop:20 }}>\n                            <RLButton type=\"default\" label='取消' width={80}\n                                style={{ display: 'inline-block' }}\n                                onClick={() => {\n                                    this.props.changePage('list',{\n                                        questionPage: this.questionPage\n                                    })\n                                }} />\n\n                            {\n                                this.is_reply ? <RLButton type=\"primary\"\n                                                    label=\"提交回复\"\n                                                    loading={this.addLoading}\n                                                    style={{ marginLeft: 40, display: 'inline-block' }}\n                                                    loading={this.state.addLoading}\n                                                    width={80}\n                                                    onClick={()=>{\n                                                        this.replyCommit();\n                                                    }}\n                                                    style={{ width: 110, marginLeft:30 }}\n                                                /> : \n                                                    \n                                                <>\n                                                    {\n                                                        this.state.reply[0] && this.state.reply[0].uid === this.props.userInfo.id ? \n                                                        <>\n                                                            {\n                                                                this.state.is_edit ? \n                                                                <RLButton type=\"primary\"\n                                                                    label=\"提交修改\"\n                                                                    addLoading={this.addLoading}\n                                                                    style={{ marginLeft: 40, display: 'inline-block' }}\n                                                                    loading={this.state.addLoading}\n                                                                    width={80}\n                                                                    onClick={()=>{\n                                                                        this.replyEdit();\n                                                                    }}\n                                                                    style={{width:110, marginLeft:30}}\n                                                                />:\n                                                                <RLButton type=\"primary\"\n                                                                    label=\"编辑\"\n                                                                    style={{ marginLeft: 40, display: 'inline-block' }}\n                                                                    width={80}\n                                                                    onClick={()=>{\n                                                                        this.setState({\n                                                                            is_edit: true\n                                                                        })\n                                                                    }}\n                                                                />\n                                                            }\n                                                        </>: null\n                                                    }\n\n                                                </>\n                                                \n                            }\n                            \n                        </div>\n                </div>\n            </WindowContainer >\n        )\n    }\n\n}\nexport default connect((store, props) => {\n    return {\n        ...props,\n        userInfo: store.personalInfo.userInfo\n    }\n})(CmpCommentEdit)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/marketingTool/components/QAManage/CmpQuestionList.js",["1257","1258","1259","1260","1261","1262","1263","1264","1265"],"import { createRef } from 'react';\nimport BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport { RLInput, RLButton, RLSelect, RLTable, RLFilterTool, RLTooltip, RLDatePicker, RLModal, RLForm, RLFormItem, RLRadioGroup, RLTextarea, RLSwitch } from '@components/index.js'\nimport interfaces from '@/api/interfaces'\nimport actionQAManage from '@actions/marketingTool/actionQAManage.js';\nimport moment from 'moment';\nclass CmpQuestionList extends BaseCmp {\n    constructor(props) {\n        super(props);\n        this.vodId = props.vodId;\n        this.vodPage = props.vodPage;\n        this.state = {\n            type: 0,\n            questionListInfo: {\n                pageNum: 1,  // 总叶数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: props.questionPage || 1,     // 当前第几页\n            },\n            getListLoading: true,       // 获取列表loading\n        }\n        this.columns = [\n            {\n                title: '序号',\n                width: '10%',\n                key: 'title',\n                render: (text, record, index)=>{\n                    return (<div>\n                        { (this.state.questionListInfo.page - 1) * this.pageSize + index + 1 }\n                    </div>)\n                }\n            },\n            {\n                title: '问题类型',\n                dataIndex: 'class_name',\n                key: 'class_name',\n                width: '15%',\n            },\n            {\n                title: '问题描述',\n                dataIndex: 'describe',\n                key: 'describe',\n                width: '25%',\n                render: (text, record) => <RLTooltip placement=\"bottomLeft\" title={record.describe}>\n                    <div className='line-clamp-noColor'>\n                        {record.describe}\n                    </div>\n                </RLTooltip>\n            },\n            {\n                title: '提问时间',\n                dataIndex: 'create_at',\n                key: 'create_at',\n                width: '15%',\n                render: (text, record) => {\n                    return <div>{moment((record.create_at)*1000).format('YYYY-MM-DD HH:mm')}</div>\n                }\n            },\n            {\n                title: '提问者',\n                dataIndex: 'creator',\n                key: 'creator',\n                width: '10%',\n                render: (text, record) => {\n                    return <div>\n                        {record.creator && record.creator.nickname}\n                        {record.is_hide !== 0 && record.creator.approval_status === 3 && <span>(认证用户)</span>}\n                    </div>\n                }\n            },\n            {\n                title: '显示/隐藏',\n                dataIndex: 'is_hide',\n                key: 'is_hide',\n                width: '10%',\n                render: (text, record, index) => {\n                    return <div>\n                        <RLSwitch \n                            checked = {record.is_show === 1}\n                            defaultChecked = {record.is_show === 1}\n                            onChange = {(e) => {\n                                actionQAManage.toggleShow({\n                                    id: record.id,\n                                    is_show: e ? 1 : 0\n                                }).then(res =>{\n                                    if(res.code === 200){\n                                        this.getQuestionList();\n                                    }\n                                })\n                            }}\n                        />\n                    </div>\n                }\n            },\n            {\n                title: <span style={{ paddingLeft: 6 }}>操作</span>,\n                key: 'option',\n                width: '40%',\n                render: (text, record) => (\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\n                        {\n                            record.is_reply === 1 &&\n                            <RLButton\n                                type='link'\n                                label='查看'\n                                onClick={(e) => {\n                                    e.stopPropagation();\n                                    this.props.changePage('edit',{\n                                        questionId: record.id,\n                                        questionPage: this.questionPage,\n                                        is_reply: false\n                                    });\n                                }}\n                                style={{color:'#8F1D22'}}\n                            />\n                        }\n                        {\n                            record.is_reply === 0 &&\n                            <RLButton\n                                type='link'\n                                label='回复'\n                                onClick={(e) => {\n                                    e.stopPropagation()\n                                    this.props.changePage('edit',{\n                                        questionId: record.id,\n                                        questionPage: this.vodPage,\n                                        is_reply: true\n                                    });\n                                }}\n                                style={{color:'#8F1D22'}}\n                            />\n                        }\n                    </div>\n                )\n            },\n        ]\n        this.getQuestionList(); \n    }\n    componentDidMount() {\n        \n    }\n    componentWillUnmount() {\n       \n    }\n\n    updateValue(data){\n        actionQAManage.editComment(data).then(res =>{\n            if(res.code === 200){\n                this.showToast({type:'success',content:'操作成功'});\n                // this.refreshCommentList();\n            }else{\n                this.showToast({type:'error',content:'操作失败'});\n                // this.refreshCommentList();\n            }  \n        }).catch( err=>{\n            // this.refreshCommentList();\n        })\n    }\n    \n    getQuestionList({ page } = { page: this.state.questionListInfo.page }) {\n        this.setState({\n            getListLoading: true\n        })\n        actionQAManage.getQuestionList({\n            type: this.state.type,\n            page,\n            pagesize: this.pageSize\n        }).then(res => {\n            if (res.code === 200) {\n                if (res.date && res.data.list.length === 0 && page > 1) {\n                    this.getQuestionList({ page: page - 1 })\n                } else {\n                    let newState = {\n                        questionListInfo: {\n                            list: res.data.list,\n                            page,\n                            count: res.data.count,\n                            pageNum: Math.ceil(res.data.count / this.pageSize)\n                        }\n                    }\n                    this.setState(newState)\n                }\n            }\n        }).finally(() => {\n            this.setState({\n                getListLoading: false\n            })\n        })\n    }\n    getLeftItems = () => {\n        return ([\n            <RLSelect \n                value={this.state.type}\n                defaultValue={this.state.value}\n                options={[\n                    {label:'全部问题类型', value: 0},\n                    {label:'业务咨询', value: 1},\n                    {label:'使用咨询', value: 2},\n                    {label:'其他', value: 3}\n                ]}\n                style={{ width: 150 }}\n                onChange={(e)=>{\n                    this.setState({\n                        type: e\n                    })\n                }}\n            />,\n            <RLButton \n                label=\"搜索\"\n                type=\"primary\"\n                onClick={()=>{\n                    this.getQuestionList();\n                }}\n                style={{marginLeft:20}}\n            />\n        ])\n    }\n    getRightItems = () => {\n        return (\n            [       \n                <RLButton\n                    label='刷新'\n                    type='primary'\n                    key='add'\n                    onClick={() => {\n                        this.getQuestionList();\n                    }}\n                    style={{ marginLeft: 20 }}\n                />\n            ]\n        )\n    }\n\n    pageChange = (page, pageSize) => {\n        this.getQuestionList({ page })\n    }\n\n    render() {\n        return (\n            <WindowContainer title= ''>\n                <div className='content-user'>\n                    <RLFilterTool leftItems={this.getLeftItems} rightItems={this.getRightItems}/>\n                    <RLTable\n                        loading={this.state.getListLoading}\n                        dataSource={this.state.questionListInfo.list}\n                        rowKey='id'\n                        columns={this.columns}\n                        paginationInfo={{\n                            total: this.state.questionListInfo.count,\n                            pageSize: this.pageSize,\n                            onChange: this.pageChange,\n                            current: this.state.questionListInfo.page\n                        }}\n                        rowClassName='rl-table-click-row'\n                    />                 \n                </div>\n            </WindowContainer>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props,\n        // roleList: store.roleManage.roleList,\n    }\n})(CmpQuestionList)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/UpcomingMeeting.js",["1266","1267","1268","1269","1270","1271"],"import BaseCmp from '@components/BaseCmp.js'\nimport { RLDatePicker, RLFilterTool, RLButton, RLTable, RLDropdown, RLSelect, RLInput } from '@components/index.js'\nimport actionMeeting from '@actions/meetingManage/actionMeeting.js'\nimport interfaces from '@/api/interfaces';\nimport { dealSearchTime, dealTableTime } from '@/libs/utils'\nimport config from '@/config.js'\nimport { connect } from 'react-redux';\nimport locale from 'antd/es/date-picker/locale/zh_CN';\n\nclass UpcomingMeeting extends BaseCmp {\n    constructor(props) {\n        super(props);\n        console.log('UpcomingMeeting--props:', props)\n        this.state = {\n            start_date: '',\n            end_date: '',\n            selectOption: 'name',\n            searchInput: '',\n            searchParam: {  // 搜索列表筛选条件\n                meeting_status: 0,\n                room: '',\n                start_time: '',\n                end_time: '',\n                nickname: '',\n                order: 1,        // 按照开始时间倒叙  1正序 0倒序\n            },\n            upcomingListInfo: {  // 列表信息\n                pageNum: 1,  // 总叶数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: 1,     // 当前第几页\n            },\n            listLoading: true,      // 获取列表中loading\n        };\n    }\n    componentDidMount() {\n        this.props.onRef(this)\n        this.getMeetingList()\n    }\n    getColumns = () => {\n        let columns = [\n            {\n                title: '会议ID',\n                dataIndex: 'meeting_id',\n                key: 'meeting_id',\n                width: '10%',\n            },\n            {\n                title: '会议主题',\n                key: 'title',\n                width: '20%',\n                render: (text, record) => {\n                    return (\n                        <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                            {Number(record.status) === 1 && (\n                                <div style={{\n                                    borderRadius: 3,\n                                    background: '#8F1D22',\n                                    width: 46, height: 20,\n                                    display: 'flex', justifyContent: 'center', alignItems: 'center',\n                                    color: '#fff', fontSize: 12, lineHeight: '17px',\n                                    marginRight: 3\n                                }}>\n                                    <span>进行中</span>\n                                </div>\n                            )}\n                            <span className='line-clamp-2' onClick={() => {\n                                this.rowClick(record)\n                            }}>\n                                {record.title}\n                            </span>\n                        </div>\n                    )\n                }\n            },\n            {\n                title: '会议号',\n                dataIndex: 'room',\n                key: 'room',\n                width: '14%',\n                render: (text, record) => {\n                    return <span>\n                        {\n                            this.showRoomNumber(record.room)\n                        }\n                    </span>\n                }\n            },\n            {\n                title: <div onClick={() => {\n                    this.setState({\n                        searchParam: {\n                            ...this.state.searchParam,\n                            order: this.state.searchParam.order == 1 ? 0 : 1\n                        }\n                    }, () => {\n                        this.getMeetingList()\n                    })\n                }}\n                    style={{ cursor: 'pointer', display: 'flex', flexDirection: 'row', alignItems: 'center' }}\n                >\n                    <span style={{ marginRight: 4 }}>开始时间</span>\n                    {\n                        this.state.searchParam.order == 1 ? (\n                            <img\n                                alt=''\n                                src={require('../../../assets/images/common/sort_up.png').default}\n                                style={{ width: 16, height: 16 }}\n                            />\n                        ) : (\n                            <img\n                                alt=''\n                                src={require('../../../assets/images/common/sort_down.png').default}\n                                style={{ width: 16, height: 16 }}\n                            />\n                        )\n                    }\n                </div>,\n                dataIndex: 'start_time_at',\n                key: 'start_time_at',\n                width: '18%',\n                render: (text, record) => {\n                    return <span>\n                        {dealTableTime(record.start_time_at)}\n                    </span>\n                }\n            },\n            {\n                title: '结束时间',\n                dataIndex: 'end_time_at',\n                key: 'end_time_at',\n                width: '18%',\n                render: (text, record) => {\n                    return <span>\n                        {dealTableTime(record.end_time_at)}\n                    </span>\n                }\n            },\n        ]\n        if (this.props.isMyMeeting) {\n            columns.push({\n                title: '文档数量',\n                key: 'doc_num',\n                width: '9%',\n                render: (record) => {\n                    return <div>\n                        <span className='line-clamp-2' onClick={() => {\n                            this.props.showDoc && this.props.showDoc(record.room)\n                        }}>\n                            {record.doc_num}\n                        </span>\n                    </div>\n                }\n            })\n        }\n        if (!this.props.isMyMeeting) {\n            columns.push({\n                title: '创建者',\n                dataIndex: 'nickname',\n                key: 'nickname',\n                width: '8%'\n            })\n        }\n        columns.push({\n            title: <span style={{ paddingLeft: 6 }}>操作</span>,\n            key: 'option',\n            width: '20%',\n            render: (text, record) => {\n                return this.getOptionBtns(record)\n            }\n        })\n        return columns\n    }\n    getOptionBtns = (record) => {\n        return this.getBtnsFromList(this.getBtnList(record), record)\n    }\n    getBtnList = (record) => {\n        let btns = []\n        // status 会议状态0未开始1进行中2已开始3已结束\n        // is_me  1.我创建的 0不是我创建的\n        // time_status  1。预约时间到了 0时间没到\n        if (this.props.isMyMeeting) {\n            this.isMeRight(btns, record)\n        } else {\n            this.createAllRight(btns, record)\n        }\n        return btns\n    }\n\n    createAllRight = (btns, record) => {\n        let { status, time_status } = record;\n        btns.push({\n            label: '参会者管理',\n            type: 'member'\n        })\n        if (status == 1) {\n            if (interfaces.MEETING_APPROVE) {\n                btns.push({\n                    label: '邀请',\n                    type: 'invite'\n                });\n                if (this.props.isMyMeeting) {\n                    btns.push({\n                        label: '进入',\n                        type: 'meeting'\n                    })\n                }\n            } else {\n                if (this.props.isMyMeeting) {\n                    btns.push({\n                        label: '进入',\n                        type: 'meeting'\n                    })\n                }\n            }\n        } else {\n            if (time_status == 1) {\n                if (interfaces.MEETING_APPROVE) {\n                    btns.push({\n                        label: '邀请',\n                        type: 'invite'\n                    })\n                }\n                if (this.props.isMyMeeting) {\n                    btns.push({\n                        label: '开始',\n                        type: 'start'\n                    })\n                }\n            } else {\n                if (interfaces.MEETING_APPROVE) {\n                    btns.push({\n                        label: '编辑',\n                        type: 'edit'\n                    });\n                    btns.push({\n                        label: '取消',\n                        type: 'delete'\n                    })\n                }\n                if (this.props.isMyMeeting) {\n                    btns.push({\n                        label: '开始',\n                        type: 'start'\n                    })\n                }\n            }\n        }\n\n        return btns\n    }\n    isMeRight = (btns, record) => {\n        let { status, time_status, is_me } = record;\n        if (is_me) {\n            if (status == 1) {\n                if (interfaces.MEETING_APPROVE) {\n                    btns.push({\n                        label: '邀请',\n                        type: 'invite'\n                    });\n                    btns.push({\n                        label: '进入',\n                        type: 'meeting'\n                    })\n                } else {\n                    btns.push({\n                        label: '进入',\n                        type: 'meeting'\n                    })\n                }\n            } else {\n                if (time_status == 1) {\n                    if (interfaces.MEETING_APPROVE) {\n                        btns.push({\n                            label: '邀请',\n                            type: 'invite'\n                        })\n                    }\n                    btns.push({\n                        label: '开始',\n                        type: 'start'\n                    })\n                } else {\n                    if (interfaces.MEETING_APPROVE) {\n                        btns.push({\n                            label: '编辑',\n                            type: 'edit'\n                        });\n                        btns.push({\n                            label: '取消',\n                            type: 'delete'\n                        })\n                    }\n                    btns.push({\n                        label: '开始',\n                        type: 'start'\n                    })\n                }\n            }\n        } else {\n            btns.push({\n                label: '进入',\n                type: 'meeting'\n            })\n        }\n\n        return btns\n    }\n    // 获取列表右侧按钮组件\n    getBtnsFromList = (btns, record) => {\n        if (btns.length <= 3) {\n            return <div style={{ display: 'flex', flexDirection: 'row' }}>\n                {\n                    btns.map(({ label, type }) => {\n                        return <RLButton\n                            type='link'\n                            key={type}\n                            label={label}\n                            onClick={(e) => {\n                                this.optionAction(type, record)\n                                e.stopPropagation()\n                            }}\n                        />\n                    })\n                }\n            </div>\n        } else {\n            let btnList = []\n            let subList = []\n            for (let i = 0; i < btns.length; i++) {\n                if (i < 2) {\n                    btnList.push(\n                        (<RLButton\n                            type='link'\n                            key={btns[i].type}\n                            label={btns[i].label}\n                            onClick={(e) => {\n                                this.optionAction(btns[i].type, record)\n                                e.stopPropagation()\n                            }}\n                        />)\n                    )\n                } else {\n                    subList.push(\n                        { label: btns[i].label, key: btns[i].type }\n                    )\n                }\n            }\n            btnList.push(\n                (<RLDropdown\n                    subBtns={subList}\n                    label='更多'\n                    onClick={(e, key) => {\n                        this.optionAction(key, record)\n                        e.stopPropagation()\n                    }}\n                />)\n            )\n\n\n            return <div style={{ display: 'flex', flexDirection: 'row' }}>\n                {btnList}\n            </div>\n        }\n    }\n\n    /**\n     * 权限操作\n     */\n    optionAction = (type, record) => {\n        if (type === 'invite') {\n            console.log('邀请')\n            this.props.listAddUser(record.meeting_id)\n        } else if (type === 'cancel') {\n            // 取消会议\n            this.showModal({\n                content: '是否取消会议',\n                title: '取消会议',\n                okText: '取消会议',\n                cancelText: '我再想想',\n                onOk: () => {\n                    return actionMeeting.deleteMeeting({ meeting_ids: record.meeting_id }).then(res => {\n                        if (res.code === 200) {\n                            this.showToast({ type: 'success', content: '取消成功' });\n                            this.getMeetingList();\n                        } else {\n                            this.showToast({ type: 'error', content: res.msg })\n                        }\n                    })\n                },\n                onCancel: () => {\n                },\n                size: 'big'\n            })\n\n        } else if (type === 'edit') {\n            console.log('编辑会议')\n            this.props.changePage('edit', {\n                meetingId: record.meeting_id\n            })\n        } else if (type === 'member') {\n            this.props.changePage(\n                'memberManage',\n                {\n                    meetingId: record.meeting_id\n                })\n        } else if (type === 'delete') {\n            // 删除会议\n            this.showModal({\n                title: '您是否确定删除此会议？',\n                okText: '确定',\n                cancelText: '取消',\n                onOk: () => {\n                    return actionMeeting.deleteMeeting({ meeting_ids: record.meeting_id }).then(res => {\n                        if (res.code === 200) {\n                            this.showToast({ type: 'success', content: '删除成功' });\n                            this.getMeetingList()\n                        } else {\n                            this.showToast({ type: 'error', content: res.msg })\n                        }\n                    })\n                },\n                onCancel: () => {\n\n                },\n                size: 'small'\n            })\n\n        } else if (type === 'meeting') {\n            window.open(config.pullUpLink + '?q=' + record.hash_key)\n        } else if (type === 'start') {\n            window.open(config.pullUpLink + '?q=' + record.hash_key)\n        } else if (type === 'ending') {\n            console.log('结束会议')\n            this.showModal({\n                title: '您是否确定结束此会议？',\n                okText: '确定',\n                cancelText: '取消',\n                onOk: () => {\n                    return actionMeeting.endMeeting({ meeting_id: record.meeting_id }).then(res => {\n                        if (res.code === 200) {\n                            this.showToast({ type: 'success', content: '结束成功' });\n                            this.getMeetingList()\n                        } else {\n                            this.showToast({ type: 'error', content: res.msg })\n                        }\n                    })\n                },\n                onCancel: () => {\n\n                },\n                size: 'small'\n            })\n        }\n    }\n    // \n    pageChange = (page, pageSize) => {\n        this.getMeetingList({ page })\n    }\n    getMeetingList = ({ page = this.state.upcomingListInfo.page } = { page: this.state.upcomingListInfo.page }) => {\n        this.setState({\n            listLoading: true,\n        })\n        actionMeeting.getMeetingList({\n            ...this.state.searchParam,\n            page,\n            pagesize: this.pageSize,\n            isMyMeeting: this.props.isMyMeeting\n        }).then(res => {\n            if (res.code === 200) {\n                let newState = {\n                    upcomingListInfo: {\n                        list: res.data.list,\n                        page,\n                        count: res.data.count,\n                        pageNum: Math.ceil(res.data.count / this.pageSize)\n                    }\n                }\n                this.setState(newState)\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        }).finally(() => {\n            this.setState({\n                listLoading: false,\n            })\n        })\n    }\n    getLeftItems = () => {\n        if (this.props.isMyMeeting) {\n            return [\n                <RLInput\n                    placeholder='请输入会议号'\n                    value={this.state.searchInput}\n                    key={'input_meetingCode'}\n                    onChange={(e) => {\n                        this.setState({\n                            searchInput: e.target.value,\n                            searchParam: {\n                                ...this.state.searchParam,\n                                room: e.target.value\n                            }\n                        })\n                    }}\n                />\n            ]\n        }\n        return (\n            [\n                <div className=\"newTimeArea\" key={'date'}>\n                    <p>从</p>\n                    <RLDatePicker\n                        allowClear\n                        onChange={this.startDateChange}\n                        disabledDate={this.startDisabledDate}\n                        locale={locale}\n                        inputReadOnly={true}\n                        format=\"YYYY-MM-DD\"\n                        placeholder='请选择日期'\n                        value={this.state.start_date}\n                    />\n                    <p>至</p>\n                    <RLDatePicker\n                        allowClear\n                        onChange={this.endDateChange}\n                        disabledDate={this.startDisabledDate}\n                        locale={locale}\n                        inputReadOnly={true}\n                        format=\"YYYY-MM-DD\"\n                        placeholder='请选择日期'\n                        value={this.state.end_date}\n                    />\n                </div>,\n                <div className=\"newSelectArea\" key={'input'}>\n                    <RLSelect\n                        options={config.meetingSearch}\n                        style={{ width: 120, marginLeft: 30, marginRight: 10 }}\n                        placeholder='请选择'\n                        value={this.state.selectOption}\n                        onChange={(e) => {\n                            this.setState({\n                                selectOption: e,\n                                searchParam: {\n                                    ...this.state.searchParam,\n                                    room: e === 'roomID' ? this.state.searchInput : '',\n                                    nickname: e === 'name' ? this.state.searchInput : ''\n                                }\n                            })\n                        }}\n                    />\n                    <RLInput\n                        allowClear\n                        placeholder='请输入内容'\n                        value={this.state.searchInput}\n                        onChange={(e) => {\n                            this.setState({\n                                searchInput: e.target.value,\n                                searchParam: {\n                                    ...this.state.searchParam,\n                                    room: this.state.selectOption === 'roomID' ? e.target.value : '',\n                                    nickname: this.state.selectOption === 'name' ? e.target.value : '',\n                                }\n                            })\n                        }}\n                    />\n                </div>\n            ]\n        )\n    }\n    startDateChange = (val, dateString) => {\n        let numTime = dealSearchTime(dateString, true);\n        this.setState({\n            start_date: val,\n            searchParam: {\n                ...this.state.searchParam,\n                start_time: numTime\n            }\n        })\n    }\n    endDateChange = (val, dateString) => {\n        let numTime = dealSearchTime(dateString, false);\n        this.setState({\n            end_date: val,\n            searchParam: {\n                ...this.state.searchParam,\n                end_time: numTime\n            }\n        })\n    }\n    getRightItems = () => {\n        return (\n            [\n                <RLButton\n                    label='搜索'\n                    type='primary'\n                    key={'search'}\n                    onClick={() => { this.getMeetingList({ page: 1 }) }}\n                    style={{ marginRight: 20 }}\n                />,\n                <RLButton\n                    label='重置'\n                    type='default'\n                    key={'reset'}\n                    onClick={this.reset}\n                    style={{ marginRight: 20 }}\n                />\n            ]\n        )\n    }\n    getTableTopRight = () => {\n        return (\n            [this.props.isMyMeeting ? <RLButton\n                label='创建会议'\n                type='primary'\n                key={'create'}\n                onClick={() => {\n                    this.props.changePage('createMeeting')\n                }}\n                style={{ marginRight: 20 }}\n            /> : null,\n            <RLButton\n                label='刷新'\n                type='default'\n                key={'refresh'}\n                onClick={this.getMeetingList}\n                style={{ marginRight: 20 }}\n            />\n            ]\n        )\n    }\n    reset = () => {\n        this.setState({\n            start_date: null,\n            end_date: null,\n            searchInput: '',\n            searchParam: {\n                ...this.state.searchParam,\n                start_time: '',\n                end_time: '',\n                room: '',\n                nickName: ''\n            }\n        })\n    }\n    rowClick = (record) => {\n        this.props.changePage('detail', { meetingId: record.meeting_id })\n    }\n    render() {\n        return (\n            <div className=''>\n                <RLFilterTool leftItems={this.getLeftItems} rightItems={this.getRightItems} />\n                <RLFilterTool rightItems={this.getTableTopRight} />\n                <RLTable\n                    loading={this.state.listLoading}\n                    dataSource={this.state.upcomingListInfo.list}\n                    rowKey='meeting_id'\n                    columns={this.getColumns()}\n                    paginationInfo={{\n                        total: this.state.upcomingListInfo.count,\n                        pageSize: this.pageSize,\n                        onChange: this.pageChange,\n                        current: this.state.upcomingListInfo.page\n                    }}\n                    rowClassName='rl-table-click-row'\n                />\n            </div>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props\n    }\n})(UpcomingMeeting);","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/HistoryMeeting.js",["1272","1273","1274","1275","1276","1277","1278","1279"],"import BaseCmp from '@components/BaseCmp.js'\nimport { RLInput, RLFilterTool, RLButton, RLTable, RLDatePicker, RLSelect } from '@components/index.js'\nimport actionMeeting from '@actions/meetingManage/actionMeeting.js'\nimport locale from 'antd/es/date-picker/locale/zh_CN';\nimport { connect } from 'react-redux'\nimport config from '@/config.js'\nimport interfaces from '@/api/interfaces.js'\nimport { dealSearchTime, dealTableTime } from '@/libs/utils'\nimport { downloadFile } from '@/libs/utils.js';\nclass HistoryMeeting extends BaseCmp {\n    constructor(props) {\n        super(props);\n        let select = [];\n        let selectList = [];\n        this.state = {\n            start_date: '',\n            end_date: '',\n            selectOption: 'name',\n            searchInput: '',\n            searchParam: {\n                meeting_status: 2,\n                room: '',\n                start_time: '',\n                end_time: '',\n                nickname: '',\n                order: 0,        // 按照开始时间倒叙  1正序 0倒序\n            },\n            historyListInfo: {  // 列表信息\n                pageNum: 1,  // 总叶数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: 1,     // 当前第几页\n            },\n            meetingSelected: [],\n            listLoading: true,      // 获取列表中loading\n            allSelect: [...select],    //所有选择meeting_id集合\n            allSelectList: [...selectList],   //所有选择列表集合\n        };\n\n    }\n    componentDidMount() {\n        this.props.onRef(this);\n        this.getMeetingList()\n    }\n    getColumns = () => {\n        let columns = [\n            {\n                title: '会议ID',\n                dataIndex: 'id',\n                key: 'id',\n                width: '10%',\n                render: (text, record) => {\n                    return <span>{record.meeting_id}</span>\n                }\n            },\n            {\n                title: '会议主题',\n                dataIndex: 'title',\n                key: 'title',\n                width: '19%',\n                render: (text, record) => {\n                    return <span className='line-clamp-noColor' onClick={() => {\n                        this.rowClick(record)\n                    }}>\n                        {record.title}\n                    </span>\n\n                }\n            },\n            {\n                title: '会议号',\n                key: 'room',\n                width: '11%',\n                render: (text, record) => {\n                    return <span>\n                        {\n                            this.showRoomNumber(record.room)\n                        }\n                    </span>\n                }\n            },\n            {\n                title: <div onClick={() => {\n                    this.setState({\n                        searchParam: {\n                            ...this.state.searchParam,\n                            order: this.state.searchParam.order == 1 ? 0 : 1\n                        }\n                    }, () => {\n                        this.getMeetingList()\n                    })\n                }}\n                    style={{ cursor: 'pointer', display: 'flex', flexDirection: 'row', alignItems: 'center' }}\n                >\n                    <span style={{ marginRight: 4 }}>开始时间</span>\n                    {\n                        this.state.searchParam.order == 1 ? (\n                            <img\n                                alt=''\n                                src={require('../../../assets/images/common/sort_up.png').default}\n                                style={{ width: 16, height: 16 }}\n                            />\n                        ) : (\n                            <img\n                                alt=''\n                                src={require('../../../assets/images/common/sort_down.png').default}\n                                style={{ width: 16, height: 16 }}\n                            />\n                        )\n                    }\n                </div>,\n                key: 'real_start_time_at',\n                width: '15%',\n                render: (record) => {\n                    return <div>{dealTableTime(record.real_start_time_at)}</div>\n                }\n            },\n            {\n                title: '创建者',\n                dataIndex: 'nickname',\n                key: 'nickname',\n                width: '15%'\n            },\n            {\n                title: <span style={{ paddingLeft: 6 }}>操作</span>,\n                key: '',\n                width: '20%',\n                render: (text, record) => {\n                    return (\n                        <div style={{ display: 'flex', flexDirection: 'row' }}>\n                            {(() => {\n                                if (Number(record.user_num) <= 0) {\n                                    return\n                                }\n                                if (!interfaces.MEETING_PARTICIPANT_EXPORT) {\n                                    return\n                                }\n                                return (<RLButton\n                                    type='link'\n                                    label='导出参会成员'\n                                    onClick={() => {\n                                        this.fileExport(record.meeting_id)\n                                    }}\n                                />)\n                            })()}\n                        </div>\n                    )\n                }\n            }\n        ]\n\n        if (this.props.isMyMeeting) {\n            columns.splice(4, 0, {\n                title: '文档数量',\n                key: 'doc_num',\n                width: '9%',\n                render: (record) => {\n                    return <div>\n                        <span className='line-clamp-2' onClick={() => {\n                            this.props.showDoc && this.props.showDoc(record.room)\n                        }}>\n                            {record.doc_num}\n                        </span>\n                    </div>\n                }\n            })\n        }\n        return columns\n    }\n    meetingListExport = (ids) => {\n        actionMeeting.exportMeetingList(ids).then(res => {\n            if (res.code === 200) {\n                downloadFile(res.data, '会议列表.xlsx')\n            } else {\n                this.showToast({ type: 'error', content: '导出文件出错' })\n            }\n        }).catch(err => {\n            this.showToast({ type: 'error', content: err.msg })\n        })\n    }\n    fileExport = (meetingId) => {\n        actionMeeting.exportMemberList(meetingId).then(res => {\n            if (res.code === 200) {\n                downloadFile(res.data, '参会人员列表.xlsx')\n            } else {\n                this.showToast({ type: 'error', content: '导出文件出错' })\n            }\n        }).catch(err => {\n            this.showToast({ type: 'error', content: err.msg })\n        })\n    }\n    pageChange = (page, pageSize) => {\n        this.getMeetingList({ page })\n    }\n    getMeetingList = ({ page = this.state.historyListInfo.page } = { page: this.state.historyListInfo.page }) => {\n        this.setState({\n            listLoading: true,\n            // meetingSelected: []\n        })\n        actionMeeting.getMeetingList({\n            ...this.state.searchParam,\n            page,\n            pagesize: this.pageSize,\n            isMyMeeting: this.props.isMyMeeting\n        }).then(res => {\n            if (res.code === 200) {\n                let newState = {\n                    historyListInfo: {\n                        list: res.data.list,\n                        page,\n                        count: res.data.count,\n                        pageNum: Math.ceil(res.data.count / this.pageSize)\n                    }\n                }\n                this.setState(newState)\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        }).finally(() => {\n            this.setState({\n                listLoading: false,\n            })\n        })\n    }\n    getLeftItems = () => {\n        if (this.props.isMyMeeting) {\n            return [\n                <RLInput\n                    allowClear\n                    placeholder='请输入会议号'\n                    value={this.state.searchInput}\n                    key={'input_meetingCode'}\n                    onChange={(e) => {\n                        this.setState({\n                            searchInput: e.target.value,\n                            searchParam: {\n                                ...this.state.searchParam,\n                                room: e.target.value\n                            }\n                        })\n                    }}\n                />\n            ]\n        }\n        return (\n            [\n                <div className=\"newTimeArea\" key={'date'}>\n                    <p>从</p>\n                    <RLDatePicker\n                        allowClear\n                        onChange={this.startDateChange}\n                        disabledDate={this.startDisabledDate}\n                        locale={locale}\n                        inputReadOnly={true}\n                        format=\"YYYY-MM-DD\"\n                        placeholder='请选择日期'\n                        value={this.state.start_date}\n                    />\n                    <p>至</p>\n                    <RLDatePicker\n                        allowClear\n                        onChange={this.endDateChange}\n                        disabledDate={this.startDisabledDate}\n                        locale={locale}\n                        inputReadOnly={true}\n                        format=\"YYYY-MM-DD\"\n                        placeholder='请选择日期'\n                        value={this.state.end_date}\n                    />\n                </div>,\n                <div className=\"newSelectArea\" key={'input'}>\n                    <RLSelect\n                        options={config.meetingSearch}\n                        style={{ width: 120, marginLeft: 30, marginRight: 10 }}\n                        placeholder='请选择'\n                        value={this.state.selectOption}\n                        onChange={(e) => {\n                            this.setState({\n                                selectOption: e,\n                                searchParam: {\n                                    ...this.state.searchParam,\n                                    room: e === 'roomID' ? this.state.searchInput : '',\n                                    nickname: e === 'name' ? this.state.searchInput : ''\n                                }\n                            })\n                        }}\n                    />\n                    <RLInput\n                        allowClear\n                        placeholder='请输入内容'\n                        value={this.state.searchInput}\n                        onChange={(e) => {\n                            this.setState({\n                                searchInput: e.target.value,\n                                searchParam: {\n                                    ...this.state.searchParam,\n                                    room: this.state.selectOption === 'roomID' ? e.target.value : '',\n                                    nickname: this.state.selectOption === 'name' ? e.target.value : '',\n                                }\n                            })\n                        }}\n                    />\n                </div>\n            ]\n        )\n    }\n    startDateChange = (val, dateString) => {\n        let numTime = dealSearchTime(dateString, true);\n        this.setState({\n            start_date: val,\n            searchParam: {\n                ...this.state.searchParam,\n                start_time: numTime\n            }\n        })\n    }\n    endDateChange = (val, dateString) => {\n        let numTime = dealSearchTime(dateString, false);\n        this.setState({\n            end_date: val,\n            searchParam: {\n                ...this.state.searchParam,\n                end_time: numTime\n            }\n        })\n    }\n    getRightItems = () => {\n        return (\n            [\n                <RLButton\n                    label='搜索'\n                    type='primary'\n                    key={'search'}\n                    onClick={() => { this.getMeetingList({ page: 1 }) }}\n                    style={{ marginRight: 20 }}\n                />,\n                <RLButton\n                    label='重置'\n                    type='default'\n                    key={'reset'}\n                    onClick={this.reset}\n                    style={{ marginRight: 20 }}\n                />\n            ]\n        )\n    }\n    rowClick = (record) => {\n        if (this.props.pageType === 'mine') {\n            this.props.changePage('detail', { meetingId: record.id, pageType: this.props.pageType, tabKey: 'upcoming' })\n        } else if (this.props.pageType === 'company') {\n            this.props.changePage('detail', { meetingId: record.id, pageType: this.props.pageType, tabKey: 'upcoming' })\n        }\n    }\n    getTableTopRight = () => {\n        return (\n            [\n                (interfaces.MEETING_PARTICIPANT_EXPORT ? <RLButton\n                    label='批量导出'\n                    type='primary'\n                    key={'export'}\n                    disabled={this.state.allSelect.length === 0 ? true : false}\n                    onClick={() => {\n                        actionMeeting.exportMeetingList(this.state.allSelect.join(',')).then(res => {\n                            if (res.code === 200) {\n                                downloadFile(res.data, '会议列表.xlsx')\n                                this.setState({\n                                    allSelect: [],\n                                    allSelectList: []\n                                })\n                            } else {\n                                this.showToast({ type: 'error', content: '导出文件出错' })\n                            }\n                        }).catch(err => {\n                            this.showToast({ type: 'error', content: err.msg })\n                        })\n                    }}\n                    style={{ marginRight: 20 }}\n                /> : null),\n                <RLButton\n                    label='刷新'\n                    type='default'\n                    key={'refresh'}\n                    onClick={this.getMeetingList}\n                    style={{ marginRight: 20 }}\n                />\n            ]\n        )\n    }\n    reset = () => {\n        this.setState({\n            start_date: null,\n            end_date: null,\n            searchInput: '',\n            searchParam: {\n                ...this.state.searchParam,\n                start_time: '',\n                end_time: '',\n                room: '',\n                nickName: ''\n            }\n        })\n    }\n    onSelectChange = (selectedRowKeys, selectedRows) => {\n        let i = 0;\n        let currentPage = this.state.historyListInfo.list;\n        let allSelect = [...this.state.allSelect];\n        let allSelectList = [...this.state.allSelectList];\n        for (i; i < currentPage.length; i++) {\n            let isInSelect = selectedRowKeys.findIndex(ele => { return ele == currentPage[i].meeting_id })\n            let isInOrigin = allSelect.findIndex(ele => { return ele == currentPage[i].meeting_id })\n            let isInList = allSelectList.findIndex(ele => { return ele.meeting_id == currentPage[i].meeting_id })\n            if (isInSelect === -1 && isInOrigin !== -1) {\n                allSelect.splice(isInOrigin, 1);\n                if (isInList !== -1) {\n                    allSelectList.splice(isInList, 1);\n                }\n            } else if (isInSelect !== -1 && isInOrigin === -1) {\n                allSelect.push(selectedRowKeys[isInSelect]);\n                if (isInList === -1) {\n                    allSelectList.push(currentPage[i]);\n                }\n            }\n            this.setState({\n                allSelect: [...allSelect],\n                allSelectList: [...allSelectList]\n            })\n        }\n    }\n    render() {\n        return (\n            <div>\n                <RLFilterTool leftItems={this.getLeftItems} rightItems={this.getRightItems} />\n                <RLFilterTool rightItems={this.getTableTopRight} />\n                <RLTable\n                    loading={this.state.listLoading}\n                    dataSource={this.state.historyListInfo.list}\n                    rowKey='meeting_id'\n                    columns={this.getColumns()}\n                    rowSelection={{\n                        type: \"checkbox\",\n                        selectedRowKeys: this.state.allSelect,\n                        onChange: this.onSelectChange\n                        // onChange: (selectedRowKeys, selectedRows) => {\n                        //     this.setState({\n                        //         meetingSelected: selectedRowKeys\n                        //     })\n                        // }\n                    }}\n                    paginationInfo={{\n                        total: this.state.historyListInfo.count,\n                        pageSize: this.pageSize,\n                        onChange: this.pageChange,\n                        current: this.state.historyListInfo.page\n                    }}\n                    rowClassName='rl-table-click-row'\n                />\n            </div>\n        )\n    }\n}\n\n// export default HistoryMeeting;\nexport default connect((store, props) => {\n    return {\n        ...props\n    }\n})(HistoryMeeting)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/CurrentMeeting.js",["1280","1281","1282"],"\nimport BaseCmp from '@components/BaseCmp.js'\nimport { RLInput, RLFilterTool, RLButton, RLTable, RLSelect, RLDropdown } from '@components/index.js'\nimport actionMeeting from '@actions/meetingManage/actionMeeting.js'\nimport { connect } from 'react-redux'\nimport interfaces from '../../../api/interfaces';\nimport config from '@/config.js';\nimport { dealTableTime } from '@/libs/utils'\n\nclass CurrentMeeting extends BaseCmp {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectOption: 'name',\n            searchInput: '',\n            searchParam: {  // 搜索列表筛选条件\n                meeting_status: 1,\n                room: '',\n                nickname: '',\n                start_time: '',\n                end_time: '',\n                order: 1,        // 按照开始时间倒叙  1正序 0倒序\n            },\n            currentListInfo: {  // 列表信息\n                pageNum: 1,  // 总叶数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: 1,     // 当前第几页\n            },\n            listLoading: true,      // 获取列表中loading\n        };\n\n    }\n    componentDidMount() {\n        this.props.onRef(this);\n        this.getMeetingList()\n    }\n    getColumns = () => {\n        let columns = [\n            {\n                title: '会议ID',\n                dataIndex: 'meeting_id',\n                key: 'meeting_id',\n                width: '9%'\n            },\n            {\n                title: '会议主题',\n                dataIndex: 'title',\n                key: 'title',\n                width: '18%',\n                render: (text, record) => {\n                    return <span className='line-clamp-2' onClick={() => {\n                        this.rowClick(record)\n                    }}>\n                        {record.title}\n                    </span>\n                }\n            },\n            {\n                title: '会议号',\n                dataIndex: 'room',\n                key: 'room',\n                width: '12%',\n                render: (text, record) => {\n                    return <span>\n                        {\n                            this.showRoomNumber(record.room)\n                        }\n                    </span>\n                }\n            },\n            {\n                title: <div onClick={() => {\n                    this.setState({\n                        searchParam: {\n                            ...this.state.searchParam,\n                            order: this.state.searchParam.order == 1 ? 0 : 1\n                        }\n                    }, () => {\n                        this.getMeetingList()\n                    })\n                }}\n                    style={{ cursor: 'pointer', display: 'flex', flexDirection: 'row', alignItems: 'center' }}\n                >\n                    <span style={{ marginRight: 4 }}>开始时间</span>\n                    {\n                        this.state.searchParam.order == 1 ? (\n                            <img\n                                alt=''\n                                src={require('../../../assets/images/common/sort_up.png').default}\n                                style={{ width: 16, height: 16 }}\n                            />\n                        ) : (\n                                <img\n                                    alt=''\n                                    src={require('../../../assets/images/common/sort_down.png').default}\n                                    style={{ width: 16, height: 16 }}\n                                />\n                            )\n                    }\n                </div>,\n                key: 'real_start_time_at',\n                width: '16%',\n                render: (record) => {\n                    return <div>{dealTableTime(record.real_start_time_at)}</div>\n                }\n            },\n            {\n                title: '参会人数',\n                dataIndex: 'user_num',\n                key: 'user_num',\n                width: '7%',\n            },\n            {\n                title: '创建者',\n                dataIndex: 'nickname',\n                key: 'nickname',\n                width: '6%',\n                render: (text, record) => {\n                    return <div style={{\n                        width: '100%',\n                        overflow: 'hidden',\n                        textOverflow: 'ellipsis',\n                        whiteSpace: 'nowrap'\n                    }}>\n                        {record.nickname}\n                    </div>\n                }\n            },\n            {\n                title: <span style={{ paddingLeft: 6 }}>操作</span>,\n                key: 'opt',\n                width: '15%',\n                render: (text, record) => {\n                    return this.getOptionBtns(record)\n                }\n            }\n        ]\n\n        if (this.props.isMyMeeting) {\n            columns.splice(5, 0, {\n                title: '文档数量',\n                key: 'doc_num',\n                width: '9%',\n                render: (record) => {\n                    return <div>\n                        <span className='line-clamp-2' onClick={() => {\n                            this.props.showDoc && this.props.showDoc(record.room)\n                        }}>\n                            {record.doc_num}\n                        </span>\n                    </div>\n                }\n            })\n        }\n        if (!this.props.isMyMeeting) {\n            columns.splice(5, 0, {\n                title: '创建者',\n                dataIndex: 'nickname',\n                key: 'nickname',\n                width: '9%',\n            })\n        }\n\n        return columns\n    }\n    getOptionBtns = (record) => {\n        return this.getBtnsFromList(this.getBtnList(record), record)\n    }\n    getBtnList = (record) => {\n        let btns = [];\n        if (interfaces.MEETING_APPROVE) {\n            btns.push({\n                label: '邀请',\n                type: 'invite'\n            })\n        }\n        if (this.props.isMyMeeting) {\n            btns.push({\n                label: '进入',\n                type: 'meeting'\n            })\n        }\n        // if (interfaces.PARTICIPANT_MANAGE) {\n        //     btns.push({\n        //         label: '参会者管理',\n        //         type: 'member'\n        //     })\n        // }\n        btns.push({\n            label: '参会者管理',\n            type: 'member'\n        })\n        if (interfaces.MEETING_ENDMEETING) {\n            btns.push({\n                label: '结束',\n                type: 'ending'\n            })\n        }\n        return btns\n    }\n    getBtnsFromList = (btns, record) => {\n        if (btns.length <= 3) {\n            return <div style={{ display: 'flex', flexDirection: 'row' }}>\n                {\n                    btns.map(({ label, type }) => {\n                        return <RLButton\n                            type='link'\n                            key={type}\n                            label={label}\n                            onClick={(e) => {\n                                this.optionAction(type, record)\n                                e.stopPropagation()\n                            }}\n                        />\n                    })\n                }\n            </div>\n        } else {\n            let btnList = []\n            let subList = []\n            for (let i = 0; i < btns.length; i++) {\n                if (i < 2) {\n                    btnList.push(\n                        (<RLButton\n                            type='link'\n                            key={btns[i].type}\n                            label={btns[i].label}\n                            onClick={(e) => {\n                                this.optionAction(btns[i].type, record)\n                                e.stopPropagation()\n                            }}\n                        />)\n                    )\n                } else {\n                    subList.push(\n                        { label: btns[i].label, key: btns[i].type }\n                    )\n                }\n            }\n            btnList.push(\n                (<RLDropdown\n                    subBtns={subList}\n                    label='更多'\n                    onClick={(e, key) => {\n                        this.optionAction(key, record)\n                        e.stopPropagation()\n                    }}\n                />)\n            )\n\n\n            return <div style={{ display: 'flex', flexDirection: 'row' }}>\n                {btnList}\n            </div>\n        }\n    }\n    optionAction = (key, record) => {\n        if (key === 'invite') {\n            this.props.listAddUser(record.meeting_id)\n        } else if (key == 'meeting') {\n            window.open(config.pullUpLink + '?q=' + record.hash_key)\n        } else if (key === 'member') {\n            this.props.changePage(\n                'memberManage',\n                {\n                    meetingId: record.meeting_id\n                })\n        } else if (key === 'ending') {\n            console.log('结束会议')\n            this.showModal({\n                title: '您是否确定结束此会议？',\n                okText: '确定',\n                cancelText: '取消',\n                onOk: () => {\n                    return actionMeeting.endMeeting({ meeting_id: record.meeting_id }).then(res => {\n                        if (res.code === 200) {\n                            this.showToast({ type: 'success', content: '结束成功' });\n                            this.getMeetingList()\n                        } else {\n                            this.showToast({ type: 'error', content: res.msg })\n                        }\n                    })\n                },\n                onCancel: () => {\n\n                },\n                size: 'small'\n            })\n        }\n    }\n    pageChange = (page, pageSize) => {\n        this.getMeetingList({ page })\n    }\n    getMeetingList = ({ page = this.state.currentListInfo.page } = { page: this.state.currentListInfo.page }) => {\n        this.setState({\n            listLoading: true,\n        })\n        actionMeeting.getMeetingList({\n            ...this.state.searchParam,\n            page,\n            pagesize: this.pageSize,\n            isMyMeeting: this.props.isMyMeeting\n        }).then(res => {\n            if (res.code === 200) {\n                let newState = {\n                    currentListInfo: {\n                        list: res.data.list,\n                        page,\n                        count: res.data.count,\n                        pageNum: Math.ceil(res.data.count / this.pageSize)\n                    }\n                }\n                this.setState(newState)\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        }).finally(() => {\n            this.setState({\n                listLoading: false,\n            })\n        })\n    }\n    getLeftItems = () => {\n        if (this.props.isMyMeeting) {\n            return [\n                <RLInput\n                    allowClear\n                    placeholder='请输入会议号'\n                    value={this.state.searchInput}\n                    key={'input_meetingCode'}\n                    onChange={(e) => {\n                        this.setState({\n                            searchInput: e.target.value,\n                            searchParam: {\n                                ...this.state.searchParam,\n                                room: e.target.value\n                            }\n                        })\n                    }}\n                />\n            ]\n        }\n        return [\n            <div className=\"newSelectArea\" key=\"date\">\n                <RLSelect\n                    options={config.meetingSearch}\n                    style={{ width: 120, marginRight: 10 }}\n                    placeholder='请选择'\n                    value={this.state.selectOption}\n                    onChange={(e) => {\n                        this.setState({\n                            selectOption: e,\n                            searchParam: {\n                                ...this.state.searchParam,\n                                room: e === 'roomID' ? this.state.searchInput : '',\n                                nickname: e === 'name' ? this.state.searchInput : ''\n                            }\n                        })\n                    }}\n                />\n                <RLInput\n                    allowClear\n                    placeholder='请输入内容'\n                    value={this.state.searchInput}\n                    onChange={(e) => {\n                        this.setState({\n                            searchInput: e.target.value,\n                            searchParam: {\n                                ...this.state.searchParam,\n                                room: this.state.selectOption === 'roomID' ? e.target.value : '',\n                                nickname: this.state.selectOption === 'name' ? e.target.value : '',\n                            }\n                        })\n                    }}\n                />\n            </div>\n        ]\n    }\n    getRightItems = () => {\n        return (\n            [\n                <RLButton\n                    label='搜索'\n                    type='primary'\n                    key={'search'}\n                    onClick={() => { this.getMeetingList({ page: 1 }) }}\n                    style={{ marginRight: 20 }}\n                />,\n                <RLButton\n                    label='重置'\n                    type='default'\n                    key={'reset'}\n                    onClick={this.reset}\n                    style={{ marginRight: 20 }}\n                />\n            ]\n        )\n    }\n    rowClick = (record) => {\n        this.props.changePage('detail', { meetingId: record.meeting_id })\n    }\n    getTableTopRight = () => {\n        return (\n            [\n                <RLButton\n                    label='刷新'\n                    type='default'\n                    key={'refresh'}\n                    onClick={this.getMeetingList}\n                    style={{ marginRight: 20 }}\n                />\n            ]\n        )\n    }\n    render() {\n        return (\n            <div>\n                <RLFilterTool leftItems={this.getLeftItems} rightItems={this.getRightItems} />\n                <RLFilterTool rightItems={this.getTableTopRight} />\n                <RLTable\n                    loading={this.state.listLoading}\n                    dataSource={this.state.currentListInfo.list}\n                    rowKey='meeting_id'\n                    columns={this.getColumns()}\n                    paginationInfo={{\n                        total: this.state.currentListInfo.count,\n                        pageSize: this.pageSize,\n                        onChange: this.pageChange,\n                        current: this.state.currentListInfo.page\n                    }}\n                    rowClassName='rl-table-click-row'\n                />\n            </div>\n        )\n    }\n}\n\nexport default connect((store, props) => {\n    return {\n        ...props,\n        accountType: store.storeCommon.accountType\n    }\n})(CurrentMeeting)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/marketingTool/components/EventRegistration/CmpEventEdit.js",["1283","1284"],"import BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport {\n    RLInput, RLTextarea, RLButton, RLForm, RLFormItem, RLRadioGroup, RLTag, RLCheckboxGroup, RLTable, RLModal, RLSwitch\n} from '@components/index.js'\nimport { Tabs, DatePicker, InputNumber, Checkbox } from 'antd'\nimport { createRef } from 'react'\n\nimport actionEventRegistration from '@actions/marketingTool/actionEventRegistration.js'\nimport CmpUpload from '@/pages/common/CmpUpload.js'\nimport { dealTime, dealDateTime } from '@/libs/utils.js'\nimport moment from 'moment'\nimport AddUser from '@/pages/common/meeting/AddUser.js'\n\n\nimport commonActions from '@actions/commonActions'\nimport locale from 'antd/es/date-picker/locale/zh_CN'\n\nimport './CmpEventEdit.less'\n\nconst { TabPane } = Tabs\n\n\nclass CmpEventEdit extends BaseCmp {\n    constructor(props) {\n        super(props)\n        if (props.eventId) {\n            this.eventId = props.eventId\n        }\n        this.state = {\n            addLoading: false,  // 添加按钮loading\n            eventInfo: {\n                title: '',   // 活动主题\n                e_title: '',\n                desc: '',   // 活动简介\n                e_desc: '',\n                content: '',   // 活动描述\n                e_content: '',\n                image: '',\n                start_time_at: '',\n                end_time_at: '',\n                user_limit: '',\n                show_field: '',   // 活动字段\n                default_field: '',   // 必填字段\n                user_list: '',\n                action_type: 1   // 默认公开\n            },   // 活动\n            userGroup: [],   // 成员列表\n            formShowField: [],   // 显示字段\n            defaultFields: [],   // 必填字段\n            language: 'zh',   // 默认中文\n            showFields: [],   // 活动字段\n\n            showAddUserModal: false,   // 添加人员弹框\n            fieldSettingModal: false,   // 活动字段必填项弹框\n            addUserConfig: {\n                showSelectGroup: true,\n                selectType: 'checkbox',\n                originCanCancel: true,\n                returnStyle: 'object',\n                mustIdent: true\n            }\n        }\n        this.form = createRef()\n        this.columns = [\n            {\n                title: '序号',\n                dataIndex: 'id',\n                key: 'id',\n                width: '20%',\n                render: (text, record, index) => {\n                    return <div>{index + 1}</div>\n                }\n            },\n            {\n                title: '字段',\n                dataIndex: 'name',\n                key: 'name',\n                width: '40%'\n            },\n            {\n                title: '必填/非必填',\n                dataIndex: 'key',\n                key: 'key',\n                width: '40%',\n                render: (text, record) => {\n                    return <RLSwitch\n                        defaultChecked={this.state.defaultFields.includes(record.id)}\n                        onChange={value => {\n                            if (value) {\n                                if (!this.state.defaultFields.includes(record.id)) {\n                                    this.state.defaultFields.push(record.id)\n                                    this.setState({\n                                        defaultFields: this.state.defaultFields\n                                    })\n                                }\n                            } else {\n                                let index = this.state.defaultFields.findIndex(i => i === record.id)\n                                if (index >= 0) {\n                                    this.state.defaultFields.splice(index, 1)\n                                    this.setState({\n                                        defaultFields: this.state.defaultFields\n                                    })\n                                }\n                            }\n                            this.setState({\n                                eventInfo: {\n                                    ...this.state.eventInfo,\n                                    default_field: this.state.defaultFields.join(',')\n                                }\n                            })\n                        }}\n                    />\n                }\n            }\n        ]\n        // 获取显示字段\n        this.getShowField()\n    }\n    componentDidMount() {\n        if (this.eventId) {   // 编辑\n            this.getEventDetail(this.eventId)\n        } else {\n            this.setState({\n                eventInfo: {\n                    ...this.state.eventInfo\n                }\n            })\n        }\n    }\n\n    // 活动详情\n    getEventDetail = (id) => {\n        actionEventRegistration.getEventDetail({ id }).then(res => {\n            if (res.code === 200) {\n                const data = res.data\n                this.setState({\n                    userGroup: data.user_list,   // 成员名单\n                    formShowField: data.show_field,   // 显示字段\n                    defaultFields: data.default_field,   // 必填字段\n                    eventInfo: {\n                        ...data,\n                        start_time_at: moment(dealTime(data.start_time_at, 'YYYY-MM-DD HH:mm')),\n                        end_time_at: moment(dealTime(data.end_time_at, 'YYYY-MM-DD HH:mm')),\n                        show_field: data.show_field.join(','),\n                        default_field: data.default_field.join(',')\n                    }\n                }, () => {\n                    // 给表单重置值\n                    this.form && this.form.setFieldsValue(this.state.eventInfo)\n                })\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        })\n    }\n\n    // 显示字段\n    getShowField = () => {\n        actionEventRegistration.getEventShowField().then(res => {\n            if (res.code === 200) {\n                let showFields = res.data.map(item => {\n                    return { value: Number(item.id), label: item.name, ...item }\n                })\n                this.setState({\n                    showFields\n                })\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        })\n    }\n\n    editConfirm = (values) => {\n        console.log('onFinish', values)\n        this.setState({\n            addLoading: true\n        })\n        let { start_time_at, end_time_at, action_type } = values\n        const { title, e_title, desc, e_desc, content, e_content, image, user_limit, show_field, default_field, user_list } = this.state.eventInfo\n        if (!default_field) {\n            this.showToast('活动字段收集请设置必填项')\n            this.setState({\n                addLoading: false\n            })\n            return\n        }\n        if (this.state.language === 'zh') {\n            if ((!e_title && !e_desc && !e_content) || (e_title && e_desc && e_content)) {\n                \n            } else {\n                this.showToast('英文必填项请填写完整')\n                this.setState({\n                    addLoading: false\n                })\n                return\n            }\n        } else if (this.state.language === 'en') {\n            if ((!title && !desc && !content) || (title && desc && content)) {\n\n            } else {\n                this.showToast('中文必填项请填写完整')\n                this.setState({\n                    addLoading: false\n                })\n                return\n            }\n        }\n        const params = {\n            title,\n            e_title,\n            desc,\n            e_desc,\n            content,\n            e_content,\n            start_time_at: dealDateTime(start_time_at.format('YYYY-MM-DD HH:mm')),\n            end_time_at: dealDateTime(end_time_at.format('YYYY-MM-DD HH:mm')),\n            action_type,\n            image,\n            show_field,\n            default_field,\n            user_list,\n            user_limit: user_limit || ''\n        }\n        let userStr = []\n        this.state.userGroup.forEach(ele => {\n            userStr.push(ele.id)\n        })\n        params.user_list = userStr.join(',')\n        params.langeage = this.state.language === 'en' ? 2 : 1\n        console.log('添加编辑活动参数--params:', params)\n        if (this.eventId) {   // 编辑\n            actionEventRegistration.eventEdit({ ...params, id: this.eventId }).then(res => {\n                if (res.code === 200) {\n                    this.showToast({ content: '编辑成功', type: 'success' })\n                    this.props.changePage('list')\n                } else {\n                    this.showToast({ type: 'error', content: res.msg })\n                }\n            }).finally(() => {\n                this.setState({\n                    addLoading: false\n                })\n            })\n        } else {   // 创建\n            actionEventRegistration.eventCreate(params).then(res => {\n                if (res.code === 200) {\n                    this.showToast({ type: 'success', content: '创建成功' })\n                    this.props.changePage('list')\n                } else {\n                    this.showToast({ type: 'error', content: res.msg })\n                }\n            }).finally(() => {\n                this.setState({\n                    addLoading: false\n                })\n            })\n        }\n    }\n\n    pageTitle = () => {\n        let title = '创建活动'\n        if (this.eventId) {\n            title = '编辑活动'\n        }\n        return (\n            <div className=\"custom-page-title\">\n                <span>{title}</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.changePage('list', { page: this.props.page })\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n\n    /**\n     * 创建表单的label\n     */\n    createLabel = (labelName, need, style = {}) => {\n        return <div>\n            {need ? <span style={{ color: '#ff4d4f' }}>*</span> : null}\n            <span style={{ ...style }}>{labelName}</span>\n        </div>\n    }\n\n    // 必填项设置弹框\n    renderDefaultField = () => {\n        return (\n            <RLModal\n                visible={this.state.fieldSettingModal}\n                title='活动字段必填项设置'\n                footer={null}\n                width={800}\n                onCancel={() => {\n                    this.setState({\n                        fieldSettingModal: false\n                    })\n                }}\n            >\n                <RLTable\n                    columns={this.columns}\n                    dataSource={this.state.showFields}\n                    rowKey='id'\n                />\n                <div className='modal-btnContainer'>\n                    <RLButton label='取消'\n                        onClick={() => {\n                            this.setState({\n                                fieldSettingModal: false\n                            })\n                        }}\n                    />\n                    <RLButton label='确定'\n                        type='primary'\n                        style={{ marginLeft: 30 }}\n                        onClick={() => {\n                            this.setState({\n                                fieldSettingModal: false\n                            })\n                        }}\n                    />\n                </div>\n            </RLModal>\n        )\n    }\n\n    range = (start, end) => {\n        const result = []\n        for (let i = start; i < end; i++) {\n            result.push(i)\n        }\n        return result\n    }\n\n    disabledEndDate = (current) => {\n        return current && current < moment().startOf('day')\n    }\n\n    disabledEndDateTime = (dates) => {\n        let hours = moment().hours()\n        let minutes = moment().minutes()\n        // 当日只能选择当前时间之后的时间点\n        if (dates && moment(dates[1]).date() === moment().date()) {\n            return {\n                disabledHours: () => this.range(0, 24).splice(0, hours),\n                disabledMinutes: () => this.range(0, 60).splice(0, minutes)\n            }\n        }\n        return {\n            disabledHours: () => [],\n            disabledMinutes: () => []\n        }\n    }\n\n    // 成员添加\n    addSuccess = (data) => {\n        let originUsers = this.state.userGroup\n        let returnUsers = data.map(item => {\n            return {\n                'id': item.id,\n                'nickname': item.nickname\n            }\n        })\n        let newUsers = []\n        for (let user of returnUsers) {\n            let index = originUsers.findIndex(item => item.id === user.id)\n            if (index < 0) {\n                newUsers.push(user)\n            }\n        }\n        let finalUsers = originUsers.concat(newUsers)\n        this.setState({\n            userGroup: finalUsers\n        }, () => {\n            this.form.validateFields(['user_list'])\n        })\n    }\n\n    render() {\n        const { showSelectGroup, selectType, originCanCancel, returnStyle, mustIdent } = this.state.addUserConfig\n        return (\n            <WindowContainer title={this.pageTitle}>\n                <div className='page-info-edit'>\n                    <Tabs defaultActiveKey=\"zh\"\n                        style={{ flex: 1 }}\n                        onChange={key => {\n                            this.setState({\n                                language: key\n                            })\n                        }}\n                    >\n                        <TabPane tab=\"中文\" key=\"zh\">\n                        </TabPane>\n                        <TabPane tab=\"英文\" key=\"en\">\n                        </TabPane>\n                    </Tabs>\n                    <RLForm\n                        ref={form => this.form = form}\n                        labelCol={{ style: { width: 150, marginRight: 20, textAlign: 'right' } }}\n                        labelAlign='left'\n                        wrapperCol={{ style: { span: 24, marginRight: 30 } }}\n                        onFinish={this.editConfirm}\n                        initialValues={this.state.eventInfo}\n                        validateTrigger='onBlur'\n                    >\n                        {\n                            this.state.language === 'zh' ?\n                                <RLFormItem\n                                    name='title'\n                                    label='活动主题'\n                                    colon={false}\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: '请输入活动主题'\n                                        }, {\n                                            max: 50,\n                                            message: '活动主题最多50个字符'\n                                        }\n                                    ]}\n                                >\n                                    <RLInput\n                                        placeholder='请输入活动主题'\n                                        style={{ width: 400 }}\n                                        value={this.state.eventInfo.title}\n                                        onChange={e => {\n                                            this.setState({\n                                                eventInfo: {\n                                                    ...this.state.eventInfo,\n                                                    title: e.target.value\n                                                }\n                                            })\n                                        }}\n                                    />\n                                </RLFormItem> :\n                                <RLFormItem\n                                    name='e_title'\n                                    label='活动主题'\n                                    colon={false}\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: '请输入活动主题'\n                                        }, {\n                                            max: 50,\n                                            message: '活动主题最多50个字符'\n                                        }\n                                    ]}\n                                >\n                                    <RLInput\n                                        placeholder='请输入活动主题'\n                                        style={{ width: 400 }}\n                                        value={this.state.eventInfo.e_title}\n                                        onChange={e => {\n                                            this.setState({\n                                                eventInfo: {\n                                                    ...this.state.eventInfo,\n                                                    e_title: e.target.value\n                                                }\n                                            })\n                                        }}\n                                    />\n                                </RLFormItem>\n                        }\n                        {\n                            this.state.language === 'zh' ?\n                                <RLFormItem\n                                    name='desc'\n                                    label='活动简介'\n                                    colon={false}\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: '请输入活动简介'\n                                        }, {\n                                            max: 200,\n                                            message: '活动简介最多200个字符'\n                                        }\n                                    ]}\n                                >\n                                    <RLTextarea\n                                        placeholder='请输入活动简介'\n                                        rows={2}\n                                        style={{ width: 520 }}\n                                        value={this.state.eventInfo.desc}\n                                        onChange={e => {\n                                            this.setState({\n                                                eventInfo: {\n                                                    ...this.state.eventInfo,\n                                                    desc: e.target.value\n                                                }\n                                            })\n                                        }}\n                                    />\n                                </RLFormItem> :\n                                <RLFormItem\n                                    name='e_desc'\n                                    label='活动简介'\n                                    colon={false}\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: '请输入活动简介'\n                                        }, {\n                                            max: 200,\n                                            message: '活动简介最多50个字符'\n                                        }\n                                    ]}\n                                >\n                                    <RLTextarea\n                                        placeholder='请输入活动简介'\n                                        rows={2}\n                                        style={{ width: 520 }}\n                                        value={this.state.eventInfo.e_desc}\n                                        onChange={e => {\n                                            this.setState({\n                                                eventInfo: {\n                                                    ...this.state.eventInfo,\n                                                    e_desc: e.target.value\n                                                }\n                                            })\n                                        }}\n                                    />\n                                </RLFormItem>\n                        }\n                        <RLFormItem\n                            name='image'\n                            label='活动封面'\n                            colon={false}\n                            rules={[\n                                {\n                                    required: true,\n                                    message: '请上传活动封面'\n                                }\n                            ]}\n                        >\n                            <CmpUpload\n                                aspect={4 / 3}\n                                saveUrl={fileurl => {\n                                    this.form.setFieldsValue({\n                                        image: fileurl\n                                    })\n                                    this.setState({\n                                        eventInfo: {\n                                            ...this.state.eventInfo,\n                                            image: fileurl\n                                        }\n                                    })\n                                }}\n                                src={this.state.eventInfo.image}\n                                imgStyle={{ width: 120, height: 90, borderRadius: 4, cursor: 'pointer' }}\n                                default={require('../../../../assets/images/upload.png').default}\n                            />\n                            <div style={{ marginTop: 10 }}>只能上传jpg/png，大小不超过2M，图片比例4：3</div>\n                        </RLFormItem>\n                        {\n                            this.state.language === 'zh' ?\n                                <RLFormItem\n                                    label='活动描述'\n                                    name='content'\n                                    colon={false}\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: '请输入活动描述'\n                                        },\n                                        {\n                                            max: 1000,\n                                            message: '活动描述最多1000个字符'\n                                        }\n                                    ]}\n                                >\n                                    <div style={{ position: 'relative', width: 520 }}>\n                                        <RLTextarea\n                                            placeholder='请输入活动描述'\n                                            rows={5}\n                                            style={{ width: 520 }}\n                                            value={this.state.eventInfo.content}\n                                            onChange={e => {\n                                                this.setState({\n                                                    eventInfo: {\n                                                        ...this.state.eventInfo,\n                                                        content: e.target.value\n                                                    }\n                                                })\n                                            }}\n                                        />\n                                        <div className={`comment-count ${this.state.eventInfo.content.length >= 1000 ? 'overflow' : ''}`}\n                                            style={{ position: 'absolute', bottom: 5, right: 5 }}\n                                        >{this.state.eventInfo.content.length}/1000</div>\n                                    </div>\n                                </RLFormItem> :\n                                <RLFormItem\n                                    name='e_content'\n                                    label='活动描述'\n                                    colon={false}\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: '请输入活动描述'\n                                        }, {\n                                            max: 1000,\n                                            message: '活动描述最多100个字符'\n                                        }\n                                    ]}\n                                >\n                                    <div style={{ position: 'relative', width: 520 }}>\n                                        <RLTextarea\n                                            placeholder='请输入活动描述'\n                                            rows={5}\n                                            style={{ width: 520 }}\n                                            value={this.state.eventInfo.e_content}\n                                            onChange={e => {\n                                                this.setState({\n                                                    eventInfo: {\n                                                        ...this.state.eventInfo,\n                                                        e_content: e.target.value\n                                                    }\n                                                })\n                                            }}\n                                        />\n                                        <div className={`comment-count ${this.state.eventInfo.e_content.length >= 1000 ? 'overflow' : ''}`}\n                                            style={{ position: 'absolute', bottom: 5, right: 5 }}\n                                        >{this.state.eventInfo.e_content.length}/1000</div>\n                                    </div>\n                                </RLFormItem>\n                        }\n                        <RLFormItem\n                            name='start_time_at'\n                            label='开始时间'\n                            colon={false}\n                            rules={[\n                                {\n                                    required: true,\n                                    message: '请选择开始时间'\n                                },\n                                {\n                                    validator: (rule, val) => {\n                                        let { start_time_at, end_time_at } = this.form.getFieldsValue(['start_time_at', 'end_time_at'])\n                                        if (start_time_at && end_time_at) {\n                                            let startTime = moment(val.format('YYYY-MM-DD HH:mm'))\n                                            let endTime = moment(end_time_at.format('YYYY-MM-DD HH:mm'))\n                                            if (startTime >= endTime) {\n                                                return Promise.reject('开始时间不能大于结束时间')\n                                            } else {\n                                                return Promise.resolve()\n                                            }\n                                        }\n                                        return Promise.resolve()\n                                    }\n                                }\n                            ]}\n                        >\n                            <DatePicker\n                                allowClear\n                                locale={locale}\n                                showTime\n                                format={'YYYY-MM-DD HH:mm'}\n                                placeholder='请选择日期时间'\n                            />\n                        </RLFormItem>\n                        <RLFormItem\n                            name='end_time_at'\n                            label='结束时间'\n                            colon={false}\n                            rules={[\n                                {\n                                    required: true,\n                                    message: '请选择结束时间'\n                                },\n                                {\n                                    validator: (rule, val) => {\n                                        let { start_time_at, end_time_at } = this.form.getFieldsValue(['start_time_at', 'end_time_at'])\n                                        if (start_time_at && end_time_at) {\n                                            let startTime = moment(start_time_at.format('YYYY-MM-DD HH:mm'))\n                                            let endTime = moment(val.format('YYYY-MM-DD HH:mm'))\n                                            if (startTime >= endTime) {\n                                                return Promise.reject('结束时间不能小于开始时间')\n                                            } else {\n                                                return Promise.resolve()\n                                            }\n                                        }\n                                        return Promise.resolve()\n                                    }\n                                }\n                            ]}\n                        >\n                            <DatePicker\n                                allowClear\n                                locale={locale}\n                                showTime\n                                disabledDate={this.disabledEndDate}\n                                // disabledTime={this.disabledEndDateTime}\n                                format={'YYYY-MM-DD HH:mm'}\n                                placeholder='请选择日期时间'\n                            />\n                        </RLFormItem>\n                        <RLFormItem\n                            name='user_limit'\n                            label='报名人数上限'\n                            colon={false}\n                        >\n                            <InputNumber\n                                placeholder='请输入报名人数上限'\n                                max={10000}\n                                min={1}\n                                precision={0}\n                                style={{ width: 175 }}\n                                value={this.state.eventInfo.user_limit}\n                                onChange={value => {\n                                    this.setState({\n                                        eventInfo: {\n                                            ...this.state.eventInfo,\n                                            user_limit: value\n                                        }\n                                    })\n                                }}\n                                onPressEnter={e => {\n                                    e.preventDefault()\n                                }}\n                            />\n                            {/* <RLInput\n                                placeholder='请输入报名人数上限'\n                                type='number'\n                                max={10000}\n                                min={1}\n                                style={{ width: 175 }}\n                                value={this.state.eventInfo.user_limit}\n                                onChange={e => {\n                                    this.setState({\n                                        eventInfo: {\n                                            ...this.state.eventInfo,\n                                            user_limit: e.target.value\n                                        }\n                                    })\n                                }}\n                            /> */}\n                        </RLFormItem>\n                        <RLFormItem\n                            name='show_field'\n                            label={this.createLabel('活动字段收集', true)}\n                            colon={false}\n                            rules={[\n                                {\n                                    validator: () => {\n                                        if (this.state.formShowField.length === 0) {\n                                            return Promise.reject('请选择活动字段')\n                                        } else {\n                                            return Promise.resolve()\n                                        }\n                                    }\n                                }\n                            ]}\n                        >\n                            <div style={{ display: 'flex', flexDirection: 'row' }}>\n                                <RLCheckboxGroup\n                                    items={this.state.showFields}\n                                    labelkey='name'\n                                    valuekey='id'\n                                    value={this.state.formShowField}\n                                    onChange={value => {\n                                        let shortSet = new Set(this.state.formShowField)\n                                        let longSet = new Set(value)\n                                        let unionSet = new Set([...shortSet, ...longSet])   // 先把它们取并集\n                                        let differenceSet = new Set([...unionSet].filter(x => !longSet.has(x)))   // 差集\n                                        console.log('差集------------------：', differenceSet)\n                                        let differenceArr = Array.from(differenceSet)   // 转数组\n                                        if (differenceArr && differenceArr[0] && this.state.defaultFields.includes(differenceArr[0])) {\n                                            this.showToast('该字段已设置为必填，不可取消')\n                                            return\n                                        }\n                                        this.setState({\n                                            formShowField: value,\n                                            eventInfo: {\n                                                ...this.state.eventInfo,\n                                                show_field: value.join(',')\n                                            }\n                                        })\n                                    }}\n                                />\n                                <div\n                                    style={{ marginLeft: 10, color: '#8f1d22', cursor: 'pointer' }}\n                                    onClick={() => {\n                                        // 弹框\n                                        this.setState({\n                                            fieldSettingModal: true\n                                        })\n                                    }}\n                                >\n                                    必填项设置\n                                </div>\n                            </div>\n                        </RLFormItem>\n                        <RLFormItem\n                            name='action_type'\n                            label='发布范围'\n                            colon={false}\n                        >\n                            <RLRadioGroup\n                                items={[\n                                    { value: 1, label: '公开' },\n                                    { value: 2, label: '非公开' }\n                                ]}\n                                value={this.state.eventInfo.action_type}\n                                onChange={e => {\n                                    this.setState({\n                                        eventInfo: {\n                                            ...this.state.eventInfo,\n                                            action_type: e.target.value\n                                        }\n                                    }, () => {\n                                        this.form.validateFields(['user_list'])\n                                    })\n                                }}\n                            />\n                        </RLFormItem>\n                        <RLFormItem\n                            label={this.createLabel('可见名单', this.state.eventInfo.action_type === 1 ? false : true)}\n                            colon={false}\n                            name='user_list'\n                            rules={[\n                                {\n                                    validator: () => {\n                                        if (this.state.eventInfo.action_type === 2) {\n                                            if (this.state.userGroup.length === 0) {\n                                                return Promise.reject('如果发布范围选择的是非公开，可见名单是必填项')\n                                            } else {\n                                                return Promise.resolve()\n                                            }\n                                        } else {\n                                            return Promise.resolve()\n                                        }\n                                    }\n                                }\n                            ]}\n                        >\n                            <div className='form-item-gropu'>\n                                <div style={{\n                                    width: 520,\n                                    minHeight: 60,\n                                    border: '1px solid rgb(220, 223, 230)',\n                                    borderRadius: 3,\n                                    display: 'flex',\n                                    flexWrap: 'wrap',\n                                    padding: '10px 10px 10px 10px',\n                                    boxSizing: 'border-box'\n                                }}>\n                                    {this.state.userGroup.map(ele => {\n                                        return <div style={{ height: 19, marginTop: 4 }} key={ele.id}>\n                                            <RLTag\n                                                label={ele.nickname}\n                                                closable\n                                                onClose={() => {\n                                                    let all = [...this.state.userGroup]\n                                                    let index = all.findIndex(clc => { return clc.id === ele.id })\n                                                    all.splice(index, 1)\n                                                    this.setState({\n                                                        userGroup: all\n                                                    })\n                                                }}\n                                            />\n                                        </div>\n                                    })}\n                                </div>\n                                <RLButton\n                                    label='添加用户'\n                                    type='primary'\n                                    disabled={this.state.eventInfo.action_type === 1}\n                                    onClick={() => {\n                                        this.setState({\n                                            showAddUserModal: true\n                                        })\n                                    }}\n                                    style={{ marginLeft: 20 }}\n                                />\n                            </div>\n                        </RLFormItem>\n                        <RLFormItem>\n                            <div style={{ display: 'flex', justifyContent: 'center' }}>\n                                <RLButton\n                                    type=\"default\"\n                                    label='取消'\n                                    width={80}\n                                    style={{ display: 'inline-block' }}\n                                    onClick={() => {\n                                        this.props.changePage('list')\n                                    }}\n                                />\n                                <RLButton\n                                    type=\"primary\"\n                                    htmlType=\"submit\"\n                                    label={this.eventId ? '保存' : '创建'}\n                                    style={{ marginLeft: 40, display: 'inline-block' }}\n                                    loading={this.state.addLoading}\n                                    width={80}\n                                />\n\n                            </div>\n\n                        </RLFormItem>\n                    </RLForm>\n                </div>\n                {\n                    this.state.showAddUserModal && <AddUser\n                        visible={this.state.showAddUserModal}\n                        showSelectGroup={showSelectGroup}\n                        selectType={selectType}\n                        originArr={this.state.userGroup}\n                        originCanCancel={originCanCancel}\n                        returnStyle={returnStyle}\n                        mustIdent={mustIdent}\n                        onCancel={() => {\n                            this.setState({\n                                showAddUserModal: false\n                            })\n                        }}\n                        onAdd={data => {\n                            this.addSuccess(data)\n                        }}\n                    />\n                }\n                {\n                    this.state.fieldSettingModal && this.renderDefaultField()\n                }\n            </WindowContainer >\n        )\n    }\n\n}\nexport default connect((store, props) => {\n    return {\n        ...props\n    }\n})(CmpEventEdit)\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/marketingTool/components/EventRegistration/CmpEventList.js",["1285","1286"],"import BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport {\n    RLInput, RLButton, RLTable, RLFilterTool, RLSwitch, RLTooltip, RLModal\n} from '@components/index.js'\nimport utils, { downloadUrl, downloadFile } from '@/libs/utils.js'\nimport config from '@/config.js'\nimport interfaces from '@/api/interfaces.js'\nimport { dealTableTime, dealDateTime } from '@/libs/utils.js'\nimport locale from 'antd/es/date-picker/locale/zh_CN'\n\nimport actionEventRegistration from '@actions/marketingTool/actionEventRegistration.js'\n\n\nclass CmpEventList extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.state = {\n            title: '',   // 活动主题\n            eventListInfo: {\n                pageNum: 1,  // 总页数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: 1,     // 当前第几页\n            },\n            shareModal: false,   // 活动分享弹框\n            shareImg: '',   // 活动分享二维码\n            shareUrl: '',   // 活动分享url\n\n            getListLoading: true,   // 获取列表loading\n        }\n        this.columns = [\n            {\n                title: '活动主题',\n                dataIndex: 'title',\n                key: 'title',\n                width: '20%',\n                render: (text, record) => <RLTooltip placement=\"bottomLeft\" title={record.title}>\n                    <div className='line-clamp-noColor'>\n                        {record.title || record.e_title}\n                    </div>\n                </RLTooltip>\n            },\n            {\n                title: '报名人数',\n                dataIndex: 'current_num',\n                key: 'current_num',\n                width: '10%',\n                render: (text, record) => {\n                    return (\n                        record.user_limit === -1 ? <div>{record.current_num}</div> :\n                        <div>\n                            {record.current_num}/{record.user_limit}\n                        </div>\n                    )\n                }\n            },\n            {\n                title: '活动时间',\n                dataIndex: 'end_time_at',\n                key: 'end_time_at',\n                width: '27%',\n                render: (text, record) => {\n                    return (\n                        <div>\n                            <div style={{ display: 'flex', flexDirection: 'row' }}>\n                                <div style={{ width: 65 }}>开始时间:</div>\n                                {dealTableTime(record.start_time_at)}\n                            </div>\n                            <div style={{ display: 'flex', flexDirection: 'row', marginTop: 5 }}>\n                                <div style={{ width: 65 }}>结束时间:</div>\n                                {dealTableTime(record.end_time_at)}\n                            </div>\n                        </div>\n                    )\n                }\n            },\n            {\n                title: '活动状态',\n                dataIndex: 'status',\n                key: 'status',\n                width: '10%',\n                render: (text, record) => {\n                    return (\n                        <div>\n                            <div style={{ width: 70 }}>{record.status === 1 ? '未开始' : (record.status === 2 ? '进行中' : (record.status === 3 ? '已结束' : '-'))}</div>\n                            {\n                                record.status === 2 && record.user_limit === record.current_num &&\n                                <div style={{ color: '#FF8921', fontSize: 14 }}>已报满</div>\n                            }\n                        </div>\n                    )\n                }\n            },\n            {\n                title: '标签',\n                dataIndex: 'tag',\n                key: 'tag',\n                width: '10%',\n                render: (text, record) => {\n                    return (\n                        <div>\n                            <div style={{ width: 70, marginBottom: 5 }}>上架/下架</div>\n                            {\n                                interfaces.EVENT_UPDATE_TAG && <RLSwitch\n                                    key={record.id}\n                                    defaultChecked={record.tag === 1}\n                                    disabled={record.status === 3 && record.tag === 2}\n                                    onChange={value => {\n                                        // 调用更新接口\n                                        this.updateValue(record, value)\n                                    }}\n                                />\n                            }\n                        </div>\n                    )\n                }\n            },\n            {\n                title: '创建时间',\n                dataIndex: 'create_at',\n                key: 'create_at',\n                width: '13%',\n                render: (text, record) => {\n                    return <div>\n                        {dealTableTime(record.create_at)}\n                    </div>\n                }\n            },\n            {\n                title: '创建者',\n                dataIndex: 'nickname',\n                key: 'nickname',\n                width: '15%',\n                render: (text, record) => <RLTooltip placement=\"bottomLeft\" title={record.nickname}>\n                    <div className='line-clamp-noColor'>\n                        {record.nickname}\n                    </div>\n                </RLTooltip>\n            },\n            {\n                title: <span style={{ paddingLeft: 6 }}>操作</span>,\n                key: 'option',\n                width: '15%',\n                render: (text, record) => (\n                    <div style={{ display: 'flex', flexDirection: 'column' }}>\n                        <div style={{ display: 'flex', flexDirection: 'row' }}>\n                            {\n                                interfaces.EVENT_DELETE && <RLButton\n                                    type='link'\n                                    label='删除'\n                                    onClick={e => {\n                                        this.showModal({\n                                            content: '确认删除后，该活动将被彻底删除，是否确认删除？',\n                                            title: '是否删除该活动？',\n                                            okText: '确定',\n                                            cancelText: '取消',\n                                            onOk: () => {\n                                                this.eventDelConfirm(record)\n                                            },\n                                            onCancel: () => { },\n                                            size: 'big'\n                                        })\n                                    }}\n                                />\n                            }\n                            {\n                                interfaces.REGISTRATION_INFO_EXPORT && record.status === 3 && <RLButton\n                                    type='link'\n                                    label='导出'\n                                    onClick={e => {\n                                        actionEventRegistration.registrationInfoExport({ aid: record.id }).then(res => {\n                                            if (res.code === 200) {\n                                                downloadFile(res.data, '活动报名信息.xlsx')\n                                            } else {\n                                                this.showToast({ type: 'error', content: '导出文件出错' })\n                                            }\n                                        }).catch(err => {\n                                            console.log(err)\n                                        })\n                                    }}\n                                />\n                            }\n                            {\n                                record.status !== 3 && <RLButton\n                                    type='link'\n                                    label='活动分享'\n                                    onClick={() => {\n                                        const url = config.host + `/#/out/eventdetail?eventId=${record.hashid}`\n                                        console.log('链接---------------------', url)\n                                        actionEventRegistration.getQRCode({ url: encodeURIComponent(url) }).then(res => {\n                                            if (res.code === 200) {\n                                                this.setState({\n                                                    shareImg: res.data.share,\n                                                    shareUrl: url,\n                                                    shareModal: true\n                                                })\n                                            }\n                                        })\n                                    }}\n                                />\n                            }\n                        </div>\n                        <div style={{ display: 'flex', flexDirection: 'row' }}>\n                            {\n                                interfaces.EVENT_EDIT && (record.status === 1 || (record.status === 2 && record.tag === 2)) && <RLButton\n                                    type='link'\n                                    label='编辑'\n                                    onClick={() => {\n                                        this.props.changePage('edit', {\n                                            eventId: record.id,\n                                            page: this.state.eventListInfo.page\n                                        })\n                                    }}\n                                />\n                            }\n                            {\n                                interfaces.REGISTRATION_INFO && record.status !== 1 && <RLButton\n                                    label=\"报名信息\"\n                                    type=\"link\"\n                                    onClick={() => {\n                                        this.props.changePage('registration', {\n                                            eventId: record.id,\n                                            eventTitle: record.title,\n                                            page: this.state.eventListInfo.page\n                                        })\n                                    }}\n                                />\n                            }\n                        </div>\n                    </div>\n                )\n            }\n        ]\n    }\n    componentDidMount() {\n        this.getEventList()\n    }\n    componentWillUnmount() {\n\n    }\n\n    getEventList({ sign, page = this.state.eventListInfo.page } = { sign: true, page: this.state.eventListInfo.page }) {\n        if (sign) {\n            this.setState({\n                getListLoading: true\n            })\n        }\n        actionEventRegistration.getEventList({\n            title: this.state.title,\n            page,\n            page_size: this.pageSize\n        }).then(res => {\n            if (res.code === 200) {\n                if (res.date && res.data.list.length === 0 && page > 1) {\n                    this.getEventList({ page: page - 1 })\n                } else {\n                    let newState = {\n                        eventListInfo: {\n                            list: res.data.list,\n                            page,\n                            count: res.data.count,\n                            pageNum: Math.ceil(res.data.count / this.pageSize)\n                        }\n                    }\n                    this.setState(newState)\n                }\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        }).finally(() => {\n            this.setState({\n                getListLoading: false\n            })\n        })\n    }\n\n    // 更新上下架\n    updateValue = (record, value) => {\n        const params = {\n            id: record.id,\n            tag: value ? 1 : 2\n        }\n        return actionEventRegistration.eventUpdateTag(params).then(res => {\n            if (res.code === 200) {\n                record.tag = value ? 1 : 2\n                this.getEventList({ sign: false })\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        }).catch(e => {\n            this.showToast({ type: 'error', content: '操作失败' })\n        })\n    }\n\n    // 删除\n    eventDelConfirm = (record) => {\n        const params = {\n            id: record.id\n        }\n        return actionEventRegistration.eventDelete(params).then(res => {\n            if (res.code === 200) {\n                this.getEventList({ sign: false })\n                this.showToast({ type: 'success', content: '删除成功' })\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        })\n    }\n\n    // 渲染活动分享弹框\n    renderShare = () => {\n        return (\n            <RLModal\n                title='活动分享'\n                className=\"share-modal\"\n                maskClosable={false}\n                visible={this.state.shareModal}\n                footer={null}\n                onCancel={() => {\n                    this.setState({\n                        shareModal: false\n                    })\n                }}\n            >\n                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', marginTop: 48, marginLeft: 16 }}>\n                    <div style={{ marginRight: 20 }}>\n                        <img\n                            alt=''\n                            src={this.state.shareImg}\n                            style={{ height: 170, width: 170 }}\n                        />\n                    </div>\n                    <div style={{ width: '100%' }}>\n                        <div style={{ display: 'flex', flexDirection: 'row', marginBottom: 28 }}>\n                            <RLInput\n                                style={{ width: 260, height: 40 }}\n                                value={this.state.shareUrl}\n                            />\n                            <RLButton\n                                label='复制链接'\n                                type='primary'\n                                onClick={() => {\n                                    utils.copy(this.state.shareUrl, () => {\n                                        this.showToast({ type: 'success', content: '链接已复制到剪贴板' })\n                                    })\n                                }}\n                            />\n                        </div>\n                        <RLButton\n                            label='下载活动二维码'\n                            onClick={() => {\n                                downloadUrl(this.state.shareImg, '活动二维码')\n                            }}\n                        />\n                    </div>\n                </div>\n            </RLModal>\n        )\n    }\n\n    getRightItems = () => {\n        return ([\n            <RLInput placeholder='请输入活动主题'\n                style={{ width: 240, marginRight: 12 }}\n                key='title'\n                value={this.state.title}\n                onChange={e => {\n                    this.setState({\n                        title: e.target.value\n                    })\n                }}\n            />,\n            <RLButton\n                label='搜索'\n                type=\"primary\"\n                key='search'\n                onClick={() => {\n                    this.getEventList({ sign: false })\n                }}\n                style={{ marginLeft: 20, marginRight: 20 }}\n            />,\n            <RLButton\n                label='重置'\n                type='default'\n                key='reset'\n                onClick={() => {\n                    this.setState({\n                        title: ''\n                    })\n                }}\n            />\n        ])\n    }\n\n    listOperate = () => {\n        return ([\n            interfaces.EVENT_CREATE && <RLButton\n                label='创建活动'\n                type='primary'\n                key='add'\n                onClick={() => {\n                    this.props.changePage('edit', {\n                        page: this.state.eventListInfo.page\n                    })\n                }}\n            />,\n            <RLButton\n                label='刷新'\n                key='refresh'\n                onClick={() => {\n                    this.getEventList()\n                }}\n                style={{ marginLeft: 20 }}\n            />\n        ])\n    }\n\n    pageChange = (page, pageSize) => {\n        this.getEventList({ page })\n    }\n\n    render() {\n        const { list, count, page } = this.state.eventListInfo\n        return (\n            <WindowContainer>\n                <div className=\"page-info-list\">\n                    <RLFilterTool rightItems={this.getRightItems} />\n                    <RLFilterTool rightItems={this.listOperate} />\n                    <RLTable\n                        loading={this.state.getListLoading}\n                        dataSource={list}\n                        rowKey='id'\n                        columns={this.columns}\n                        paginationInfo={{\n                            total: count,\n                            pageSize: this.pageSize,\n                            onChange: this.pageChange,\n                            current: page\n                        }}\n                        rowClassName='rl-table-click-row'\n                    />\n                    {\n                        this.state.shareModal && this.renderShare()\n                    }\n                </div>\n            </WindowContainer>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props\n    }\n})(CmpEventList)\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/userManage/actionGroupManage.js",["1287"],"import { getData } from '@/libs/utils.js'\nimport store from '@/store/index.js'\nimport interfaces from '@/api/interfaces'\n\nconst actionGroupManage = {\n    // 群组管理-用户组列表\n    // type group 群组列表获取 user 组下成员列表获取 add 获取非当前组下的分页用户列表\n    getGroupUserList({ type, uuid, keyword, value, page, pagesize }) {\n        return getData({\n            method: 'GET',\n            url: interfaces.GROUP_USER_LIST,\n            data: {\n                type,\n                uuid: uuid || '',\n                keyword: keyword || '',\n                value: value || '',\n                page: page || '',\n                pagesize: pagesize || ''\n            }\n        })\n    },\n    // 群组管理-用户组创建\n    groupAdd({ title }) {\n        return getData({\n            method: 'POST',\n            url: interfaces.GROUNP_ADD,\n            data: {\n                title\n            }\n        })\n    },\n    // 群组管理-用户组编辑\n    groupEdit({ uuid, title }) {\n        return getData({\n            method: 'POST',\n            url: interfaces.GROUNP_EDIT,\n            data: {\n                uuid,\n                title\n            }\n        })\n    },\n    // 群组管理-用户组删除\n    groupRemove({ uuid }) {\n        return getData({\n            method: 'POST',\n            url: interfaces.GROUP_DELETE,\n            data: {\n                uuid\n            }\n        })\n    },\n    // 群组管理-用户组成员添加\n    groupUserAdd({ group_uuid, users }) {\n        return getData({\n            method: 'POST',\n            url: interfaces.GROUNP_PARTICIPANT_ADD,\n            data: {\n                group_uuid,\n                users\n            }\n        })\n    },\n    // 群组管理-用户组成员移除\n    groupUserRemove({ group_uuid, users }) {\n        return getData({\n            method: 'POST',\n            url: interfaces.LWM_REMOVE_GROUNP_PARTICIPANT_ADD,\n            data: {\n                group_uuid,\n                users\n            }\n        })\n    },\n    // 群组管理-用户组成员修改群组\n    groupUserEdit({ group_uuid, current, users }) {\n        return getData({\n            method: 'POST',\n            url: interfaces.LWM_EDIT_GROUNP_PARTICIPANT_ADD,\n            data: {\n                group_uuid,\n                current,\n                users\n            }\n        })\n    }\n}\nexport default actionGroupManage\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/userManage/actionPhoneList.js",["1288","1289","1290","1291","1292"],"import { getData, getFile } from '@/libs/utils.js'\nimport store from '@/store/index.js'\nimport actionTypes from '@/store/actionTypes.js'\nimport interfaces from '@/api/interfaces'\nimport config from '@/config.js'\nimport CmpPhoneImport from '../../../pages/userManage/components/phoneList/CmpPhoneImport'\nconst actionPhoneList = {\n    getPhoneList(data){\n        return getData({\n            method:'get',\n            url: interfaces.PHONE_LIST,\n            data: data\n        });\n    },\n    phoneDel(data){\n        return getData({\n            method:'get',\n            url: interfaces.PHONE_DELETE,\n            data: data\n        });\n    },\n    phoneImport(data){\n        return getData({\n            method:'POST',\n            url: interfaces.PHONE_IMPORT,\n            data: data\n        });\n    },\n    downloadTemplate(){\n        let link = document.createElement('a');\n        link.style.display = 'none';\n        link.href = '';\n        link.setAttribute('download', '固话导入模版.xlsx');\n        document.body.appendChild(link);\n        link.click();\n    }\n}\nexport default actionPhoneList;","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/marketingTool/components/Questionnaire/CmpQnaireEdit.js",["1293","1294","1295","1296","1297","1298","1299"],"import BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport {\n    RLInput, RLTextarea, RLButton, RLForm, RLFormItem, RLRadioGroup, RLTag, RLCheckboxGroup, RLTable, RLModal, RLSwitch, RLSelect\n} from '@components/index.js'\nimport { Tabs, DatePicker } from 'antd'\nimport { createRef } from 'react'\n\nimport actionQuestionnaire from '@actions/marketingTool/actionQuestionnaire.js'\nimport CmpUpload from '@/pages/common/CmpUpload.js'\nimport { dealTime, dealDateTime, uuid } from '@/libs/utils.js'\nimport moment from 'moment'\nimport AddUser from '@/pages/common/meeting/AddUser.js'\nimport QuestionnaireEditor from './components/QuestionnaireEditor.js'\n\n\nimport commonActions from '@actions/commonActions'\nimport locale from 'antd/es/date-picker/locale/zh_CN'\n\nimport './CmpQnaireEdit.less'\nimport './components/QuestionnaireEditor.less'\n\nconst { TabPane } = Tabs\n\n\nclass CmpQnaireEdit extends BaseCmp {\n    constructor(props) {\n        super(props)\n        if (props.qnaireId) {\n            this.qnaireId = props.qnaireId\n        }\n        this.state = {\n            addLoading: false,  // 添加按钮loading\n            qnaireInfo: {\n                title: '',   // 问卷主题\n                e_title: '',\n                desc: '',   // 问卷简介\n                e_desc: '',\n                question: [],   // 问题\n                image: '',\n                end_time_at: '',\n                user_list: '',\n                q_type: 1   // 默认公开\n            },   // 问卷\n            userGroup: [],   // 成员列表\n            language: 'zh',   // 默认中文\n\n            showAddUserModal: false,   // 添加人员弹框\n            addUserConfig: {\n                showSelectGroup: true,\n                selectType: 'checkbox',\n                originCanCancel: true,\n                returnStyle: 'object',\n                mustIdent: true\n            },\n\n            editors: [],\n            curMoveItem: null,\n            drag: false,\n            scrollTo: 0,\n            newEditor: true,\n        }\n        this.form = createRef()\n        this.editorsEl = []\n    }\n    componentDidMount() {\n        if (this.qnaireId) {   // 编辑\n            this.getQnaireDetail(this.qnaireId)\n        } else {\n            this.setState({\n                qnaireInfo: {\n                    ...this.state.qnaireInfo\n                }\n            })\n        }\n    }\n\n    // 问卷详情\n    getQnaireDetail = (id) => {\n        actionQuestionnaire.getQnaireDetail({ id }).then(res => {\n            if (res.code === 200) {\n                const data = res.data\n                this.setState({\n                    userGroup: data.user_list,   // 成员名单\n                    qnaireInfo: {\n                        ...data,\n                        end_time_at: moment(dealTime(data.end_time_at, 'YYYY-MM-DD HH:mm')),\n                    },\n                    editors: JSON.parse(data.question)\n                }, () => {\n                    // 给表单重置值\n                    this.form && this.form.setFieldsValue(this.state.qnaireInfo)\n                })\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        })\n    }\n\n    editConfirm = (values) => {\n        console.log('onFinish', values)\n        this.setState({\n            addLoading: true\n        })\n        let { end_time_at, q_type } = values\n        const { title, e_title, desc, e_desc, image, user_list } = this.state.qnaireInfo\n        if (this.state.editors.length < 1) {\n            this.showToast('请添加问题')\n            this.setState({\n                addLoading: false\n            })\n            return\n        }\n        if (this.state.language === 'zh') {\n            if ((!e_title && !e_desc) || (e_title && e_desc)) {\n\n            } else {\n                this.showToast('英文必填项请填写完整')\n                this.setState({\n                    addLoading: false\n                })\n                return\n            }\n        } else if (this.state.language === 'en') {\n            if ((!title && !desc) || (title && desc)) {\n\n            } else {\n                this.showToast('中文必填项请填写完整')\n                this.setState({\n                    addLoading: false\n                })\n                return\n            }\n        }\n\n        for(let i=0; i< this.state.editors.length; i++){\n            if(!this.state.editors[i].title.trim()){\n                this.showToast({type:'error',content:`请填写问题${i+1}标题`});\n                this.setState({\n                    addLoading: false\n                })\n                return;\n            }\n            if(['radio','dropdown','checkbox'].includes(this.state.editors[i].type)){\n                for(let option of this.state.editors[i].options){\n                    if(!option.trim()){\n                      this.showToast({type:'error',content:`请将问题${i+1}选项填写完整`});\n                      this.setState({\n                        addLoading: false\n                      });\n                      return;\n                    }\n                }\n            }\n            if(this.state.editors[i].type === 'rate'){\n                for(let option of this.state.editors[i].options){\n                    if(!option.title.trim() || !option.score.trim()){\n                      this.showToast({type:'error',content:`请将问题${i+1}选项及对应分数填写完整`});\n                      this.setState({\n                        addLoading: false\n                    })\n                      return;\n                    }\n                }\n            }\n            if(this.state.editors[i].type === 'matrixrate'){\n                for(let row of this.state.editors[i].rows){\n                    if(!row.trim()){\n                        this.showToast({type:'error',content:`请将问题${i+1}行标题填写完整`});\n                        this.setState({\n                            addLoading: false\n                        })\n                        return;\n                    }\n                }\n                for(let option of this.state.editors[i].options){\n                    if(!option.title.trim() || !option.score.trim()){\n                      this.showToast({type:'error',content:`请将问题${i+1}选项及对应分数填写完整`});\n                      this.setState({\n                        addLoading: false\n                    })\n                      return;\n                    }\n                }\n            }\n        }\n\n        const params = {\n            title,\n            e_title,\n            desc,\n            e_desc,\n            question: JSON.stringify(this.state.editors),\n            end_time_at: end_time_at && dealDateTime(end_time_at.format('YYYY-MM-DD HH:mm')),\n            q_type,\n            image,\n            user_list,\n            information: 2\n        }\n        let userStr = []\n        this.state.userGroup.forEach(ele => {\n            userStr.push(ele.id)\n        })\n        params.user_list = userStr.join(',')\n        params.language = this.state.language === 'en' ? 2 : 1\n\n        console.log('添加编辑问卷参数--params:', params)\n        if (this.qnaireId) {   // 编辑\n            actionQuestionnaire.qnaireEdit({ ...params, id: this.qnaireId }).then(res => {\n                if (res.code === 200) {\n                    this.showToast({ content: '编辑成功', type: 'success' })\n                    this.props.changePage('list')\n                } else {\n                    this.showToast({ type: 'error', content: res.msg })\n                }\n            }).finally(() => {\n                this.setState({\n                    addLoading: false\n                })\n            })\n        } else {   // 创建\n            actionQuestionnaire.qnaireCreate(params).then(res => {\n                if (res.code === 200) {\n                    this.showToast({ type: 'success', content: '创建成功' })\n                    this.props.changePage('list')\n                } else {\n                    this.showToast({ type: 'error', content: res.msg })\n                }\n            }).finally(() => {\n                this.setState({\n                    addLoading: false\n                })\n            })\n        }\n    }\n\n    pageTitle = () => {\n        let title = '创建问卷'\n        if (this.qnaireId) {\n            title = '编辑问卷'\n        }\n        return (\n            <div className=\"custom-page-title\">\n                <span>{title}</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.changePage('list', { page: this.props.page })\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n\n    /**\n     * 创建表单的label\n     */\n    createLabel = (labelName, need, style = {}) => {\n        return <div>\n            {need ? <span style={{ color: '#ff4d4f' }}>*</span> : null}\n            <span style={{ ...style }}>{labelName}</span>\n        </div>\n    }\n\n    range = (start, end) => {\n        const result = []\n        for (let i = start; i < end; i++) {\n            result.push(i)\n        }\n        return result\n    }\n\n    disabledDate = (current) => {\n        return current && current < moment().startOf('day')\n    }\n\n    // 成员添加\n    addSuccess = (data) => {\n        let originUsers = this.state.userGroup\n        let returnUsers = data.map(item => {\n            return {\n                'id': item.id,\n                'nickname': item.nickname\n            }\n        })\n        let newUsers = []\n        for (let user of returnUsers) {\n            let index = originUsers.findIndex(item => item.id === user.id)\n            if (index < 0) {\n                newUsers.push(user)\n            }\n        }\n        let finalUsers = originUsers.concat(newUsers)\n        this.setState({\n            userGroup: finalUsers\n        }, () => {\n            this.form.validateFields(['user_list'])\n        })\n    }\n\n    updateEditors = (callback) => {\n        this.state.editors.some((data, index) => {\n            if (data.isFirst && data.isEditor) {\n                this.state.editors.splice(index, 1)\n                return true;\n            } else if (!data.isFirst && data.isEditor) {\n                data.isEditor = false;\n                return true;\n            };\n        });\n        callback(this.state.editors);\n    }\n\n    createEditor = (type) => {\n        const editor = {\n            questionId: uuid(), // id\n            type: type || 'radio', // 类型\n            title: '', // 标题\n            required: false, // 是否必填\n            rows: ['', ''],   // matrixrate 行标题\n            options: ['', ''], // 选项(radio,checkbox,dropdown,rate,matrixrate)\n        };\n        // this.setState(prevState => ({\n        //     editors: [...prevState.editors, editor],\n        // }))\n        this.state.editors.push(editor);\n        this.forceUpdate();\n    }\n\n    confirmEdit = (index, newEditor) => {\n        const { onConfirm } = this.props;\n        let editors = JSON.parse(JSON.stringify(this.state.editors));\n        editors.splice(index, 1, newEditor);\n        this.setState({\n            editors,\n            qnaireInfo: {\n                ...this.state.qnaireInfo,\n                question: JSON.stringify(editors)\n            }\n        }, () => {\n            if (onConfirm) {\n                this.updateEditors(onConfirm);\n            };\n        })\n    }\n\n    cancelEdit = (index) => {\n        // let editors = JSON.parse(JSON.stringify(this.state.editors));\n        // editors[index].isFirst ? editors.splice(index, 1) : editors[index].isEditor = false;\n        // this.setState({\n        //     editors,\n        // });\n        this.state.editors.splice(index,1);\n        this.forceUpdate();\n    }\n\n    handleEdit = (data, index) => {\n        this.state.editors[index] = data;\n        this.forceUpdate();\n    }\n    render() {\n        const { showSelectGroup, selectType, originCanCancel, returnStyle, mustIdent } = this.state.addUserConfig\n        const { editors } = this.state\n        const editorsEl = editors.map((editor, index) => {\n            return (\n                <div\n                    className=\"drag-wrapper\"\n                    ref={el => {\n                        console.log('question index---'+ index);\n                        this.editorsEl[index] = el\n                    }}\n                    key={editor.questionId}\n                >\n                    <QuestionnaireEditor\n                        index={index}\n                        editor={editor}\n                        isStatusEdit={this.state.qnaireInfo.edit_status}\n                        handleEdit={this.handleEdit}\n                        handleConfirm={this.confirmEdit}\n                        handleCancel={this.cancelEdit}\n                        // handleEdit={this.againEdit}\n                        // handleRemove={this.removeEdit}\n                        // handleCopy={this.copyEdit}\n                    />\n                </div>\n            );\n        });\n        return (\n            <WindowContainer title={this.pageTitle}>\n                <div className='page-info-edit'>\n                    <Tabs defaultActiveKey=\"zh\"\n                        style={{ flex: 1 }}\n                        onChange={key => {\n                            this.setState({\n                                language: key\n                            })\n                        }}\n                    >\n                        <TabPane tab=\"中文\" key=\"zh\">\n                        </TabPane>\n                        <TabPane tab=\"英文\" key=\"en\">\n                        </TabPane>\n                    </Tabs>\n                    <RLForm\n                        ref={form => this.form = form}\n                        className=\"form-questionnair\"\n                        labelCol={{ style: { width: 150, marginRight: 20, textAlign: 'right' } }}\n                        labelAlign='left'\n                        wrapperCol={{ style: { span: 24, marginRight: 30 } }}\n                        onFinish={this.editConfirm}\n                        initialValues={this.state.qnaireInfo}\n                        validateTrigger='onBlur'\n                    >\n                        {\n                            this.state.language === 'zh' ?\n                                <RLFormItem\n                                    name='title'\n                                    label='问卷主题'\n                                    colon={false}\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: '请输入问卷主题'\n                                        }, {\n                                            max: 50,\n                                            message: '问卷主题最多50个字符'\n                                        }\n                                    ]}\n                                >\n                                    <RLInput\n                                        placeholder='请输入问卷主题'\n                                        style={{ width: 400 }}\n                                        value={this.state.qnaireInfo.title}\n                                        onChange={e => {\n                                            this.setState({\n                                                qnaireInfo: {\n                                                    ...this.state.qnaireInfo,\n                                                    title: e.target.value\n                                                }\n                                            })\n                                        }}\n                                    />\n                                </RLFormItem> :\n                                <RLFormItem\n                                    name='e_title'\n                                    label='问卷主题'\n                                    colon={false}\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: '请输入问卷主题'\n                                        }, {\n                                            max: 50,\n                                            message: '问卷主题最多50个字符'\n                                        }\n                                    ]}\n                                >\n                                    <RLInput\n                                        placeholder='请输入问卷主题'\n                                        style={{ width: 400 }}\n                                        value={this.state.qnaireInfo.e_title}\n                                        onChange={e => {\n                                            this.setState({\n                                                qnaireInfo: {\n                                                    ...this.state.qnaireInfo,\n                                                    e_title: e.target.value\n                                                }\n                                            })\n                                        }}\n                                    />\n                                </RLFormItem>\n                        }\n                        {\n                            this.state.language === 'zh' ?\n                                <RLFormItem\n                                    name='desc'\n                                    label='问卷简介'\n                                    colon={false}\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: '请输入问卷简介'\n                                        }, {\n                                            max: 200,\n                                            message: '问卷简介最多200个字符'\n                                        }\n                                    ]}\n                                >\n                                    <RLTextarea\n                                        placeholder='请输入问卷简介'\n                                        rows={2}\n                                        style={{ width: 520 }}\n                                        value={this.state.qnaireInfo.desc}\n                                        onChange={e => {\n                                            this.setState({\n                                                qnaireInfo: {\n                                                    ...this.state.qnaireInfo,\n                                                    desc: e.target.value\n                                                }\n                                            })\n                                        }}\n                                    />\n                                </RLFormItem> :\n                                <RLFormItem\n                                    name='e_desc'\n                                    label='问卷简介'\n                                    colon={false}\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: '请输入问卷简介'\n                                        }, {\n                                            max: 200,\n                                            message: '问卷简介最多50个字符'\n                                        }\n                                    ]}\n                                >\n                                    <RLTextarea\n                                        placeholder='请输入问卷简介'\n                                        rows={2}\n                                        style={{ width: 520 }}\n                                        value={this.state.qnaireInfo.e_desc}\n                                        onChange={e => {\n                                            this.setState({\n                                                qnaireInfo: {\n                                                    ...this.state.qnaireInfo,\n                                                    e_desc: e.target.value\n                                                }\n                                            })\n                                        }}\n                                    />\n                                </RLFormItem>\n                        }\n                        <RLFormItem\n                            name='image'\n                            label='问卷封面'\n                            colon={false}\n                        >\n                            <CmpUpload\n                                aspect={4 / 3}\n                                saveUrl={fileurl => {\n                                    this.form.setFieldsValue({\n                                        image: fileurl\n                                    })\n                                    this.setState({\n                                        qnaireInfo: {\n                                            ...this.state.qnaireInfo,\n                                            image: fileurl\n                                        }\n                                    })\n                                }}\n                                src={this.state.qnaireInfo.image}\n                                imgStyle={{ width: 120, height: 90, borderRadius: 4, cursor: 'pointer' }}\n                                default={require('../../../../assets/images/upload.png').default}\n                            />\n                            <div style={{ marginTop: 10 }}>只能上传jpg/png，大小不超过2M，图片比例4：3</div>\n                        </RLFormItem>\n\n                        <RLFormItem\n                            name='question'\n                            label='问题设置'\n                            colon={false}\n                        >\n                            <div className=\"questionnair\">\n                                {editorsEl.length > 0 && editorsEl}\n                            </div>\n                            <div className=\"questionnair-add\"\n                                onClick={() => {\n                                    this.createEditor()\n                                }}\n                            >\n                                <img\n                                    alt=''\n                                    src={require('../../../../assets/images/questionnaire/add_question.png').default}\n                                    style={{ width: 24, height: 24, marginRight: 8 }}\n                                />\n                                <span style={{ fontSize: 14, color: '#333333' }}>添加问题</span>\n                            </div>\n                        </RLFormItem>\n                        <RLFormItem\n                            name='end_time_at'\n                            label='截止时间'\n                            colon={false}\n                            rules={[\n                                {\n                                    required: true,\n                                    message: '请选择截止时间'\n                                }\n                            ]}\n                        >\n                            <DatePicker\n                                allowClear\n                                locale={locale}\n                                showTime\n                                disabledDate={this.disabledDate}\n                                format={'YYYY-MM-DD HH:mm'}\n                                placeholder='请选择日期时间'\n                            />\n                        </RLFormItem>\n                        <RLFormItem\n                            name='q_type'\n                            label='发布范围'\n                            colon={false}\n                        >\n                            <RLRadioGroup\n                                items={[\n                                    { value: 1, label: '公开' },\n                                    { value: 2, label: '非公开' }\n                                ]}\n                                value={this.state.qnaireInfo.q_type}\n                                onChange={e => {\n                                    this.setState({\n                                        qnaireInfo: {\n                                            ...this.state.qnaireInfo,\n                                            q_type: e.target.value\n                                        }\n                                    }, () => {\n                                        this.form.validateFields(['user_list'])\n                                    })\n                                }}\n                            />\n                        </RLFormItem>\n                        <RLFormItem\n                            label={this.createLabel('可见名单', this.state.qnaireInfo.q_type === 1 ? false : true)}\n                            colon={false}\n                            name='user_list'\n                            rules={[\n                                {\n                                    validator: () => {\n                                        if (this.state.qnaireInfo.q_type === 2) {\n                                            if (this.state.userGroup.length === 0) {\n                                                return Promise.reject('如果发布范围选择的是非公开，可见名单是必填项')\n                                            } else {\n                                                return Promise.resolve()\n                                            }\n                                        } else {\n                                            return Promise.resolve()\n                                        }\n                                    }\n                                }\n                            ]}\n                        >\n                            <div className='form-item-gropu'>\n                                <div style={{\n                                    width: 520,\n                                    minHeight: 60,\n                                    border: '1px solid rgb(220, 223, 230)',\n                                    borderRadius: 3,\n                                    display: 'flex',\n                                    flexWrap: 'wrap',\n                                    padding: '10px 10px 10px 10px',\n                                    boxSizing: 'border-box'\n                                }}>\n                                    {this.state.userGroup.map(ele => {\n                                        return <div style={{ height: 19, marginTop: 4 }} key={ele.id}>\n                                            <RLTag\n                                                label={ele.nickname}\n                                                closable\n                                                onClose={() => {\n                                                    let all = [...this.state.userGroup]\n                                                    let index = all.findIndex(clc => { return clc.id === ele.id })\n                                                    all.splice(index, 1)\n                                                    this.setState({\n                                                        userGroup: all\n                                                    })\n                                                }}\n                                            />\n                                        </div>\n                                    })}\n                                </div>\n                                <RLButton\n                                    label='添加用户'\n                                    type='primary'\n                                    disabled={this.state.qnaireInfo.q_type === 1}\n                                    onClick={() => {\n                                        this.setState({\n                                            showAddUserModal: true\n                                        })\n                                    }}\n                                    style={{ marginLeft: 20 }}\n                                />\n                            </div>\n                        </RLFormItem>\n                        <RLFormItem>\n                            <div style={{ display: 'flex', justifyContent: 'center' }}>\n                                <RLButton\n                                    type=\"default\"\n                                    label='取消'\n                                    width={80}\n                                    style={{ display: 'inline-block' }}\n                                    onClick={() => {\n                                        this.props.changePage('list')\n                                    }}\n                                />\n                                <RLButton\n                                    type=\"primary\"\n                                    htmlType=\"submit\"\n                                    label={this.qnaireId ? '保存' : '创建'}\n                                    style={{ marginLeft: 40, display: 'inline-block' }}\n                                    loading={this.state.addLoading}\n                                    width={80}\n                                />\n\n                            </div>\n\n                        </RLFormItem>\n                    </RLForm>\n                </div>\n                {\n                    this.state.showAddUserModal && <AddUser\n                        visible={this.state.showAddUserModal}\n                        showSelectGroup={showSelectGroup}\n                        selectType={selectType}\n                        originArr={this.state.userGroup}\n                        originCanCancel={originCanCancel}\n                        returnStyle={returnStyle}\n                        mustIdent={mustIdent}\n                        onCancel={() => {\n                            this.setState({\n                                showAddUserModal: false\n                            })\n                        }}\n                        onAdd={data => {\n                            this.addSuccess(data)\n                        }}\n                    />\n                }\n            </WindowContainer >\n        )\n    }\n\n}\nexport default connect((store, props) => {\n    return {\n        ...props\n    }\n})(CmpQnaireEdit)\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/marketingTool/components/Questionnaire/CmpQnaireList.js",["1300","1301"],"import BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport {\n    RLInput, RLButton, RLTable, RLFilterTool, RLSwitch, RLTooltip, RLModal\n} from '@components/index.js'\nimport utils, { downloadUrl, downloadFile } from '@/libs/utils.js'\nimport config from '@/config.js'\nimport interfaces from '@/api/interfaces.js'\nimport { dealTableTime, dealDateTime } from '@/libs/utils.js'\nimport locale from 'antd/es/date-picker/locale/zh_CN'\n\nimport actionQuestionnaire from '@actions/marketingTool/actionQuestionnaire.js'\n\n\nclass CmpQnaireList extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.state = {\n            title: '',   // 问卷名称\n            qnaireListInfo: {\n                pageNum: 1,  // 总页数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: props.page || 1,     // 当前第几页\n            },\n            shareModal: false,   // 问卷分享弹框\n            shareImg: '',   // 分享二维码\n            shareUrl: '',   // 分享url\n\n            getListLoading: true,   // 获取列表loading\n        }\n        this.columns = [\n            {\n                title: '问卷调查',\n                dataIndex: 'title',\n                key: 'title',\n                width: '25%',\n                render: (text, record) => <RLTooltip placement=\"bottomLeft\" title={record.title}>\n                    <div className='line-clamp-noColor'>\n                        {record.title}\n                    </div>\n                </RLTooltip>\n            },\n            {\n                title: '参与人数',\n                dataIndex: 'join_num',\n                key: 'join_num',\n                width: '10%'\n            },\n            {\n                title: '截止时间',\n                dataIndex: 'end_time_at',\n                key: 'end_time_at',\n                width: '15%',\n                render: (text, record) => {\n                    return (\n                        <div>\n                            {dealTableTime(record.end_time_at)}\n                        </div>\n                    )\n                }\n            },\n            {\n                title: '问卷状态',\n                dataIndex: 'q_status',\n                key: 'q_status',\n                width: '10%',\n                render: (text, record) => {\n                    return (\n                        <div>\n                            {record.q_status === 1 ? '未开始' : (record.q_status === 2 ? '进行中' : (record.q_status === 3 ? '已结束' : '-'))}\n                        </div>\n                    )\n                }\n            },\n            {\n                title: '标签',\n                dataIndex: 'status',\n                key: 'status',\n                width: '15%',\n                render: (text, record) => {\n                    return (\n                        <div style={{ display: 'flex', flexDirection: 'row' }}>\n                            <div style={{ width: 70, marginBottom: 5 }}>上架/下架</div>\n                            {\n                                interfaces.QNAIRE_UPDATE_STATUS && <RLSwitch\n                                    key={record.id}\n                                    defaultChecked={record.status === 1}\n                                    disabled={record.q_status === 3}\n                                    onChange={value => {\n                                        // 调用更新接口\n                                        this.updateValue(record, value)\n                                    }}\n                                />\n                            }\n                        </div>\n                    )\n                }\n            },\n            {\n                title: '创建时间',\n                dataIndex: 'created_at',\n                key: 'created_at',\n                width: '15%',\n                render: (text, record) => {\n                    return <div>\n                        {dealTableTime(record.created_at)}\n                    </div>\n                }\n            },\n            {\n                title: '创建者',\n                dataIndex: 'nickname',\n                key: 'nickname',\n                width: '15%',\n                render: (text, record) => <RLTooltip placement=\"bottomLeft\" title={record.nickname}>\n                    <div className='line-clamp-noColor'>\n                        {record.nickname}\n                    </div>\n                </RLTooltip>\n            },\n            {\n                title: <span style={{ paddingLeft: 6 }}>操作</span>,\n                key: 'option',\n                width: '15%',\n                render: (text, record) => (\n                    <div style={{ display: 'flex', flexDirection: 'column' }}>\n                        <div style={{ display: 'flex', flexDirection: 'row' }}>\n                            {\n                                interfaces.QNAIRE_DELETE && <RLButton\n                                    type='link'\n                                    label='删除'\n                                    onClick={e => {\n                                        this.showModal({\n                                            content: '确认删除后，该问卷将被彻底删除，是否确认删除？',\n                                            title: '是否删除该问卷？',\n                                            okText: '确定',\n                                            cancelText: '取消',\n                                            onOk: () => {\n                                                this.eventDelConfirm(record)\n                                            },\n                                            onCancel: () => { },\n                                            size: 'big'\n                                        })\n                                    }}\n                                />\n                            }\n                            {\n                                record.q_status === 3 && <RLButton\n                                    type='link'\n                                    label='导出'\n                                    onClick={e => {\n                                        actionQuestionnaire.surveyResultExport({ qid: record.id }).then(res => {\n                                            if (res.code === 200) {\n                                                downloadFile(res.data, '问卷调查结果.xlsx')\n                                            } else {\n                                                this.showToast({ type: 'error', content: '导出文件出错' })\n                                            }\n                                        }).catch(err => {\n                                            console.log(err)\n                                        })\n                                    }}\n                                />\n                            }\n                            {\n                                record.q_status !== 3 && <RLButton\n                                    type='link'\n                                    label='问卷分享'\n                                    onClick={() => {\n                                        const url = config.host + `/#/out/qnairedetail?qnaireId=${record.id}`\n                                        console.log('链接---------------------', url)\n                                        actionQuestionnaire.getQRCode({ url: encodeURIComponent(url) }).then(res => {\n                                            if (res.code === 200) {\n                                                this.setState({\n                                                    shareImg: res.data.share,\n                                                    shareUrl: url,\n                                                    shareModal: true\n                                                })\n                                            } else {\n                                                this.showToast({ type: 'error', content: res.msg })\n                                            }\n                                        })\n                                    }}\n                                />\n                            }\n                        </div>\n                        <div style={{ display: 'flex', flexDirection: 'row' }}>\n                            {\n                                interfaces.QNAIRE_EDIT && record.q_status === 1 && <RLButton\n                                    type='link'\n                                    label='编辑'\n                                    onClick={() => {\n                                        this.props.changePage('edit', {\n                                            qnaireId: record.id,\n                                            page: this.state.qnaireListInfo.page\n                                        })\n                                    }}\n                                />\n                            }\n                            {\n                                interfaces.QNAIRE_RESULT && record.q_status !== 1 && <RLButton\n                                    label=\"调查结果\"\n                                    type=\"link\"\n                                    onClick={() => {\n                                        this.props.changePage('survey', {\n                                            qnaireId: record.id,\n                                            page: this.state.qnaireListInfo.page\n                                        })\n                                    }}\n                                />\n                            }\n                        </div>\n                    </div>\n                )\n            }\n        ]\n    }\n    componentDidMount() {\n        this.getQnaireList()\n    }\n    componentWillUnmount() {\n\n    }\n\n    getQnaireList({ sign, page = this.state.qnaireListInfo.page } = { sign: true, page: this.state.qnaireListInfo.page }) {\n        if (sign) {\n            this.setState({\n                getListLoading: true\n            })\n        }\n        actionQuestionnaire.getQnaireList({\n            title: this.state.title,\n            page,\n            page_size: this.pageSize\n        }).then(res => {\n            if (res.code === 200) {\n                if (res.date && res.data.list.length === 0 && page > 1) {\n                    this.getQnaireList({ page: page - 1 })\n                } else {\n                    let newState = {\n                        qnaireListInfo: {\n                            list: res.data.list,\n                            page,\n                            count: res.data.count,\n                            pageNum: Math.ceil(res.data.count / this.pageSize)\n                        }\n                    }\n                    this.setState(newState)\n                }\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        }).finally(() => {\n            this.setState({\n                getListLoading: false\n            })\n        })\n    }\n\n    // 更新上下架\n    updateValue = (record, value) => {\n        const params = {\n            id: record.id,\n            status: value ? 1 : 2\n        }\n        return actionQuestionnaire.qnaireUpdateStatus(params).then(res => {\n            if (res.code === 200) {\n                record.status = value ? 1 : 2\n                this.getQnaireList({ sign: false })\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        }).catch(e => {\n            this.showToast({ type: 'error', content: '操作失败' })\n        })\n    }\n\n    // 删除\n    eventDelConfirm = (record) => {\n        const params = {\n            id: record.id\n        }\n        return actionQuestionnaire.qnaireDelete(params).then(res => {\n            if (res.code === 200) {\n                this.getQnaireList({ sign: false })\n                this.showToast({ type: 'success', content: '删除成功' })\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        })\n    }\n\n    // 渲染问卷分享弹框\n    renderShare = () => {\n        return (\n            <RLModal\n                title='问卷分享'\n                className=\"share-modal\"\n                maskClosable={false}\n                visible={this.state.shareModal}\n                footer={null}\n                onCancel={() => {\n                    this.setState({\n                        shareModal: false\n                    })\n                }}\n            >\n                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', marginTop: 48, marginLeft: 16 }}>\n                    <div style={{ marginRight: 20 }}>\n                        <img\n                            alt=''\n                            src={this.state.shareImg}\n                            style={{ height: 170, width: 170 }}\n                        />\n                    </div>\n                    <div style={{ width: '100%' }}>\n                        <div style={{ display: 'flex', flexDirection: 'row', marginBottom: 28 }}>\n                            <RLInput\n                                style={{ width: 260, height: 40 }}\n                                value={this.state.shareUrl}\n                            />\n                            <RLButton\n                                label='复制链接'\n                                type='primary'\n                                onClick={() => {\n                                    utils.copy(this.state.shareUrl, () => {\n                                        this.showToast({ type: 'success', content: '链接已复制到剪贴板' })\n                                    })\n                                }}\n                            />\n                        </div>\n                        <RLButton\n                            label='下载问卷二维码'\n                            onClick={() => {\n                                downloadUrl(this.state.shareImg, '问卷二维码')\n                            }}\n                        />\n                    </div>\n                </div>\n            </RLModal>\n        )\n    }\n\n    getRightItems = () => {\n        return ([\n            <RLInput placeholder='请输入问卷名称'\n                style={{ width: 240, marginRight: 12 }}\n                key='title'\n                value={this.state.title}\n                onChange={e => {\n                    this.setState({\n                        title: e.target.value\n                    })\n                }}\n            />,\n            <RLButton\n                label='搜索'\n                type=\"primary\"\n                key='search'\n                onClick={() => {\n                    this.getQnaireList()\n                }}\n                style={{ marginLeft: 20, marginRight: 20 }}\n            />,\n            <RLButton\n                label='重置'\n                type='default'\n                key='reset'\n                onClick={() => {\n                    this.setState({\n                        title: ''\n                    })\n                }}\n            />\n        ])\n    }\n\n    listOperate = () => {\n        return ([\n            interfaces.QNAIRE_CREATE && <RLButton\n                label='创建问卷'\n                type='primary'\n                key='add'\n                onClick={() => {\n                    this.props.changePage('edit', {\n                        page: this.state.qnaireListInfo.page\n                    })\n                }}\n            />,\n            <RLButton\n                label='刷新'\n                key='refresh'\n                onClick={() => {\n                    this.getQnaireList()\n                }}\n                style={{ marginLeft: 20 }}\n            />\n        ])\n    }\n\n    pageChange = (page, pageSize) => {\n        this.getQnaireList({ page })\n    }\n\n    render() {\n        const { list, count, page } = this.state.qnaireListInfo\n        return (\n            <WindowContainer>\n                <div className=\"page-info-list\">\n                    <RLFilterTool rightItems={this.getRightItems} />\n                    <RLFilterTool rightItems={this.listOperate} />\n                    <RLTable\n                        loading={this.state.getListLoading}\n                        dataSource={list}\n                        rowKey='id'\n                        columns={this.columns}\n                        paginationInfo={{\n                            total: count,\n                            pageSize: this.pageSize,\n                            onChange: this.pageChange,\n                            current: page\n                        }}\n                        rowClassName='rl-table-click-row'\n                    />\n                    {\n                        this.state.shareModal && this.renderShare()\n                    }\n                </div>\n            </WindowContainer>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props\n    }\n})(CmpQnaireList)\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/marketingTool/components/Questionnaire/CmpQnaireResList.js",["1302","1303","1304","1305","1306","1307","1308","1309","1310","1311","1312","1313","1314","1315"],"import BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport {\n    RLInput, RLButton, RLTable, RLFilterTool, RLSwitch, RLTooltip, RLModal, RLSelect\n} from '@components/index.js'\nimport utils, { downloadUrl, downloadFile } from '@/libs/utils.js'\nimport config from '@/config.js'\nimport interfaces from '@/api/interfaces.js'\nimport { dealTime, dealTableTime, dealDateTime } from '@/libs/utils.js'\nimport locale from 'antd/es/date-picker/locale/zh_CN'\nimport moment from 'moment';\nimport actionQuestionnaire from '@actions/marketingTool/actionQuestionnaire.js'\n\n\nclass CmpQnaireResList extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.qnaireId = props.qnaireId;\n        this.qnairePage = props.page;\n        this.state = {\n            title: '',   // 问卷名称\n            user_type: undefined,\n            qnaireDetail: {\n                question: \"[]\"\n            },\n            qnaireResListInfo: {\n                pageNum: 1,  // 总页数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: 1,     // 当前第几页\n            },\n            getListLoading: true,   // 获取列表loading\n            allSelect: [],    //所有选择ID集合\n        }\n       \n        this.getQnaireDetail();\n        this.getQnaireResList();\n    }\n    componentDidMount() {\n        // this.getQnaireResList()\n    }\n    componentWillUnmount() {\n\n    }\n    getQnaireDetail(){\n        actionQuestionnaire.getQnaireDetail({ id: this.qnaireId }).then(res => {\n            if (res.code === 200) {\n                const data = res.data\n                this.setState({\n                    qnaireDetail: {\n                        ...data,\n                        end_time_at: moment(dealTime(data.end_time_at, 'YYYY-MM-DD HH:mm')),\n                    },\n                });\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        })\n    }\n    getQnaireResList({ sign, page } = { sign: true, page: this.state.qnaireResListInfo.page }) {\n        if (sign) {\n            this.setState({\n                getListLoading: true\n            })\n        }\n        actionQuestionnaire.getSurveyList({\n            id: this.qnaireId,\n            user_type: this.state.user_type || 0,\n            page,\n            page_size: this.pageSize\n        }).then(res => {\n            if (res.code === 200) {\n                if (res.date && res.data.list.length === 0 && page > 1) {\n                    this.getQnaireResList({ page: page - 1 })\n                } else {\n                    let newState = {\n                        qnaireResListInfo: {\n                            list: res.data.list,\n                            page,\n                            count: res.data.count,\n                            pageNum: Math.ceil(res.data.count / this.pageSize)\n                        }\n                    }\n                    this.setState(newState)\n                }\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        }).finally(() => {\n            this.setState({\n                getListLoading: false\n            })\n        })\n    }\n    pageTitle = () => {\n        return (\n            <div className=\"custom-page-title\">\n                <span>调查结果</span>\n                <RLButton\n                    label=\"返回\"\n                    onClick={() => {\n                        this.props.changePage('list', {\n                            page: this.qnairePage\n                        })\n                    }}\n                />\n            </div>\n        )\n    }\n    getLeftItems = () => {\n        return ([\n            <div style={{fontSize:16,fontWeight:400}}>\n                问卷主题: {this.state.qnaireDetail.title}\n            </div>\n        ])\n    }\n    getRightItems = () => {\n        return ([\n            <RLSelect placeholder='用户类型'\n                options={[\n                    {label: '认证用户',value: 2},\n                    {label: '普通用户', value: 1},\n                    {label: '游客', value: 3}\n                ]}\n                allowClear={true}\n                style={{ width: 240, marginRight: 12 }}\n                key='user_type'\n                value={this.state.user_type}\n                onChange={val => {\n                    this.setState({\n                        user_type: val\n                    }, ()=>{\n                        this.getQnaireResList();\n                    })\n                }}\n            />,\n            <RLButton \n                label=\"批量导出\"\n                type=\"primary\"\n                onClick={() => {\n                    actionQuestionnaire.surveyResultExport({ qid: this.qnaireId, ids: this.state.allSelect.join(',') }).then(res => {\n                        if (res.code === 200) {\n                            downloadFile(res.data, '问卷调查结果.xlsx')\n                            this.setState({\n                                allSelect: []\n                            })\n                        } else {\n                            this.showToast({ type: 'error', content: '导出文件出错' })\n                        }\n                    }).catch(err => {\n                        console.log(err)\n                    })\n                }}\n                disabled={this.state.allSelect.length <= 0}\n            />\n        ])\n    }\n\n    onSelectChange = (selectedRowKeys, selectedRows) => {\n        let i = 0\n        let currentPage = this.state.qnaireResListInfo.list\n        let allSelect = [...this.state.allSelect]\n        for (i; i < currentPage.length; i++) {\n            let isInSelect = selectedRowKeys.findIndex(ele => { return ele == currentPage[i].id })\n            let isInOrigin = allSelect.findIndex(ele => { return ele == currentPage[i].id })\n            // 取消勾选\n            if (isInSelect === -1 && isInOrigin !== -1) {\n                allSelect.splice(isInOrigin, 1)\n            }\n            // 勾选\n            else if (isInSelect !== -1 && isInOrigin === -1) {\n                allSelect.push(selectedRowKeys[isInSelect])\n            }\n            this.setState({\n                allSelect: [...allSelect]\n            })\n        }\n    }\n\n    pageChange = (page, pageSize) => {\n        this.getQnaireResList({ page })\n    }\n\n    render() {\n        const questions = JSON.parse(this.state.qnaireDetail.question);\n        const questionColumns = questions.map((item, index) => {\n            return {\n                title: questions[index].title,\n                key: questions[index].title,\n                // width: (100 / questions.length).toFixed(1) + '%',\n                width: 400,\n                render: (text, record) => <RLTooltip placement=\"bottomLeft\" title={JSON.parse(record.answer)[questions[index].questionId]}>\n                    <div style={{ whiteSpace: 'pre-wrap' }}>\n                        {JSON.parse(record.answer)[questions[index].questionId]}\n                    </div>\n                </RLTooltip>\n            }\n        });\n        this.columns = [\n            {\n                title: '序号',\n                key: 'index',\n                width: '80px',\n                fixed: 'left',\n                render: (text, record, index) =>{\n                    return <div>{this.pageSize * (this.state.qnaireResListInfo.page - 1) + index + 1}</div>\n                }\n            },\n            {\n                title: '用户昵称',\n                dataIndex: 'nickname',\n                key: 'nickname',\n                width: '130px',\n                fixed: 'left',\n                render: (text, record) => <RLTooltip placement=\"bottomLeft\" title={record.nickname}>\n                    <div className='line-clamp-noColor' style={{display:'flex',flexDirection:'column'}}>\n                        <div>{record.nickname}</div>\n                        {\n                            record.user_type === 2 && <div>(认证用户)</div>\n                        }\n                    </div>\n                </RLTooltip>\n            },\n            {\n                title: '提交时间',\n                dataIndex: 'nickname',\n                key: 'nickname',\n                width: '130px',\n                render: (text, record) => <div>\n                    {moment(record.created_at * 1000).format('YYYY-MM-DD HH:mm')}\n                </div>\n            },\n            {\n                title: '得分',\n                dataIndex: 'score',\n                key: 'score',\n                width: '100px'\n            },\n          \n            ...questionColumns,\n        ]\n        const { list, count, page } = this.state.qnaireResListInfo\n        let colLength = questions.length * 400 + 440\n        return (\n            <WindowContainer title={this.pageTitle}>\n                <div className=\"page-qnaire-result-list\">\n                    <RLFilterTool leftItems={this.getLeftItems} rightItems={this.getRightItems} />\n                    <RLTable\n                        ref={t => this.table = t}\n                        loading={this.state.getListLoading}\n                        dataSource={list}\n                        rowKey='id'\n                        columns={this.columns}\n                        rowSelection= {{\n                            type: 'checkbox',\n                            selectedRowKeys: this.state.allSelect,\n                            onChange: this.onSelectChange,\n                            getCheckboxProps: (record) => ({\n                                disabled: false\n                            })\n                        }}\n                        paginationInfo={{\n                            total: count,\n                            pageSize: this.pageSize,\n                            onChange: this.pageChange,\n                            current: page\n                        }}\n                        rowClassName='rl-table-click-row'\n                        scroll={{ x: colLength }}\n                    />\n                    {\n                        this.state.shareModal && this.renderShare()\n                    }\n                </div>\n            </WindowContainer>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props\n    }\n})(CmpQnaireResList)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/PhoneRegionView.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/components/document/DocumentProgress.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/DocumentsList.js",["1316"],"import BaseCmp from '@components/BaseCmp.js'\nimport { RLFilterTool, RLButton, RLTable, RLDisplayBoard, RLSelect } from '@components/index.js'\nimport actionMeeting from '@actions/meetingManage/actionMeeting.js'\nimport { dealTableTime } from '@/libs/utils'\nimport { connect } from 'react-redux';\nimport WindowContainer from '@components/WindowContainer.js'\nimport Config from '@/config.js'\nimport './DocumentsList.less'\n\nclass DocumentsList extends BaseCmp {\n    constructor(props) {\n        super(props);\n        this.isLive = this.props.isLive;\n        this.isMeeting = this.props.isMeeting;\n        this.state = {\n            searchParam: {  // 搜索列表筛选条件\n                meeting_id: this.props.meeting_Id\n            },\n            meetingInfo: {\n\n            },\n            pageInfo: {  // 列表信息\n                pageNum: 1,  // 总叶数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: 1,     // 当前第几页\n            },\n            listLoading: true,      // 获取列表中loading\n        };\n    }\n    componentDidMount() {\n        this.props.onRef(this)\n        this.getDocumentsList()\n    }\n    getColumns = () => {\n        let columns = [\n            {\n                title: '文档名称',\n                key: 'title',\n                width: '20%',\n                dataIndex: 'title'\n            },\n            {\n                title: '创建者',\n                dataIndex: 'nickname',\n                key: 'nickname',\n                width: '14%'\n            },\n            {\n                title: '修改时间',\n                dataIndex: 'update_at',\n                key: 'update_at',\n                width: '18%',\n                render: (text, record) => {\n                    return <span>\n                        {dealTableTime(record.start_time_at)}\n                    </span>\n                }\n            },\n            {\n                title: '文档权限',\n                key: 'doc_type',\n                width: '20%',\n                render: (text, record) => {\n                    return <div>\n                        <RLSelect\n                            options={Config.listRight}\n                            value={record.doc_type}\n                            style={{\n                                width: 180\n                            }}\n                            onChange={(e) => {\n                                this.changeDocRight(record, e)\n                            }}\n                        />\n                    </div>\n                }\n            }\n        ]\n        return columns\n    }\n    // \n    pageChange = (page, pageSize) => {\n        this.getDocumentsList({ page })\n    }\n    changeDocRight = (record, type) => {\n        actionMeeting.changeDocRight({\n            id: record.doc_id,\n            doc_type: type\n        }).then(res => {\n            if (res.code == 200) {\n                this.getDocumentsList();\n            }\n        })\n    }\n    getDocumentsList = ({ page = this.state.pageInfo.page } = { page: this.state.pageInfo.page }) => {\n        this.setState({\n            listLoading: true,\n        })\n        actionMeeting.getDocumentsList({\n            ...this.state.searchParam,\n            page,\n            pagesize: this.pageSize\n        }).then(res => {\n            if (res.code === 200) {\n                let newState = {\n                    pageInfo: {\n                        list: res.data.list,\n                        page,\n                        count: res.data.count,\n                        pageNum: Math.ceil(res.data.count / this.pageSize)\n                    },\n                    meetingInfo: {\n                        ...res.data.meeting\n                    }\n                }\n                this.setState(newState)\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        }).finally(() => {\n            this.setState({\n                listLoading: false,\n            })\n        })\n    }\n    getRightItems = () => {\n        return (\n            [\n                <RLButton\n                    label='导入文档'\n                    type='primary'\n                    key={'import_Doc'}\n                    onClick={() => { console.log('正在开发😊') }}\n                />\n            ]\n        )\n    }\n    pageTitle = () => {\n        return (\n            <div className=\"custom-page-title\">\n                <span>文档列表</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.closeDocumentsList()\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n    getTxt = () => {\n        if (this.isLive) {\n            return '直播'\n        } else if (this.isMeeting) {\n            return '会议'\n        }\n    }\n    render() {\n        return (\n            <div className=\"floatBox documentsList\">\n                <WindowContainer title={this.pageTitle}>\n                    <RLDisplayBoard className='meeting-info-board'>\n                        <div className='meeting-title'>\n                            <span>{this.state.meetingInfo.title}</span>\n                        </div>\n                        <div className='meeting-info'>\n                            <div className='meeting-info-item'>\n                                <span className='item-label'>{this.getTxt()}号：</span>\n                                <span className='item-value'>{this.state.meetingInfo.room}</span>\n                                <span className='meetingTime'>{this.state.meetingInfo.real_start_time_at ? dealTableTime(this.state.meetingInfo.real_start_time_at) : null}</span>\n                            </div>\n                        </div>\n                    </RLDisplayBoard>\n                    <RLFilterTool rightItems={this.getRightItems} />\n                    <RLTable\n                        loading={this.state.listLoading}\n                        dataSource={this.state.pageInfo.list}\n                        rowKey='doc_id'\n                        columns={this.getColumns()}\n                        paginationInfo={{\n                            total: this.state.pageInfo.count,\n                            pageSize: this.pageSize,\n                            onChange: this.pageChange,\n                            current: this.state.pageInfo.page\n                        }}\n                        rowClassName='rl-table-click-row'\n                    />\n                </WindowContainer>\n            </div>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props\n    }\n})(DocumentsList);","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/DocumentsMeetingList.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/listManage/CmpMeetingList.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/marketingTool/actionQAManage.js",["1317","1318","1319"],"import { getData } from '@/libs/utils.js'\nimport store from '@/store/index.js'\nimport actionTypes from '@/store/actionTypes.js'\nimport interfaces from '@/api/interfaces.js'\nimport config from '@/config.js'\n\nconst actionQAManage = {\n\n    getQuestionList(data){\n        return getData({\n            method: 'get',\n            url: interfaces.QUESTION_LIST,\n            data: data\n        })\n    },\n\n    getQuestionDetail(data){\n        return getData({\n            method: 'get',\n            url: interfaces.QUESTION_DETAIL,\n            data: data\n        })\n    },\n\n    toggleShow(data){\n        return getData({\n            method: 'get',\n            url: interfaces.QUESTION_SHOW_TOGGLE,\n            data: data\n        })\n    },\n\n    replyCommit(data){\n        return getData({\n            method: 'post',\n            url: interfaces.QUESTION_REPLY,\n            data: data\n        })\n    },\n\n    replyEdit(data){\n        return getData({\n            method: 'post',\n            url: interfaces.QUESTION_REPLY_EDIT,\n            data: data\n        })\n    }\n\n\n\n\n\n\n}\n\nexport default actionQAManage;\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/marketingTool/components/QAManage/CmpFile.js",["1320","1321","1322","1323","1324","1325","1326","1327","1328","1329","1330","1331","1332","1333"],"import React, { useState } from 'react';\nimport BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport { RLButton, RLDivider, RLTextarea, RLSwitch } from '@components/index.js'\nimport actionQAManage from '@actions/marketingTool/actionQAManage.js'\nimport commonAction from '@actions/commonActions'\nimport utils from '@/libs/utils.js'\nimport config from '@/config.js'\n\nconst CmpFile = (props) => {\n    const { src, name, onDelete, editable } = props;\n    const [hover, setHover] = useState(false);\n    const isPDF = src && src.endsWith('.pdf') ? true : false;\n    return <div style={{width: 500,height:40,backgroundColor: hover ? '#eeddde':'', display: 'flex', flexDirection: 'row', alignItems:'center',marginTop:5,marginBottom:5,cursor:'pointer'}}\n                onMouseEnter = {()=>{\n                    setHover(true);\n                }}\n                onMouseLeave = {()=>{\n                    setHover(false);\n                }}\n                onClick={()=>{\n                    props.click && props.click()\n                }}\n            >\n            <img src={isPDF ? require('@/assets/images/pdf.png').default: require('@/assets/images/picture.png').default} style={{width:18,height:18}}/>\n            <div style={{marginLeft: 10, width:'80%',whiteSpace: 'nowrap', textOverflow: 'ellipsis',overflow: 'hidden'}}>{name}</div>\n            {\n                editable ? \n                <>\n                   {hover ? \n                        <img src={require('@/assets/images/file_delete.png').default}\n                            onClick={()=>{\n                                onDelete()\n                            }}\n                            style={{width:10,height:10, cursor:'pointer'}}\n                        /> : \n                        <img src={require('@/assets/images/file.png').default} style={{width:10,height:10}}/>\n                    }\n                </> : <></>\n            }    \n        </div>\n}\nexport default CmpFile;","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/CmpUpload.js",["1334"],"import BaseCmp from '@components/BaseCmp.js'\n\nimport { Upload } from 'antd';\n// import ImgCrop from 'antd-img-crop';\n// import ImgCrop from './CmpImageCropper.js';\nimport ImgCrop from './ImgCropper.js';\nimport images from '@/libs/images'\nimport commonActions from '@actions/commonActions.js'\n\nimport './CmpUpload.less';\n\nconst IMAGE_EXPRESSION = /(png|jpe?g)(\\?.*)?$/   // 上传图片格式\nexport default class CmpUpload extends BaseCmp {\n    constructor(props) {\n        super(props);\n        this.state = {\n            uploadFile: null,\n            imgUpdateIcon: null,\n            uploadFileUrl: '',\n        }\n    }\n    render() {\n        return (\n            <ImgCrop\n                aspect={this.props.aspect || 1 / 1}\n                beforeCrop={(file) => {\n                    if(file.size > 2 * 1024 * 1024){\n                        this.showToast('图片尺寸不应大于2M');\n                        return false\n                    }\n                    return true;\n                }}\n            >\n                <Upload\n                    {...this.props}\n                    accept='.jpeg,.png,.jpg'\n                    multiple={false}\n                    showUploadList={false}\n                    customRequest={(upload, cropped) => {\n                        console.log('upload:', upload.file)\n                        if (!upload.file.type.match(IMAGE_EXPRESSION)) {\n                            this.showToast('只能上传jpg/png')\n                            return\n                        }\n                        // if (!cropped && upload.file.size > 2 * 1024 * 1024) {\n                        //     this.showToast('图片尺寸不应大于2M')\n                        //     return\n                        // }\n                        let formData = new FormData();\n                        formData.append('type', 'picture')\n                        formData.append('resource', upload.file);\n                        commonActions.fileUpload(formData).then(res => {\n                            this.props.saveUrl(res.data.fileurl);\n                            this.setState({\n                                uploadFileUrl: res.data.fileurl\n                            })\n                        })\n                    }\n                    }\n                >\n                    <img\n                        src={this.state.uploadFileUrl || this.props.src || this.props.default}\n                        alt=''\n                        style={{ ...this.props.imgStyle, cursor: 'pointer' }}\n                    />\n                </Upload>\n            </ImgCrop>\n        )\n    }\n}","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/seminar/mySeminar/components/SeminarEdit.js",["1335","1336","1337","1338","1339"],"import React, { Component } from 'react';\nimport { PageHeaderWrapper } from '@ant-design/pro-layout';\nimport { Input, DatePicker, Space, Checkbox, Radio, message, TimePicker } from 'antd';\nimport moment from \"moment\"\nimport actionSeminar from '@actions/seminar/actionSeminar.js'\nimport BaseCmp from '@components/BaseCmp.js'\nimport { connect } from 'react-redux';\n\n\nclass SeminarEdit extends BaseCmp {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      meetingValue: \"\",\n      isMeetV: 0,\n      start_date: moment().format(\"YYYY-MM-DD\"),\n      start_time: moment().format(\"HH:mm\"),\n      end_date: moment().add(1, \"hours\").format(\"YYYY-MM-DD\"),\n      end_time: moment().add(1, \"hours\").format(\"HH:mm\"),\n      is_password: false,\n      video_master: \"0\",\n      video_honour: \"0\",\n      passwordValue: \"\",\n      meeting_id: null,\n      disable: 0,\n      // ispawV:null\n    }\n  }\n\n  //编辑默认状态\n  editDataInit = () => {\n    let param = {\n      meeting_id: this.props.seminarid + \"\"\n    }\n    actionSeminar.seminarDetail(param).then(res => {\n      console.log('编辑研讨会--res:', res)\n      if (res.code === 200) {\n        let { title, start_date, start_time, end_date, end_time, is_password, password, video_honour, video_master } = res.data.info\n        start_time = start_time.substring(0, 5)\n        end_time = end_time.substring(0, 5)\n        this.setState({\n          meetingValue: title,\n          start_date,\n          start_time,\n          end_date,\n          end_time,\n          is_password,\n          passwordValue: password,\n          video_master: video_master + \"\",\n          video_honour: video_honour + \"\"\n        })\n      } else {\n        this.showToast(res.msg)\n      }\n    })\n  }\n\n  //会议主题input回调\n  meetingTopicChange = (e) => {\n    this.setState({\n      meetingValue: e.target.value\n    })\n    if (e.target.value.length > 100) {\n      this.setState({\n        isMeetV: 1,\n        meetingValue: this.state.meetingValue.substring(0, 100)\n      })\n    } else {\n      if (this.state.isMeetV === 1) {\n        this.setState({\n          isMeetV: 0\n        })\n      }\n    }\n  }\n\n  //转换时间格式\n  datetimeFormat(datetime) {\n    let Y = '' + datetime.getFullYear();\n    let M = ('' + (datetime.getMonth() + 1)).padStart(2, 0);\n    let D = ('' + datetime.getDate()).padStart(2, 0);\n    let h = ('' + datetime.getHours()).padStart(2, 0);\n    let m = ('' + datetime.getMinutes()).padStart(2, 0);\n    return `${Y}-${M}-${D} ${h}:${m}`\n  }\n\n  //默认开始时间的设置\n  getInitStartTime() {\n    let _d = new Date()\n    _d.setSeconds(0)\n    let _m = _d.getMinutes()\n    let dm = 15 - _m % 15\n    _d.setMinutes(_m + dm)\n    return this.datetimeFormat(_d)\n  }\n\n  //默认结束时间\n  getInitEndTime() {\n    let datetime = this.getInitStartTime()\n    let _datetime = new Date(datetime.replace(/-/g, '/'))\n    _datetime.setMinutes(_datetime.getMinutes() + 60)\n    return this.datetimeFormat(_datetime)\n  }\n\n  //初始日期\n  getInitTime = () => {\n    let start = this.getInitStartTime().split(\" \")\n    let start_date = start[0]\n    let start_time = start[1]\n    let end = this.getInitEndTime().split(\" \")\n    let end_date = end[0]\n    let end_time = end[1]\n    this.setState({\n      start_date,\n      start_time,\n      end_date,\n      end_time\n    })\n  }\n\n  //开始日期改变的回调函数\n  startDateOnChange = (value, dateString) => {\n    let date = dateString + ' ' + this.state.start_time\n    let end_date = new Date(date.replace(/-/g, '/'))\n    end_date.setHours(end_date.getHours() + 1);\n    end_date = this.datetimeFormat(end_date)\n    this.setState({\n      start_date: dateString,\n      end_date: end_date.split(\" \")[0],\n      end_time: end_date.split(\" \")[1]\n    })\n  }\n\n  //开始时间改变的回调\n  startTimeOnChange = (value, dateString) => {\n    let date = this.state.start_date + ' ' + dateString\n    let end_date = new Date(date.replace(/-/g, '/'))\n    end_date.setHours(end_date.getHours() + 1);\n    end_date = this.datetimeFormat(end_date)\n    this.setState({\n      start_time: dateString,\n      end_date: end_date.split(\" \")[0],\n      end_time: end_date.split(\" \")[1]\n    })\n  }\n\n  //结束日期改变的回调函数\n  endDateOnChange = (value, dateString) => {\n    this.setState({\n      end_date: dateString\n    })\n  }\n\n  //结束时间改变的回调函数\n  endTimeOnChange = (value, dateString) => {\n    this.setState({\n      end_time: dateString\n    })\n  }\n\n  // 验证日期\n  dateValid() {\n    let start = this.state.start_date + \" \" + this.state.start_time\n    let end = this.state.end_date + \" \" + this.state.end_time\n    let startDate = new Date(start.replace(/-/g, '/')).getTime();\n    let endDate = new Date(end.replace(/-/g, '/')).getTime();\n    let now = new Date().getTime();\n    let d_time = endDate - startDate;\n    if (d_time > 1000 * 60 * 60 * 24) {\n      return '会议时长不能超过24小时'\n    } else if (d_time < 0) {\n      return '起始时间不能大于等于结束时间'\n    } else if (startDate < now) {\n      return '开始时间不能小于当前时间'\n    } else if (startDate - now > 1000 * 60 * 60 * 24) {\n      return '只能预约最近24小时的会议'\n    }\n    else {\n      return null\n    }\n\n  }\n\n  //密码选择的回调函数\n  pawHave = (e) => {\n    this.setState({\n      is_password: e.target.checked\n    }, () => {\n      if (!this.state.is_password) return\n      let inp = document.querySelector(\".pwdInput input\")\n      inp.focus()\n    })\n  }\n\n  //密码输入的回调\n  passwordChange = (e) => {\n    let isnum = /^\\d*$/.test(e.target.value);\n    if (!isnum) return\n    this.setState({\n      passwordValue: e.target.value\n    })\n    if (e.target.value.length > 4) return this.setState({\n      passwordValue: e.target.value.substring(0, 4),\n    })\n\n  }\n\n  //取消预约研讨会\n  cancelReserved = () => {\n    // this.props.history.push(\"/meeting/seminar\")\n    this.props.changePage('list')\n  }\n\n  //主持人视频权限\n  videoMasterChange = e => {\n    this.setState({\n      video_master: e.target.value\n    })\n  }\n\n  //嘉宾视频权限\n  videoHonourChange = e => {\n    this.setState({\n      video_honour: e.target.value\n    })\n  }\n\n  //预约会议\n  reservedSeminar = (type) => {\n    return () => {\n      if (this.state.disable === 1) return\n      let { meetingValue, start_date, start_time, end_date, end_time, is_password, passwordValue, video_honour, video_master } = this.state\n      meetingValue = meetingValue.replace(/(^\\s*)|(\\s*$)/g, '')\n      let dateValid = this.dateValid()\n      if (!start_date || !start_time) {\n        message.destroy();\n        message.warn(\"请设置研讨会开始日期\")\n        return\n      }\n      if (!end_date || !end_time) {\n        message.destroy();\n        message.warn(\"请设置研讨会结束日期\")\n        return\n      }\n      if (dateValid) {\n        message.destroy();\n        message.warn(dateValid)\n        return\n      }\n      if (is_password && !passwordValue) {\n        message.destroy();\n        message.warn(\"请设置研讨会密码\")\n        return\n      }\n      if (is_password && passwordValue.length < 4) {\n        message.destroy();\n        message.warn(\"请设置四位研讨会密码\")\n        return\n      }\n      this.setState({\n        disable: 1\n      })\n      // let seminarName = !this.props.currentUser.name ? \"XXX的研讨会\" : (this.props.currentUser.name + \"的研讨会\")\n      let seminar = {\n        title: meetingValue ? meetingValue : 'seminarName',\n        start_date,\n        start_time: start_time + \":00\",\n        end_date,\n        end_time: end_time + \":00\",\n        is_password: is_password ? 1 : 0,\n        password: passwordValue,\n        video_master,\n        video_honour\n      }\n\n      if (type === \"reserved\") {\n        message.loading({ content: '预约会议中...', key: \"reserve\" })\n        console.log(seminar);\n        actionSeminar.seminarCreate(seminar).then(res => {\n          if (res.code === 200) {\n            this.props.changePage('detail', { seminarid: res.data.meeting_id })\n          } else {\n            this.showToast(res.msg)\n          }\n        }).finally(() => {\n          this.setState({\n            submitLoading: false\n          })\n        })\n      } else {\n        let seminar1 = {\n          meeting_id: this.props.id + \"\",\n          ...seminar\n        }\n        console.log(seminar1);\n\n        actionSeminar.seminarEdit(seminar1).then(res => {\n          console.log('编辑研讨会---resd:', res)\n          if (res.code === 200) {\n            this.props.changePage('detail', { seminarid: this.props.seminarid })\n          } else {\n            this.showToast(res.msg)\n          }\n        }).finally(() => {\n          this.setState({\n            submitLoading: false\n          })\n        })\n      }\n\n    }\n  }\n  componentWillMount() {\n    if (this.props.id) {\n      this.editDataInit()\n    } else {\n      this.getInitTime()\n    }\n\n  }\n  componentDidMount() {\n    let inps = document.querySelectorAll(\"input\")\n    inps[0].focus()\n  }\n  render() {\n    // let seminarName = !this.props.currentUser.name ? \"XXX的研讨会\" : (this.props.currentUser.name + \"的研讨会\")\n\n    return (\n      <PageHeaderWrapper title={'预约网络研讨会'}>\n        <div\n          className=\"my-container\"\n          style={{\n            width: '100%',\n            paddingTop: 20,\n            backgroundColor: '#ffffff',\n          }}>\n          {/* 会议主题 */}\n          <div style={{ display: \"flex\", flexDirection: 'row' }}>\n            <div style={{ width: 220, height: 32, marginRight: 30, display: \"flex\", alignItems: \"center\", justifyContent: 'flex-end' }}>\n              <span style={{ color: \"red\", marginRight: 4 }}>*</span>\n              <span style={{ fontSize: 16 }}>会议主题</span>\n            </div>\n            <Input\n              style={{ width: 360, height: 32 }}\n              allowClear={true}\n              autoComplete=\"off\"\n              placeholder={'seminarName'}\n              value={this.state.meetingValue}\n              onChange={this.meetingTopicChange}></Input>\n            {this.state.isMeetV === 1 ? (<div style={{ height: 32, lineHeight: \"32px\", color: \"red\", marginLeft: 10 }}>会议主题不可以超过100个字符哦~</div>) : null}\n          </div>\n          {/* 会议开始时间 */}\n          <div style={{ display: \"flex\", flexDirection: 'row', marginTop: 20 }}>\n            <div style={{ width: 220, height: 32, marginRight: 30, display: \"flex\", alignItems: \"center\", justifyContent: 'flex-end' }}>\n              <span style={{ color: \"red\", marginRight: 4 }}>*</span>\n              <span style={{ fontSize: 16 }}>开始时间</span>\n            </div>\n            <Space direction=\"vertical\" size={12} style={{ display: \"flex\", flexDirection: \"row\" }}>\n              <DatePicker\n                style={{ marginRight: 20 }}\n                allowClear={false}\n                disabledDate={\n                  (current) => current && current < moment().subtract(1, \"days\") || current > moment().add(1, 'days')\n                }\n                onChange={this.startDateOnChange}\n                value={moment(this.state.start_date, 'YYYY-MM-DD')} />\n              <TimePicker\n                format={'HH:mm'}\n                allowClear={false}\n                minuteStep={15}\n                value={moment(this.state.start_time, \"HH:mm\")}\n                onChange={this.startTimeOnChange}\n              />\n            </Space>\n          </div>\n          {/* 会议结束时间 */}\n          <div style={{ display: \"flex\", flexDirection: 'row', marginTop: 20 }}>\n            <div style={{ width: 220, height: 32, marginRight: 30, display: \"flex\", alignItems: \"center\", justifyContent: 'flex-end' }}>\n              <span style={{ color: \"red\", marginRight: 4 }}>*</span>\n              <span style={{ fontSize: 16 }}>结束时间</span>\n            </div>\n            <Space direction=\"vertical\" size={12} style={{ display: \"flex\", flexDirection: \"row\" }}>\n              <DatePicker\n                style={{ marginRight: 20 }}\n                allowClear={false}\n                disabledDate={\n                  (current) => (current && current < moment(this.state.start_date).subtract(0, \"days\") || current > moment(this.state.start_date).add(1, 'day'))\n                }\n                onChange={this.endDateOnChange}\n                value={moment(this.state.end_date, 'YYYY-MM-DD')} />\n              <TimePicker\n                format={'HH:mm'}\n                allowClear={false}\n                minuteStep={15}\n                value={moment(this.state.end_time, \"HH:mm\")}\n                onChange={this.endTimeOnChange}\n              />\n            </Space>\n          </div>\n          {/* 研讨会密码 */}\n          <div style={{ display: \"flex\", flexDirection: 'row', marginTop: 20, alignItems: \"center\" }}>\n            <div style={{ width: 220, height: 32, marginRight: 30, display: \"flex\", alignItems: \"center\", justifyContent: 'flex-end' }}>\n              <span style={{ fontSize: 16 }}>研讨会密码</span>\n            </div>\n            <Checkbox onChange={this.pawHave} style={{ fontSize: 14 }} checked={this.state.is_password}>设置密码</Checkbox>\n            {this.state.is_password && this.state.is_password ? (<Input.Password style={{ width: 273 }} allowClear={true} placeholder={\"请输入4位数字密码\"} value={this.state.passwordValue} onChange={this.passwordChange} className={\"pwdInput\"} />) : null}\n            {/* {this.state.ispawV?(<div style={{height:32,lineHeight:\"32px\",color:\"red\",marginLeft:10}}>{this.state.ispawV}</div>):null} */}\n          </div>\n          {/* 研讨会权限 */}\n          <div style={{ display: \"flex\", flexDirection: 'row', marginTop: 20, alignItems: \"center\" }}>\n            <div style={{ width: 220, height: 32, marginRight: 30, display: \"flex\", alignItems: \"center\", justifyContent: 'flex-end' }}>\n              <span style={{ fontSize: 16 }}>视频</span>\n            </div>\n            <div>\n              <div>\n                <span style={{ marginRight: 30 }}>主持人</span>\n                <Radio.Group onChange={this.videoMasterChange} value={this.state.video_master}>\n                  <Radio value={\"1\"}>开</Radio>\n                  <Radio value={\"0\"}>关</Radio>\n                </Radio.Group>\n              </div>\n              <div style={{ marginTop: 10 }}>\n                <span style={{ marginRight: 44 }}>嘉宾</span>\n                <Radio.Group onChange={this.videoHonourChange} value={this.state.video_honour}>\n                  <Radio value={\"1\"}>开</Radio>\n                  <Radio value={\"0\"}>关</Radio>\n                </Radio.Group>\n              </div>\n            </div>\n          </div>\n          {/* 确认和取消 */}\n          <div style={{ width: \"100%\", display: \"flex\", justifyContent: \"center\", marginTop: 35, paddingBottom: 30 }}>\n            <div style={{ width: \"88px\", height: \"30px\", background: \"#ffffff\", border: \"1px solid #dcdfe6\", borderRadius: \"3px\", fontSize: \"16px\", lineHeight: \"30px\", textAlign: \"center\", marginRight: 20, cursor: \"pointer\" }}\n              onClick={this.cancelReserved}>取消</div>\n            {this.props.id ? (\n              <div style={{ width: \"88px\", height: \"30px\", background: \"#5584ff\", border: \"1px solid rgba(0,0,0,0)\", borderRadius: \"3px\", fontSize: \"16px\", color: \"#ffffff\", lineHeight: \"30px\", textAlign: \"center\", marginLeft: 20, cursor: \"pointer\" }}\n                onClick={this.reservedSeminar(\"save\")}\n                disabled={this.state.disable}\n              >保存</div>) : (\n                <div style={{ width: \"88px\", height: \"30px\", background: \"#5584ff\", border: \"1px solid rgba(0,0,0,0)\", borderRadius: \"3px\", fontSize: \"16px\", color: \"#ffffff\", lineHeight: \"30px\", textAlign: \"center\", marginLeft: 20, cursor: \"pointer\" }}\n                  onClick={this.reservedSeminar(\"reserved\")}\n                >预约</div>\n              )}\n          </div>\n        </div>\n      </PageHeaderWrapper>\n\n    );\n  }\n}\nexport default connect(({ user }) => ({\n  // currentUser: user.currentUser,\n}))(SeminarEdit);","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/seminar/mySeminar/components/SeminarList.js",["1340","1341"],"import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { PageHeaderWrapper } from '@ant-design/pro-layout';\nimport { Tabs, Button, message } from 'antd';\nimport HistorySeminar from './HistorySeminar.js';\nimport UpcomingSeminar from './UpcomingSeminar.js';\nimport actionSeminar from '@actions/seminar/actionSeminar.js'\nimport BaseCmp from '@components/BaseCmp.js'\nconst { TabPane } = Tabs;\n\nclass SeminarList extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.state = {\n            type: 1,\n            willlistLen: 0,\n            comlistLen: 0,\n            page: 1,\n            data: \"\",\n            willSeminarList: [],\n            comSeminarList: []\n        }\n    }\n    getSeminarList(type, page, num = 0) {\n\n        // let url='/v1/meeting/lists'\n        let url = '/api/v1/seminar/lists'\n        let param = {\n            type: type.toString(),\n            page: page.toString(),\n            pageSize: \"20\"\n        }\n        if (num) message.loading({ content: '正在刷新...', key: \"renovate\" })\n        actionSeminar.getSeminarList(param).then(res => {\n            console.log('获取研讨会列表成功--res：', res)\n            if (res.code === 200) {\n                let types = type + \"\"\n                if (types === '1') {\n                    this.setState({\n                        willSeminarList: res.data.list,\n                        willlistLen: res.data.count\n                    })\n                } else if (types === '2') {\n                    this.setState({\n                        comSeminarList: res.data.list,\n                        comlistLen: res.data.count\n                    })\n                }\n            } else {\n                this.showToast(res.msg)\n            }\n        })\n    }\n\n    paginationAction = (page) => {\n        this.setState({\n            page,\n        })\n        this.getSeminarList(this.state.type, page)\n    }\n\n    componentWillMount() {\n        this.getSeminarList(this.state.type, 1)\n    }\n\n    componentDidMount() {\n        this.timer = setInterval(() => {\n            console.log(this.state.type, this.state.page);\n            this.getSeminarList(this.state.type, this.state.page)\n        }, 1000 * 60);\n    }\n\n    componentWillUnmount() {\n        if (this.timer != null) {\n            clearInterval(this.timer);\n        }\n    }\n\n    render() {\n        return (\n            <PageHeaderWrapper\n                title={'网络研讨会'}\n            >\n                <div >\n                    <div\n                        className=\"my-container\"\n                        style={{\n                            width: '100%',\n                            // height:406,\n                            position: 'relative',\n                            backgroundColor: '#ffffff',\n                        }}\n                    >\n                        <div\n                            style={{\n                                position: 'absolute',\n                                zIndex: 1,\n                                right: 20,\n                                top: 8,\n                            }}\n                        >\n                            <Button\n                                style={{\n                                    marginLeft: 12,\n                                    marginRight: 12,\n                                }}\n                                onClick={() => {\n                                    this.getSeminarList(this.state.type, this.state.page, 1)\n                                }}\n                            >\n                                刷新\n            </Button>\n                            <Button\n                                type=\"primary\"\n                                onClick={() => {\n                                    // this.props.history.push({ pathname: '/meeting/seminar/reservedseminar/0000' })\n                                    this.props.changePage('edit')\n                                }}>\n                                预约网络研讨会</Button>\n                        </div>\n                        <Tabs\n                            onChange={tab => {\n                                this.setState(\n                                    {\n                                        type: Number(tab),\n                                        page: 1\n                                    }\n                                )\n                                this.getSeminarList(tab, 1)\n                            }}\n                            style={{\n                                minHeight: 300,\n                                marginLeft: 20,\n                            }}\n                        >\n                            <TabPane tab=\"即将召开的网络研讨会\" key={1}>\n                                <UpcomingSeminar\n                                    ref=\"willconveneSeminar\"\n                                    // push={this.props.history.push}\n                                    changePage={this.props.changePage}\n                                    paginationAction={this.paginationAction}\n                                    state={this.state}\n                                    cancelHandler={this.cancelHandler}\n                                    getSeminarList={this.getSeminarList.bind(this)}\n                                />\n                            </TabPane>\n                            <TabPane tab=\"已结束的网络研讨会\" key={2}>\n                                <HistorySeminar\n                                    ref=\"completeSeminar\"\n                                    state={this.state}\n                                    // push={this.props.history.push}\n                                    changePage={this.props.changePage}\n                                    paginationAction={this.paginationAction}\n                                    cancelHandler={this.cancelHandler}\n                                    getSeminarList={this.getSeminarList.bind(this)}\n                                />\n                            </TabPane>\n                        </Tabs>\n\n                    </div>\n                </div>\n\n            </PageHeaderWrapper>\n        );\n    }\n}\n\nexport default connect((store, props) => {\n    return {\n        ...props,\n    }\n})(SeminarList);","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/seminar/mySeminar/components/SeminarDetail.js",["1342","1343","1344","1345","1346","1347","1348","1349","1350","1351"],"import React, { Component } from 'react'\nimport { Modal, Button, Input, message, Alert } from \"antd\"\nimport { PageHeaderWrapper } from '@ant-design/pro-layout';\nimport actionSeminar from '@actions/seminar/actionSeminar.js'\nimport BaseCmp from '@components/BaseCmp.js'\n// import { black } from 'chalk';\n// import add_1 from \"../../../../assets/add_1.svg\"\nimport CancelSeminar from \"./CancelSeminar\"\nimport { connect } from 'react-redux';\n// import { pullUpHost } from '../../../../env'\n\nclass SeminarDetail extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.state = {\n            invitedHonourShow: 0,\n            invitedViewerShow: 0,\n            invitedViewerValue: \"\",\n            detailInfo: {},\n            list: [],\n            listCopy: [],\n            preserveDisable: 0,\n            cancelShow: 0,\n            deleteShow: 0,\n            endShow: 0,\n            data: {\n                type: null,\n                title: null,\n                text: null,\n                btn: null\n            },\n            honourDiv: [{\n                key: 0,\n                isfalse: 0,\n                isNull: 0,\n                username: \"\",\n                value: \"\"\n            }],\n\n        }\n    }\n\n    getDetailInfo = () => {\n        let param = {\n            meeting_id: this.props.seminarid + \"\"\n        }\n        actionSeminar.seminarDetail().then(res => {\n            console.log('获取研讨会详情---res:', res)\n            if (res.code === 200) {\n                let clist = res.data.list\n                clist.forEach((v, i) => {\n                    v.resend = 1\n                })\n                this.setState({\n                    detailInfo: res.data.info,\n                    list: clist,\n                    listCopy: clist\n                }, () => { console.log(this.state.list) })\n            } else {\n                this.showToast(res.msg)\n            }\n        })\n    }\n\n    //打开邀请嘉宾\n    invitedHonour = () => {\n        this.setState({\n            invitedHonourShow: 1,\n            list: this.state.listCopy\n        })\n    }\n\n    //关闭对话框\n    closeHandler = () => {\n        let clist = [...this.state.list]\n        clist.forEach((v, i) => {\n            v.resend = 1\n        })\n        this.setState({\n            invitedHonourShow: 0,\n            list: clist,\n            honourDiv: [{\n                key: 0,\n                isfalse: 0,\n                username: \"\",\n                value: \"\"\n            }]\n        })\n    }\n    closeHandlerV = () => {\n        this.setState({\n            invitedViewerShow: 0\n        })\n    }\n    closeHandlerT = () => {\n        this.setState({\n            cancelShow: 0,\n            deleteShow: 0,\n            endShow: 0,\n            data: {\n                type: null,\n                title: null,\n                text: null,\n                btn: null\n            },\n        })\n    }\n\n    //会话框内添加嘉宾\n    addHonour = () => {\n        let donourD = [...this.state.honourDiv, {\n            key: this.state.honourDiv.length,\n            username: \"\",\n            value: \"\"\n        }]\n        this.setState({\n            honourDiv: donourD\n        }, () => {\n            let inviteHonou = document.querySelector(\".inviteHonou\")\n            inviteHonou.scrollTop = inviteHonou.scrollHeight\n        })\n    }\n\n    //删除对话框内嘉宾\n    deleteHonourDiv = (i) => {\n        return () => {\n            let honourD = [...this.state.honourDiv]\n            honourD.splice(i, 1)\n            this.setState({\n                honourDiv: honourD\n            })\n        }\n    }\n\n    //输入框输入改变时\n    inputChange = (key) => {\n        return (e) => {\n            if (e.target.id === 'name' && e.target.value.length > 12) return\n            let hD = [...this.state.honourDiv]\n            hD.forEach((v, i) => {\n                if (v.key === key) {\n                    if (e.target.id === \"name\") {\n                        v.username = e.target.value\n                    } else {\n                        v.value = e.target.value\n                    }\n                }\n                return\n            })\n            this.setState({\n                honourDiv: hD\n            })\n        }\n    }\n\n    //输入框获取焦焦点\n    inputOnFocus = (key) => {\n        return (e) => {\n            let hD = [...this.state.honourDiv]\n            if (e.target.id === \"name\") {\n                hD.forEach((v, i) => {\n                    if (v.key === key) {\n                        v.isNull = 0\n                    }\n                })\n                this.setState({\n                    honourDiv: hD\n                })\n                return\n            } else {\n                hD.forEach((v, i) => {\n                    if (v.key === key) {\n                        v.isfalse = 0\n                    }\n                })\n                this.setState({\n                    honourDiv: hD\n                })\n                return\n            }\n        }\n    }\n\n\n    //输入框失去焦点\n    inputOnBlur = (key) => {\n        return (e) => {\n            console.log(e.target.value);\n            if (e.target.id === \"value\") {\n                let emaliReg = /^([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+\\.[a-zA-Z]{2,5}$/\n                let phoneReg = /^1\\d{10}$/\n                let isTrue = emaliReg.test(e.target.value.replace(/(^\\s*)|(\\s*$)/g, '')) || phoneReg.test(e.target.value.replace(/(^\\s*)|(\\s*$)/g, ''))\n                let hD = [...this.state.honourDiv]\n                if (!isTrue) {\n                    hD.forEach((v1, i1) => {\n                        if (v1.key === key) {\n                            v1.isfalse = 1\n                            v1.value = e.target.value.replace(/(^\\s*)|(\\s*$)/g, '')\n                        }\n                    })\n                    this.setState({\n                        honourDiv: hD\n                    })\n                    return\n                }\n            }\n            let hD = [...this.state.honourDiv]\n            hD.forEach((v, i) => {\n                if (v.key === key) {\n                    if (e.target.id === \"name\") {\n                        v.username = e.target.value.replace(/(^\\s*)|(\\s*$)/g, '')\n                    } else {\n                        v.value = e.target.value.replace(/(^\\s*)|(\\s*$)/g, '')\n                    }\n                }\n                return\n            })\n            this.setState({\n                honourDiv: hD\n            })\n        }\n    }\n\n    //重新发送邀请\n    resendPreserve = (v, i) => {\n        return () => {\n            if (!v.resend) return\n            // let url = \"/api/v1/seminar/sendMessage\"\n            let param = {\n                meeting_id: this.props.seminarid + \"\",\n                username: v.username,\n                value: v.value\n            }\n            actionSeminar.seminarSend(param).then(res => {\n                console.log('重新发送邀请--res:', res)\n                if (res.code === 200) {\n                    let clist = [...this.state.list]\n                    clist[i].resend = 0\n                    this.setState({\n                        list: clist\n                    })\n                } else {\n                    this.showToast(res.msg)\n                }\n            })\n        }\n    }\n\n    //获取星期\n    getWeek = (dateString) => {\n        let dateArray = dateString.split(\"-\");\n        let date = new Date(dateArray[0], parseInt(dateArray[1] - 1), dateArray[2]);\n        return \"周\" + \"日一二三四五六\".charAt(date.getDay());\n    };\n    //获取复制信息\n    getCopyMessage = (type, value) => {\n        let { title, start_date, start_time, end_date, end_time, room_id, password } = this.state.detailInfo\n        let vivewUrl = \"\"\n        this.state.list.forEach((v, i) => {\n            if (v.username === \"游客\") return vivewUrl = v.url\n        })\n        let sDate = start_date.split(\"-\").join(\".\")\n        let eDate = end_date.split(\"-\").join(\".\")\n        let sWeek = this.getWeek(start_date)\n        let eWeek = this.getWeek(end_date)\n        let sTime = start_time.substring(0, 5)\n        let eTime = end_time.substring(0, 5)\n        let time\n        if (start_date === end_date) {\n            time = sDate + \" \" + sWeek + \" \" + sTime + \"~\" + eTime\n        } else {\n            time = sDate + \" \" + sWeek + \" \" + sTime + \" ~ \" + eDate + \" \" + eWeek + \" \" + eTime\n        }\n        let nickName = \"XXX\"\n        // let nickName = this.props.currentUser.name ? this.props.currentUser.name : \"XXX\"\n        let Url2 = \"\"\n        if (type === \"honour\") {\n            Url2 = value.username + \" 您好！\" +\n                \"\\n\" +\n                '\\n您收到了参加Boom网络研讨会的邀请' +\n                '\\n会议主题：' + title +\n                '\\n会议时间：' + time +\n                '\\n\\n通过Windows、Mac、iPhone或者Android设备加入：' +\n                '\\n点击链接，加入网络研讨会' +\n                '\\n' + value.url +\n                '\\n注意：这是您的专属链接，不得与其他人分享。' +\n                '\\n\\n网络研讨会ID：' + room_id +\n                '\\n密码：' + (password ? password : \"无\")\n        } else {\n            Url2 = nickName + \" 邀请您参加Boom网络研讨会\" +\n                '\\n会议主题：' + title +\n                '\\n会议时间：' + time +\n                '\\n\\n点击链接，加入网络研讨会' +\n                '\\n' + vivewUrl +\n                '\\n\\n网络研讨会ID：' + room_id +\n                '\\n密码：' + (password ? password : \"无\")\n        }\n\n        return Url2\n    }\n    //复制嘉宾邀请\n    copyHonourDiv = (v) => {\n        return () => {\n            let Url2 = this.getCopyMessage(\"honour\", v)\n            let oInput = document.createElement('textarea');\n            oInput.value = Url2;\n            document.body.appendChild(oInput);\n            oInput.select(); // 选择对象\n            document.execCommand('Copy')\n            oInput.className = 'oInput';\n            oInput.style.display = 'none';\n            message.destroy();\n            message.success('复制成功')\n        }\n    }\n\n    //删除已发送信息的嘉宾\n    deleteHonourList = (i) => {\n        return () => {\n            let clist = [...this.state.list]\n            clist.splice(i, 1)\n            this.setState({\n                list: clist\n            })\n        }\n    }\n\n    //邀请观众\n    invitedViewer = () => {\n        let message = this.getCopyMessage(\"vivew\")\n        this.setState({\n            invitedViewerShow: 1,\n            invitedViewerValue: message\n        })\n    }\n\n    //复制观众邀请\n    copyViewerDiv = () => {\n        let oInput = document.createElement('textarea');\n        oInput.value = this.state.invitedViewerValue\n        document.body.appendChild(oInput);\n        oInput.select(); // 选择对象\n        document.execCommand('Copy')\n        oInput.className = 'oInput';\n        oInput.style.display = 'none';\n        message.destroy();\n        this.closeHandlerV()\n        message.success('复制成功')\n    }\n\n    //开始、加入会议\n    seminarStart = (record) => {\n        return (e) => {\n            console.log(record);\n            e.stopPropagation()\n            let hushKey = record.split(\"?\")[1]\n            // let url = pullUpHost + \"?\" + hushKey\n            // window.open(url)\n        }\n    }\n\n    //打开取消、结束、删除研讨会对话框\n    clickHandler = (id) => {\n        return (e) => {\n            e.stopPropagation()\n            console.log(e.target.innerText);\n            switch (e.target.innerText) {\n                case \"取消研讨会\":\n                    this.setState({\n                        cancelShow: id,\n                        data: {\n                            type: \"cancel\",\n                            title: \"取消会议\",\n                            text: \"您是会议的创建者，取消后其他成员将无法入会。\",\n                            btn: \"我再想想\"\n                        }\n                    })\n                    break;\n                case \"结束研讨会\":\n                    this.setState({\n                        endShow: id,\n                        data: {\n                            type: \"end\",\n                            title: \"结束会议\",\n                            text: \"您是否确定结束此网络研讨会？\",\n                            btn: \"取消\"\n                        }\n                    })\n                    break;\n                case \"删除\":\n                    this.setState({\n                        deleteShow: id,\n                        data: {\n                            type: \"delete\",\n                            title: \"删除会议\",\n                            text: \"您是会议的创建者，删除后其他成员将无法入会。\",\n                            btn: \"取消\"\n                        }\n                    })\n                    break;\n                default: break;\n            }\n        }\n    }\n\n    //编辑会议\n    seminarEdit = (id) => {\n        return (e) => {\n            console.log(id);\n            e.stopPropagation()\n            // this.props.history.push({ pathname: '/meeting/seminar/reservedseminar/' + record })\n            this.props.changePage('edit', { seminarid: id })\n        }\n    }\n\n    //footer\n    footDiv = (joinUrl) => {\n        if (this.state.detailInfo.status === 0) {\n            return (\n                <div style={{ width: \"100%\", height: 32, display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", marginTop: 40 }}>\n                    <div\n                        onClick={this.clickHandler(this.props.id)}\n                        style={{ width: 120, height: 30, color: \"#333333\", border: \"1px solid #dcdfe6\", borderRadius: 4, display: \"flex\", alignItems: \"center\", justifyContent: \"center\", cursor: \"pointer\" }}>取消研讨会</div>\n                    <div\n                        onClick={this.seminarEdit(this.props.id)}\n                        style={{ width: 120, height: 30, color: \"#333333\", marginLeft: 40, marginRight: 40, border: \"1px solid #dcdfe6\", borderRadius: 4, display: \"flex\", alignItems: \"center\", justifyContent: \"center\", cursor: \"pointer\" }}>编辑研讨会</div>\n                    <div\n                        onClick={this.seminarStart(joinUrl)}\n                        style={{ width: 120, height: 30, color: \"#ffffff\", backgroundColor: \"#5584ff\", border: \"none\", borderRadius: 4, display: \"flex\", alignItems: \"center\", justifyContent: \"center\", cursor: \"pointer\" }}>开始研讨会</div>\n                </div>\n            )\n        } else if (this.state.detailInfo.status === 1) {\n            return (\n                <div style={{ width: \"100%\", height: 32, display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", marginTop: 40 }}>\n                    <div\n                        onClick={this.clickHandler(this.props.seminarid + \"\")}\n                        style={{ width: 120, height: 30, color: \"#333333\", border: \"1px solid #dcdfe6\", borderRadius: 4, display: \"flex\", alignItems: \"center\", justifyContent: \"center\", cursor: \"pointer\" }}>结束研讨会</div>\n                    <div\n                        onClick={this.seminarStart(joinUrl)}\n                        style={{ width: 120, height: 30, marginLeft: 40, color: \"#ffffff\", backgroundColor: \"#5584ff\", border: \"none\", borderRadius: 4, display: \"flex\", alignItems: \"center\", justifyContent: \"center\", cursor: \"pointer\" }}>立即加入</div>\n                </div>\n            )\n        } else {\n            return (\n                <div style={{ width: \"100%\", height: 32, display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", marginTop: 40 }}>\n                    <div\n                        onClick={this.clickHandler(this.props.seminarid + \"\")}\n                        style={{ width: 88, height: 30, color: \"#333333\", border: \"1px solid #dcdfe6\", borderRadius: 4, display: \"flex\", alignItems: \"center\", justifyContent: \"center\", cursor: \"pointer\" }}>删除</div>\n                    <div\n                        onClick={() => {\n                            // this.props.history.push(\"/meeting/seminar\")\n                            this.props.changePage('list')\n                        }}\n                        style={{ width: 88, height: 30, marginLeft: 40, color: \"#ffffff\", backgroundColor: \"#5584ff\", border: \"none\", borderRadius: 4, display: \"flex\", alignItems: \"center\", justifyContent: \"center\", cursor: \"pointer\" }}>返回</div>\n                </div>\n            )\n        }\n    }\n\n    //保存嘉宾\n    preserveHonour = () => {\n        this.setState({\n            preserveDisable: 1\n        })\n        let honourDivs = [...this.state.honourDiv]\n        let hList = this.state.list.filter((v3, i3) => { return v3.is_master !== 1 && v3.is_guest !== 1 })\n        let error = 0\n        let honourDiv = honourDivs.filter((v, i) => {\n            return (!(!v.isfalse && v.username.replace(/(^\\s*)|(\\s*$)/g, '') === \"\" && v.value.replace(/(^\\s*)|(\\s*$)/g, '') === \"\"))\n        })\n\n        honourDiv.forEach((v, i) => {\n            let newName = v.username.replace(/(^\\s*)|(\\s*$)/g, '')\n            let newValue = v.value.replace(/(^\\s*)|(\\s*$)/g, '')\n            if (!v.isfalse) {\n                if (newName === \"\" && newValue === \"\") return error = 0\n                if (newName === \"\" || newValue === \"\") {\n                    error = 1\n                    if (newName === \"\") v.isNull = 1\n                    if (newValue === \"\") v.isfalse = 1\n                    return\n                }\n            }\n            if (v.isfalse) return error = 2\n        })\n        if (error === 1) {\n            message.error(\"您有必填项未填写\")\n            let nameInput = document.querySelectorAll(\"#name\")\n            let nameInputNulls = Array.from(nameInput).filter((vn) => {\n                return !vn.value\n            })\n\n            if (nameInputNulls.length > 0) nameInputNulls[0].focus()\n            this.setState({\n                preserveDisable: 0,\n                honourDiv\n            })\n            return\n        }\n        if (error === 2) {\n            this.setState({\n                preserveDisable: 0\n            })\n            return\n        }\n        let preserveList = []\n        hList.forEach((vh) => {\n            let preObj = {\n                username: vh.username.replace(/(^\\s*)|(\\s*$)/g, ''),\n                value: vh.value.replace(/(^\\s*)|(\\s*$)/g, '')\n            }\n            preserveList.push(preObj)\n        })\n        honourDiv.forEach((vd) => {\n            let preseObj = {\n                username: vd.username.replace(/(^\\s*)|(\\s*$)/g, ''),\n                value: vd.value.replace(/(^\\s*)|(\\s*$)/g, '')\n            }\n            preserveList.push(preseObj)\n        })\n        let preserveJson = JSON.stringify(preserveList)\n        //调用接口，保存嘉宾\n        let param = {\n            meeting_id: this.props.seminarid + \"\",\n            list: preserveJson\n        }\n        let url = \"/api/v1/seminar/preserve\"\n        message.loading({ content: '正在保存...', key: \"preserve\" })\n        message.destroy();\n        actionSeminar.seminarInvite().then(res => {\n            console.log('保存研讨会邀请嘉宾列表--res:', res)\n            if (res.code === 200) {\n                this.setState({\n                    preserveDisable: 0\n                })\n                this.getDetailInfo()\n                this.closeHandler()\n            } else {\n                this.showToast(res.msg)\n                this.setState({\n                    preserveDisable: 0\n                })\n            }\n        })\n    }\n\n    componentWillMount() {\n        this.getDetailInfo()\n    }\n    render() {\n        if (!this.state.list.length > 0) return (<div></div>)\n        let joinUrl = ''\n        let honourDiv = this.state.honourDiv;\n        let { title, start_date, start_time, end_date, end_time, room_id, is_password, password, video_master, video_honour, status } = this.state.detailInfo\n        let newStartTime = start_time && (start_time.split(':')[0] + ':' + start_time.split(':')[1])\n        let newEndTime = end_time && (end_time.split(':')[0] + ':' + end_time.split(':')[1])\n        let honourList = this.state.list.filter((v1, i1) => { return v1.is_master !== 1 && v1.is_guest !== 1 })\n        let audience = ''\n        if (this.state.list.length > 0) {\n            this.state.list.forEach(i => {\n                if (i.is_guest) {\n                    audience = i.url\n                }\n                if (i.is_master) {\n                    joinUrl = i.url\n                }\n            })\n        }\n        return (\n            <PageHeaderWrapper title={'网络研讨会详情'}>\n                <div\n                    className=\"my-container\"\n                    style={{\n                        width: '100%',\n                        position: \"relative\",\n                        paddingTop: 20,\n                        paddingBottom: 30,\n                        backgroundColor: '#ffffff',\n                    }}>\n                    {status === 2 ? null : (\n                        <Button\n                            onClick={this.seminarStart(joinUrl)}\n                            style={{ width: 120, height: 30, color: \"#ffffff\", backgroundColor: \"#5584ff\", border: \"none\", position: \"absolute\", top: 20, right: 20 }}>{status ? \"加入研讨会\" : \"开始研讨会\"}</Button>\n                    )}\n\n                    <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                        <div style={{ width: 162, height: 20, marginRight: 20, textAlign: \"right\" }}>会议主题</div>\n                        <div style={{ width: 700, minHeight: 20, }}>{title}</div>\n                    </div>\n                    <div style={{ display: \"flex\", flexDirection: \"row\", marginTop: 20 }}>\n                        <div style={{ width: 162, height: 20, marginRight: 20, textAlign: \"right\" }}>开始时间</div>\n                        <div style={{ width: 700, minHeight: 20, }}>{start_date + \" \" + newStartTime}</div>\n                    </div>\n                    <div style={{ display: \"flex\", flexDirection: \"row\", marginTop: 20 }}>\n                        <div style={{ width: 162, height: 20, marginRight: 20, textAlign: \"right\" }}>结束时间</div>\n                        <div style={{ width: 700, minHeight: 20, }}>{end_date + \" \" + newEndTime}</div>\n                    </div>\n                    <div style={{ display: \"flex\", flexDirection: \"row\", marginTop: 20 }}>\n                        <div style={{ width: 162, height: 20, marginRight: 20, textAlign: \"right\" }}>网络研讨会ID</div>\n                        <div style={{ width: 700, minHeight: 20, }}>{room_id}</div>\n                    </div>\n                    <div style={{ display: \"flex\", flexDirection: \"row\", marginTop: 20 }}>\n                        <div style={{ width: 162, height: 20, marginRight: 20, textAlign: \"right\" }}>研讨会密码</div>\n                        <div style={{ width: 700, minHeight: 20, }}>{is_password ? null : \"无\"}{password}</div>\n                    </div>\n                    <div style={{ display: \"flex\", flexDirection: \"row\", marginTop: 20 }}>\n                        <div style={{ width: 162, height: 20, marginRight: 20, textAlign: \"right\" }}>视频</div>\n                        <div >\n                            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                                <div style={{ width: 50, marginRight: 30 }}>主持人</div>\n                                <div>{video_master ? \"开\" : \"关\"}</div>\n                            </div>\n                            <div style={{ display: \"flex\", flexDirection: \"row\", marginTop: 10 }}>\n                                <div style={{ width: 50, marginRight: 30 }}>嘉宾</div>\n                                <div>{video_honour ? \"开\" : \"关\"}</div>\n                            </div>\n                        </div>\n                    </div>\n                    <div style={{ width: 740, marginLeft: 80, marginTop: 20, borderTop: \"1px dashed #dcdfe6\" }}></div>\n                    <div style={{ width: 810, display: \"flex\", flexDirection: \"row\", marginTop: 20, position: \"relative\" }}>\n                        <div style={{ width: 162, height: 20, marginRight: 20, textAlign: \"right\" }}>邀请嘉宾</div>\n                        <div style={{ width: 550, minHeight: 20 }}>\n                            {!honourList.length ? (<span style={{ color: \"#999999\" }}>未邀请嘉宾</span>) : (\n                                honourList.map((v, i) => {\n                                    // display: black, \n                                    return (\n                                        <span style={{ float: \"left\" }}>{v.username}（{v.value}）,</span>\n                                    )\n                                })\n                            )}\n                        </div>\n                        {status === 2 ? null : (\n                            <div\n                                style={{ position: 'absolute', top: 0, right: 0, color: \"#216BFF\", cursor: \"pointer\" }}\n                                onClick={this.invitedHonour}>邀请</div>\n                        )}\n\n                    </div>\n                    <div style={{ display: \"flex\", flexDirection: \"row\", marginTop: 20, width: 810, position: \"relative\" }}>\n                        <div style={{ width: 162, height: 20, marginRight: 20, textAlign: \"right\" }}>邀请观众</div>\n                        <div style={{ width: 550, minHeight: 20, }}>\n                            <div>网络研讨会规模： 100人</div>\n                            <div>加入网络研讨会的链接：{audience}</div>\n                        </div>\n                        {status === 2 ? null : (\n                            <div\n                                onClick={this.invitedViewer}\n                                style={{ position: \"absolute\", top: 0, right: 0, color: \"#216BFF\", cursor: \"pointer\" }}>邀请观众</div>\n                        )}\n                    </div>\n                    {this.footDiv(joinUrl)}\n                </div>\n                <Modal\n                    title=\"邀请嘉宾\"\n                    width={800}\n                    visible={this.state.invitedHonourShow}\n                    onCancel={this.closeHandler}\n                    footer={<div>\n                        <Button\n                            onClick={this.closeHandler}\n                            style={{ width: 80, height: 40, border: \"1px solid #dcdfe6\", borderRadius: 4, color: \"#666666\", marginRight: 20 }}\n                        >\n                            取消\n                        </Button>\n                        <Button\n                            onClick={this.preserveHonour}\n                            disabled={this.state.preserveDisable}\n                            style={{ width: 80, height: 40, backgroundColor: \"#4d88fe\", border: \"none\", borderRadius: 4, color: \"#fff\", marginRight: 40, marginLeft: 20 }}\n                        >\n                            保存\n                        </Button>\n                    </div>}\n                >\n                    <div className={\"inviteHonou\"} style={{ width: \"100%\", height: 400, overflowY: \"auto\", overflowX: \"hidden\" }}>\n                        <div style={{ color: \"#000000\", fontWeight: 500, marginLeft: 20, marginRight: 20 }}>\n                            邀请成员作为网络研讨会的嘉宾\n                            </div>\n                        <div style={{ width: \"100%\", marginLeft: 20 }}>\n                            <div style={{ width: \"100%\", height: 40, marginTop: 10, display: \"flex\", flexDirection: \"row\", alignItems: \"center\", borderBottom: \"1px solid #dcdfe6\", color: \"#333333\" }}>\n                                <div style={{ width: 200 }}>名称</div>\n                                <div>手机号/邮箱</div>\n                            </div>\n                        </div>\n                        <div className=\"addHonouDiv\" style={{ width: \"100%\", marginLeft: 20 }}>\n                            {honourList.map((vl, il) => {\n                                return (\n                                    <div style={{ width: \"100%\", height: 50, display: \"flex\", flexDirection: \"row\", alignItems: \"center\", borderBottom: \"1px solid #dcdfe6\", color: \"#333333\", position: \"relative\" }}>\n                                        <div style={{ width: 200 }}>\n                                            {vl.username}\n                                        </div>\n                                        <div>\n                                            {vl.value}\n                                        </div>\n                                        <div style={{ display: \"flex\", flexDirection: \"row\", position: \"absolute\", right: 25 }}>\n                                            <div\n                                                onClick={this.resendPreserve(vl, il)}\n                                                style={{ width: 60, height: 30, border: \"1px solid #dcdfe6\", borderRadius: 4, display: \"flex\", alignItems: \"center\", justifyContent: \"center\", color: \"#999999\", cursor: \"pointer\" }}>\n                                                {vl.resend ? \"重新发送\" : \"已发送\"}</div>\n                                            <div\n                                                onClick={this.copyHonourDiv(vl)}\n                                                style={{ width: 60, height: 30, border: \"1px solid #dcdfe6\", borderRadius: 4, display: \"flex\", alignItems: \"center\", justifyContent: \"center\", color: \"#999999\", cursor: \"pointer\", marginLeft: 20 }}>\n                                                复制</div>\n                                            <div\n                                                onClick={this.deleteHonourList(il)}\n                                                style={{ width: 60, height: 30, border: \"1px solid #dcdfe6\", borderRadius: 4, display: \"flex\", alignItems: \"center\", justifyContent: \"center\", color: \"#999999\", cursor: \"pointer\", marginLeft: 20 }}>\n                                                删除</div>\n                                        </div>\n                                    </div>\n                                )\n                            })}\n                            {honourDiv.map((v, i) => {\n                                return (\n                                    <div style={{ width: \"100%\", marginTop: 10, display: \"flex\", flexDirection: \"row\", borderBottom: \"1px solid #dcdfe6\", color: \"#333333\", position: \"relative\" }}>\n                                        <div style={{ width: 200, marginBottom: 10 }}>\n                                            <Input\n                                                id=\"name\"\n                                                autoComplete=\"off\"\n                                                value={v.username}\n                                                onFocus={this.inputOnFocus(i)}\n                                                onBlur={this.inputOnBlur(i)}\n                                                onChange={this.inputChange(i)}\n                                                placeholder={'名称'}\n                                                style={{ width: 160, border: v.isNull ? '1px solid red' : \"1px solid #d9d9d9\" }}></Input>\n                                            {v.isNull ? (<div style={{ marginTop: 5, color: \"#FF5656\" }}>此字段为必填字段</div>) : null}\n                                        </div>\n                                        <div style={{ marginBottom: 10 }}>\n                                            <Input\n                                                id=\"value\"\n                                                autoComplete=\"off\"\n                                                value={v.value}\n                                                style={{ width: 300, border: v.isfalse ? '1px solid red' : \"1px solid #d9d9d9\" }}\n                                                onChange={this.inputChange(i)}\n                                                onBlur={this.inputOnBlur(i)}\n                                                onFocus={this.inputOnFocus(i)}\n                                                placeholder={'请输入手机号或邮箱'}\n                                            ></Input>\n                                            {v.isfalse ? (<div style={{ marginTop: 5, color: \"#FF5656\" }}>请输入一个正确的手机号或邮箱</div>) : null}\n                                        </div>\n                                        <div\n                                            onClick={this.deleteHonourDiv(i)}\n                                            style={{ width: 60, height: 30, border: \"1px solid #dcdfe6\", borderRadius: 4, display: \"flex\", alignItems: \"center\", justifyContent: \"center\", color: \"#999999\", position: \"absolute\", right: 25, cursor: \"pointer\" }}>\n                                            删除</div>\n                                    </div>\n                                )\n                            })}\n                        </div>\n                        <div\n                            onClick={this.addHonour}\n                            style={{ width: 120, marginLeft: 20, marginTop: 15, display: \"flex\", flexDirection: \"row\", alignItems: \"center\", cursor: \"pointer\" }}>\n                            {/* <img src={add_1} alt=\"\" /> */}\n                            <span style={{ marginLeft: 8, fontSize: 14, fontWeight: 400, textAlign: \"center\", color: \"#4d88fe\" }}>添加一名嘉宾</span>\n                        </div>\n                    </div>\n                </Modal>\n                <Modal\n                    title=\"邀请观众\"\n                    width={800}\n                    visible={this.state.invitedViewerShow}\n                    onCancel={this.closeHandlerV}\n                    footer={\n                        <div style={{ width: \"100%\", height: 80, display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }}>\n                            <Button\n                                onClick={this.copyViewerDiv}\n                                style={{ width: 120, height: 40, background: \"#4d88fe\", borderRadius: 4, border: \"none\", color: \"#FFFFFF\" }}>\n                                复制邀请信息\n                            </Button>\n                        </div>\n                    }>\n                    <div style={{ whiteSpace: \"pre-wrap\", marginLeft: 80 }}>\n                        {this.state.invitedViewerValue}\n                    </div>\n                </Modal>\n                <CancelSeminar\n                    isShow={this.state.cancelShow || this.state.endShow || this.state.deleteShow}\n                    data={this.state.data}\n                    // history={this.props.history}\n                    closeHandler={this.closeHandlerT}>\n                </CancelSeminar>\n            </PageHeaderWrapper>\n        )\n    }\n}\n\nexport default connect(({ user }) => ({\n    // currentUser: user.currentUser,\n}))(SeminarDetail);\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/marketingTool/actionQuestionnaire.js",["1352","1353","1354"],"import { getData } from '@/libs/utils.js'\nimport store from '@/store/index.js'\nimport actionTypes from '@/store/actionTypes.js'\nimport interfaces from '@/api/interfaces.js'\nimport config from '@/config.js'\n\nconst actionQuestionnaire = {\n\n    // 根据链接获取二维码\n    getQRCode(data) {\n        return getData({\n            method: 'get',\n            url: interfaces.GET_QRCODE,\n            data\n        })\n    },\n    // 获取问卷列表\n    getQnaireList(data) {\n        return getData({\n            method: 'get',\n            url: interfaces.QNAIRE_LIST,\n            data\n        })\n    },\n    // 问卷创建\n    qnaireCreate(data) {\n        return getData({\n            method: 'post',\n            url: interfaces.QNAIRE_CREATE,\n            data\n        })\n    },\n    // 问卷编辑\n    qnaireEdit(data) {\n        return getData({\n            method: 'post',\n            url: interfaces.QNAIRE_EDIT,\n            data\n        })\n    },\n    // 问卷详情\n    getQnaireDetail(data) {\n        return getData({\n            method: 'get',\n            url: interfaces.QNAIRE_DETAIL,\n            data\n        })\n    },\n    // 问卷删除\n    qnaireDelete(data) {\n        return getData({\n            method: 'get',\n            url: interfaces.QNAIRE_DELETE,\n            data\n        })\n    },\n    // 问卷上下架\n    qnaireUpdateStatus(data) {\n        return getData({\n            method: 'get',\n            url: interfaces.QNAIRE_UPDATE_STATUS,\n            data\n        })\n    },\n    // 调查结果\n    getSurveyList(data) {\n        return getData({\n            method: 'get',\n            url: interfaces.QNAIRE_RESULT,\n            data\n        })\n    },\n    // 导出调查结果\n    surveyResultExport(data) {\n        return getData({\n            method: 'get',\n            url: interfaces.QNAIRE_EXPORT,\n            data,\n            responseType: 'blob'\n        })\n    }\n\n}\n\nexport default actionQuestionnaire\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/infoManage/InfoManage.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/infoManage/InfoClassify.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/phoneList/CmpPhoneImport.js",["1355","1356","1357","1358","1359","1360","1361","1362","1363","1364","1365","1366","1367"],"import BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport {\n    RLInput, RLButton, RLDisplayBoard, RLForm, RLFormItem, RLRadioGroup, RLModal, RLTable\n} from '@components/index.js'\nimport actionPhoneList from '@actions/userManage/actionPhoneList.js';\nimport commonAction from '@actions/commonActions';\nimport commonImgs from '@/libs/images';\nimport utils from '@/libs/utils.js'\nimport interfaces from '@/api/interfaces';\nimport { Upload } from 'antd'\n// import './importModal.less';\n\nclass CmpPhoneImport extends BaseCmp {\n    constructor(props) {\n        super(props)\n        \n        this.phonePage = props.phonePage;\n\n        this.state = {\n            showImportResultModal: false,\n            showImportingModal: false,\n            \n            selected: false,\n            uploadFile: null,\n            importResult: null\n        }\n\n        this.columns = [\n            {\n                title: 'Excel行号',\n                dataIndex: 'line',\n                key: 'line',\n                width:'20%'\n            },\n            {\n                title: '固话号码',\n                dataIndex: 'number',\n                key:'number',\n                width:'25%'\n            },\n            {\n                title: '机构全称',\n                dataIndex: 'company',\n                key: 'company',\n                width:'25%'\n            },\n            {\n                title: '失败原因',\n                dataIndex: 'error_msg',\n                key: 'error_msg',\n                width:'30%'\n            }]\n\n    }\n    componentWillMount() {\n        // this.getUserInfo()\n    }\n    pageTitle = () => {\n        return (\n            <div className=\"custom-page-title\">\n                <span>导入固话</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.changePage('list',{\n                            phonerPage: this.phonePage\n                        })\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <WindowContainer title={this.pageTitle}>\n                <div style={{ border: '1px solid #DCDFE6', width: '100%', height: 586, borderRadius: 9 }}>\n                    <div style={{ borderBottom: '1px solid #DCDFE6', height: 161, display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\n                        <div style={{ width: '84%' }}>\n                            <div>1. 下载导入模板</div>\n                        </div>\n                        <div style={{ width: '80%', marginTop: 20 }}>\n                            <div>根据提示信息完善表格内容</div>\n                        </div>\n                        <div style={{ width: '80%', marginTop: 20 }}>\n                            <div onClick={() => {\n                                actionPhoneList.downloadTemplate();\n                            }}\n                                style={{ display: 'flex', flexDirection: 'row', justifyContent: 'center', alignItems: 'center', border: '1px solid #DCDFE6', borderRadius: 4, width: 164, height: 36, cursor: 'pointer' }}>\n                                <img src={require('../../../../assets/images/download.png').default} style={{ width: 16, height: 16 }} />\n                                <span style={{ marginLeft: 5 }}>下载空的模板表格</span>\n                            </div>\n                        </div>\n                    </div>\n                    <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\n                        <div style={{ width: '84%', marginTop: 20 }}>\n                            <div>2. 上传完善后的表格</div>\n                        </div>\n                        <div style={{ width: '80%', marginTop: 20, border: '1px solid #DCDFE6', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', height: 191 }}>\n                            <img src={require('../../../../assets/images/xls.png').default} style={{ width: 40, height: 40 }} />\n                            {this.state.selected ? <span style={{ marginTop: 5 }}>{`${this.state.uploadFile.name}(${parseFloat(this.state.uploadFile.size / 1024).toFixed(1)}k)`}</span> : null}\n                            <Upload accept=\"application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                                beforeUpload={(file) => {\n                                    this.setState({\n                                        uploadFile: file,\n                                        selected: true\n                                    })\n                                    return false\n                                }}\n                                showUploadList={false}\n                            >\n                                <RLButton type=\"primay\" label={this.state.selected ? '重新选择' : '选择文件'} style={{ marginTop: 10 }} />\n                            </Upload>\n                            <div style={{ marginTop: 5 }}>下载模板并完善信息后，点击【选择文件】上传，支持格式：xls、xlsx</div>\n                        </div>\n                    </div>\n                    <div style={{ marginTop: 20, display: 'flex', flexDirection: 'row', justifyContent: 'center' }}>\n                        <RLButton label=\"取消\"\n                            onClick={() => {\n                                this.props.changePage('list',{\n                                    phonePage: this.phonePage\n                                });\n                            }}\n                            style={{ marginRight: 40 }}\n                        />\n                        <RLButton label=\"导入\"\n                            type=\"primary\"\n                            disabled={!this.state.selected}\n                            onClick={() => {\n                                if (!this.state.uploadFile) {\n                                    this.showToast({ type: 'normal', content: '请先选择上传文件！' });\n                                    return;\n                                }\n                                let formData = new FormData();\n                                formData.append('file', this.state.uploadFile);\n                                this.setState({\n                                    showImportingModal: true,\n                                });\n                                actionPhoneList.phoneImport(formData).then( res=>{\n                                    if (res.code === 200) {\n                                        this.setState({\n                                            importResult: res.data,\n                                            showImportingModal: false,\n                                            showImportResultModal: true\n                                        })\n                                    } else {\n                                        this.showToast({ type: 'error', content: res.msg });\n                                        this.setState({\n                                            showImportingModal: false\n                                        })\n                                    }\n                                }).catch(err => {\n                                    this.setState({\n                                        showImportingModal: false\n                                    });\n                                    this.showToast({ type: 'error', content: err.msg });\n                                });\n                            }}\n                        />\n                    </div>\n                </div>\n                {this.state.showImportingModal &&  <RLModal\n                    visible={this.state.showImportingModal}\n                    header={null}\n                    footer={null}\n                    closable={false}>\n                    <div>\n                        <div style={{ fontSize: 12, color: '#333333' }}>数据导入中，请勿离开当前页面</div>\n                        <div style={{ fontSize: 12, color: '#666666', marginTop: 8 }}>\n                            <span>{this.state.uploadFile && this.state.uploadFile.name}</span>\n                        </div>\n                    </div>\n                </RLModal>}\n                {this.state.showImportResultModal && <RLModal\n                    visible={this.state.showImportResultModal}\n                    footer={null}\n                    closable={false}\n                    className=\"importModal\">\n                    <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', width:'100%', height:'100%'}}>\n                        {\n                            this.state.importResult && this.state.importResult.list.length === 0 ?\n                                <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center',width:'100%',heught:'100%'}}>\n                                    <img src={require('../../../../assets/images/success.png').default} style={{width:56,height:56}}/>\n                                    <div style={{marginTop:5}}> 成功导入{this.state.importResult && this.state.importResult.count}条 </div>\n                                    <RLButton label=\"完成\"\n                                        type=\"primary\"\n                                        onClick={() => {\n                                            this.setState({\n                                                showImportResultModal: false\n                                            })\n                                        }}\n                                        style={{ marginTop: 30 }}/>\n                                </div>\n                                :\n                                <div style={{display:'flex',flexDirection:'column',justifyContent:'center',alignItems:'center',width:'100%',heught:'100%'}}>\n                                    <div style={{display:'flex',flexDirection:'column',justifyContent:'center',alignItems:'center',borderBottom:'1px solid #e5e5e5',height:92,width:'100%' }}>\n                                        <div>导入结果</div>\n                                        <div>\n                                            <img src={require('../../../../assets/images/error.png').default} style={{ width: 16, height: 16 }} />\n                                            <span>导入失败{this.state.importResult && this.state.importResult.list.length}条</span>\n                                        </div>\n                                    </div>\n                                    <div style={{display:'flex',flexDirection:'column',justifyContent:'center',alignItems:'center',marginBottom:'1px solid #e5e5e5',height: 380, width:'100%'}}>\n                                        <div style={{width:'90%',marginLeft:20, fontSize:16}}>失败详情</div>\n                                        <div style={{width: '90%',height:'70%',marginTop:10, overflowY:'scroll'}}>\n                                            <RLTable\n                                                columns={this.columns}\n                                                dataSource={(this.state.importResult && this.state.importResult.list) || []} \n                                            />\n                                        </div>\n                                        <RLButton label=\"完成\"\n                                            type=\"primary\"\n                                            onClick={() => {\n                                                this.setState({\n                                                    showImportResultModal: false\n                                                })\n                                            }}\n                                            style={{marginTop: 10}}/>\n                                    </div>\n                                </div>\n                        }\n                    </div>\n                </RLModal> }\n            </WindowContainer>\n        )\n    }\n\n}\nexport default connect((store, props) => {\n    return {\n        ...props,\n        // roleList: store.roleManage.roleList,\n        // planAvailable: store.userList.planAvailable\n    }\n})(CmpPhoneImport)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/seminar/mySeminar/components/UpcomingSeminar.js",["1368","1369","1370","1371","1372","1373","1374","1375","1376"],"\nimport React, { Component } from 'react'\nimport { Table, Tag, Space, Pagination } from 'antd'\nimport CancelSeminar from \"./CancelSeminar\"\n// import { pullUpHost } from \"../../../../env\"\n\nclass UpcomingSeminar extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      cancelShow: 0,\n      deleteShow: 0,\n      endShow: 0,\n      data: {\n        type: null,\n        title: null,\n        text: null,\n        btn: null\n      }\n    }\n    this.columns = [\n      {\n        title: '会议主题',\n        key: 'title',\n        render: (text, record) => {\n          return (<>\n            {record.status === 1 ? (<div style={{ width: 56, height: 20, backgroundColor: \"rgba(68,217,123,0.1)\", color: \"#44d97b\", borderRadius: 2, float: \"left\", marginRight: 5, textAlign: \"center\", paddingLeft: 5, paddingRight: 5 }}>进行中</div>) : null}\n            {record.title}</>)\n        }\n      },\n      {\n        title: '网络研讨会ID',\n        dataIndex: 'room',\n        key: 'room',\n        width: \"15%\"\n      },\n      {\n        title: '开始时间',\n        key: 'start_time',\n        width: \"22%\",\n        render: (text, record) => {\n          let startTime = record.start_time && record.start_time.split(' ')[0] + ' ' + record.start_time.split(' ')[1].split(':')[0] + ':' + record.start_time.split(' ')[1].split(':')[1]\n          return (< div>\n            {startTime}</div>)\n        }\n      },\n      {\n        title: '结束时间',\n        key: 'end_time',\n        width: \"22%\",\n        render: (text, record) => {\n          let endTime = record.end_time && record.end_time.split(' ')[0] + ' ' + record.end_time.split(' ')[1].split(':')[0] + ':' + record.end_time.split(' ')[1].split(':')[1]\n          return (< div>\n            {endTime}</div>)\n        }\n      },\n      {\n        title: '操作',\n        key: 'action',\n        width: \"17%\",\n        render: (text, record) => {\n          let actionStr = null\n          if (record.status === 0) return actionStr = (<>\n            <a\n              onClick={this.seminarStart(record)}>\n              开始</a>\n            <a\n              style={{ marginLeft: 10, marginRight: 10 }}\n              onClick={this.seminarEdit(record)}>\n              编辑</a>\n            <a\n              onClick={this.clickHandler(record.id)}>\n              取消</a></>)\n          if (record.status === 1) return actionStr = (\n            <>\n              <a\n                onClick={this.seminarStart(record)}>加入</a>\n              <a\n                style={{ marginLeft: 10 }}\n                onClick={this.clickHandler(record.id)}\n              >结束</a></>\n          )\n          if (record.status === 2) return actionStr = (\n            <>\n              <a\n                onClick={this.seminarStart(record)}>\n                加入</a>\n              <a\n                style={{ marginLeft: 10 }}\n                onClick={this.clickHandler(record.id)}>删除</a></>\n          )\n          return (\n            <Space size=\"middle\">\n              {actionStr}\n            </Space>\n          )\n        }\n      },\n    ];\n  }\n  //开始会议\n  seminarStart = (record) => {\n    return (e) => {\n      e.stopPropagation()\n      let hushKey = record.url.split(\"?\")[1]\n      // let url = pullUpHost + \"?\" + hushKey\n      // window.open(url)\n    }\n  }\n\n  //编辑会议\n  seminarEdit = (record) => {\n    return (e) => {\n      e.stopPropagation()\n      // this.props.push({ pathname: '/meeting/seminar/reservedseminar/' + record.id })\n      this.props.changePage('edit', { id: record.id })\n    }\n  }\n\n  //弹出对话框\n  clickHandler = (id) => {\n    return (e) => {\n      e.stopPropagation()\n      switch (e.target.text) {\n        case \"取消\":\n          this.setState({\n            cancelShow: id,\n            data: {\n              type: \"cancel\",\n              title: \"取消会议\",\n              text: \"您是会议的创建者，取消后其他成员将无法入会。\",\n              btn: \"我再想想\"\n            }\n          })\n          break;\n        case \"结束\":\n          this.setState({\n            endShow: id,\n            data: {\n              type: \"end\",\n              title: \"结束会议\",\n              text: \"您是否确定结束此网络研讨会？\",\n              btn: \"取消\"\n            }\n          })\n          break;\n        case \"删除\":\n          this.setState({\n            deleteShow: id,\n            data: {\n              type: \"delete\",\n              title: \"删除会议\",\n              text: \"您是会议的创建者，删除后其他成员将无法入会。\",\n              btn: \"取消\"\n            }\n          })\n          break;\n        default: break;\n      }\n    }\n  }\n  //关闭对话框\n  closeHandler = () => {\n    this.setState({\n      cancelShow: 0,\n      endShow: 0,\n      deleteShow: 0\n    })\n  }\n\n  //打开详情页面\n  openDetail = (id) => {\n    return () => {\n      // this.props.push({ pathname: \"/meeting/seminar/seminardetail/\" + id })\n      this.props.changePage('detail', { seminarid: id })\n    }\n  }\n\n\n  render() {\n    let s = this.props.state\n    return (\n      <>\n        <Table\n          columns={this.columns}\n          dataSource={s.willSeminarList}\n          style={{ marginBottom: 10 }}\n          pagination={false}\n          onRow={(record, rowkey) => {\n            return {\n              onClick: this.openDetail(record.id),\n              onMouseEnter: event => {\n                event.stopPropagation()\n                event.target.style.cursor = \"pointer\"\n              }\n            }\n          }}\n        />\n        <Pagination\n          style={{ float: 'right', marginRight: 30, paddingBottom: 20 }}\n          total={s.willlistLen}\n          hideOnSinglePage={true}\n          pageSize={20}\n          current={s.page}\n          showSizeChanger={false}\n          onChange={(page, pageSize) => {\n            this.props.paginationAction(page)\n\n          }}\n        />\n        <CancelSeminar\n          isShow={this.state.cancelShow || this.state.endShow || this.state.deleteShow}\n          data={this.state.data}\n          closeHandler={this.closeHandler}\n          getSeminarList={this.props.getSeminarList}\n          pageCon={this.props.state}>\n        </CancelSeminar>\n\n      </>\n    )\n  }\n}\nexport default UpcomingSeminar","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/seminar/mySeminar/components/HistorySeminar.js",["1377","1378","1379","1380","1381","1382"],"\nimport React, { Component } from 'react'\nimport { Table, Tag, Space, Pagination, message } from 'antd'\nimport CancelSeminar from \"./CancelSeminar\"\nimport actionSeminar from '@actions/seminar/actionSeminar.js'\nimport actionMeeting from '@actions/meetingManage/actionMeeting.js'\nimport BaseCmp from '@components/BaseCmp.js'\nimport { downloadFile } from '@/libs/utils.js';\n// import { requestHost, requestYTHHost } from \"../../../../env.js\"\n// import { requestWithParams } from \"../../../../utils/utils\"\n\nclass HistorySeminar extends BaseCmp {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isShow: 0,\n      // seminarList:[]\n    }\n    this.columns = [\n      {\n        title: '会议主题',\n        key: 'title',\n        width: '24%',\n        render: (text, record) => {\n          return (< div style={{ maxWidth: 400 }}>\n            {record.title}</div>)\n        }\n      },\n      {\n        title: '网络研讨会ID',\n        dataIndex: 'room',\n        key: 'room',\n        width: \"15%\"\n      },\n      {\n        title: '开始时间',\n        key: 'start_time',\n        width: \"22%\",\n        render: (text, record) => {\n          let startTime = record.start_time && record.start_time.split(' ')[0] + ' ' + record.start_time.split(' ')[1].split(':')[0] + ':' + record.start_time.split(' ')[1].split(':')[1]\n          return (< div>\n            {startTime}</div>)\n        }\n      },\n      {\n        title: '结束时间',\n        key: 'end_time',\n        width: \"22%\",\n        render: (text, record) => {\n          let endTime = record.close_time && record.close_time.split(' ')[0] + ' ' + record.close_time.split(' ')[1].split(':')[0] + ':' + record.close_time.split(' ')[1].split(':')[1]\n          return (< div>\n            {endTime}</div>)\n        }\n      },\n      {\n        title: '操作',\n        key: 'action',\n        width: \"17%\",\n        render: (text, record) => (\n          <Space size=\"middle\">\n            <a\n              onClick={this.deleteHandler(record.id)}>删除</a>\n            {record.user_num2 ? <a\n              onClick={this.deriveList(record.id)}\n            >导出参会者</a> : null}\n\n          </Space>\n        ),\n      },\n    ];\n  }\n  //打开对话框\n  deleteHandler(id) {\n    return (e) => {\n      e.stopPropagation()\n      this.setState({\n        isShow: id\n      })\n    }\n  }\n\n  //关闭对话框\n  closeHandler = () => {\n    this.setState({\n      isShow: 0\n    })\n  }\n\n  //打开详情页面\n  openDetail = (id) => {\n    return () => {\n      // this.props.push({ pathname: \"/meeting/seminar/seminardetail/\" + id })\n      this.props.changePage('detail', { seminarid: id })\n    }\n  }\n\n  //导出参会者列表\n  deriveList = (id) => {\n    // return (e) => {\n    //   e.stopPropagation()\n    //   let url = \"/api/v1/meeting/control/export\"\n    //   // window.open(requestYTHHost + '/api/v1/meeting/control/export?meeting_id=' + id)\n    // }\n    actionMeeting.exportMemberList(id).then( res => {\n      if(res.code === 200 ){\n          downloadFile(res.data, '直播观众列表.xlsx')\n      }else{\n          this.showToast({type:'error', content: '导出文件出错'})\n      }\n    }).catch(err =>{\n        this.showToast({type:'error', content: err.msg})\n    })\n  }\n\n  render() {\n    let s = this.props.state\n    console.log(s.comSeminarList);\n    return (\n      <>\n        <Table\n          columns={this.columns}\n          dataSource={s.comSeminarList}\n          style={{ marginBottom: 10 }}\n          pagination={false}\n          onRow={(record, rowkey) => {\n            return {\n              onClick: this.openDetail(record.id),\n              onMouseEnter: event => {\n                event.stopPropagation()\n                event.target.style.cursor = \"pointer\"\n              }\n\n            }\n          }}\n        />\n        <Pagination\n          style={{ float: 'right', marginRight: 30, paddingBottom: 20 }}\n          total={s.comlistLen}\n          hideOnSinglePage={true}\n          current={s.page}\n          showSizeChanger={false}\n          pageSize={20}\n          onChange={(page, pageSize) => {\n            this.props.paginationAction(page)\n\n          }}\n        />\n        <CancelSeminar\n          isShow={this.state.isShow}\n          data={{\n            type: \"delete\",\n            title: \"删除会议记录\",\n            text: \"删除后该网络研讨会记录将被永久删除\",\n            btn: \"取消\"\n          }}\n          btn={\"删除\"}\n          closeHandler={this.closeHandler}\n          getSeminarList={this.props.getSeminarList}\n          pageCon={this.props.state}>\n        </CancelSeminar>\n      </>\n    )\n  }\n}\nexport default HistorySeminar","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/infoManage/components/InfoClassify/CmpInfoClassifyEdit.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/infoManage/components/InfoManage/CmpDocList.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/infoManage/components/InfoManage/CmpInfoEdit.js",["1383"],"import BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport {\n    RLInput, RLSelect, RLButton, RLForm, RLFormItem, RLRadioGroup, RLTag\n} from '@components/index.js'\nimport { Tabs, DatePicker } from 'antd'\nimport { createRef } from 'react'\nimport BraftEditor from 'braft-editor'\nimport actionInfoManage from '@actions/infoManage/actionInfoManage.js'\nimport actionInfoClassify from '@actions/infoManage/actionInfoClassify.js'\nimport CmpUpload from '@/pages/common/CmpUpload.js'\nimport { dealTime, dealDateTime } from '@/libs/utils.js'\nimport moment from 'moment'\nimport AddUser from '@/pages/common/meeting/AddUser.js'\n\nimport Uploader from '@/libs/Uploader.js';\nimport config from '@/config.js';\nimport { getFileType } from '@/libs/utils.js'\nimport commonActions from '@actions/commonActions'\nimport locale from 'antd/es/date-picker/locale/zh_CN'\n\nimport './CmpInfoEdit.less'\n\nconst { TabPane } = Tabs\n\n\nclass CmpInfoEdit extends BaseCmp {\n    constructor(props) {\n        super(props)\n        if (props.infoId) {\n            this.infoId = props.infoId\n        }\n        this.state = {\n            showLargeModal: false,   // html片段容器\n            addLoading: false,  // 添加按钮loading\n            infoListInfo: {\n                title: '',\n                e_title: '',\n                start_time: '',\n                content: BraftEditor.createEditorState(null),\n                e_content: BraftEditor.createEditorState(null),\n                source: '',\n                e_source: '',\n                class_id: null,\n                type: 1,\n                status: 1,\n                invite_uids: '',\n                home_image: '',\n                wx_image: ''\n            },   // 资讯\n            userList: [],   // 成员列表\n            language: 'zh',   // 默认中文\n            infoOptions: [],   // 资讯分类 下拉选择\n            e_infoOptions: [],   // 资讯分类（英文） 下拉选择\n\n            showAddUserModal: false,   // 添加人员弹框\n            addUserConfig: {\n                showSelectGroup: true,\n                selectType: 'checkbox',\n                originCanCancel: true,\n                returnStyle: 'object',\n                mustIdent: true\n            }\n        }\n        this.form = createRef()\n        // 获取资讯分类\n        this.getInfoClassify()\n    }\n    componentDidMount() {\n        if (this.infoId) {   // 编辑\n            this.getInfoDetail(this.infoId)\n        } else {\n            this.setState({\n                infoListInfo: {\n                    ...this.state.infoListInfo\n                }\n            })\n        }\n    }\n\n    // 资讯详情\n    getInfoDetail = (id) => {\n        actionInfoManage.getInfoDetail({id}).then(res => {\n            if (res && res.code === 200) {\n                const data = res.data\n                let userList = data.invite_uids\n                this.setState({\n                    userList,\n                    infoListInfo: {\n                        ...data,\n                        start_time: moment(dealTime(data.start_time, 'YYYY-MM-DD HH:mm')),\n                        content: BraftEditor.createEditorState(data.content),\n                        e_content: BraftEditor.createEditorState(data.e_content)\n                    }\n                }, () => {\n                    // 给表单重置值\n                    this.form && this.form.setFieldsValue(this.state.infoListInfo)\n                })\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        })\n    }\n\n    // 资讯分类\n    getInfoClassify = () => {\n        actionInfoClassify.getAllInfoClassify().then(res => {\n            if (res && res.code === 200) {\n                let e_data = []\n                res.data.map(item => {\n                    if (!item.e_name) {\n                        return e_data.push({\n                            id: item.id,\n                            name: item.name\n                        })\n                    } else {\n                        return e_data.push({\n                            id: item.id,\n                            name: item.e_name\n                        })\n                    }\n                })\n                this.setState({\n                    infoOptions: res.data,\n                    e_infoOptions: e_data\n                })\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        })\n    }\n\n    editFailed = (res) => {\n        this.showToast({ content: '您有必填项未填写', type: 'success' })\n    }\n\n    editConfirm = (values) => {\n        console.log('onFinish', values)\n        this.setState({\n            addLoading: true\n        })\n        let { start_time, class_id, type, status } = values\n        const { title, e_title, content, e_content, source, e_source, home_image, wx_image } = this.state.infoListInfo\n        let zh_content = content.toHTML() && content.toHTML() === '<p></p>'   // 中文正文为空\n        let en_content = e_content.toHTML() && e_content.toHTML() === '<p></p>'   // 英文正文为空\n        if (this.state.language === 'zh') {\n            if ((!e_title && en_content) || (e_title && !en_content)) {\n\n            } else {\n                this.showToast('英文必填项请填写完整')\n                this.setState({\n                    addLoading: false\n                })\n                return\n            }\n        } else if (this.state.language === 'en') {\n            if ((!title && zh_content) || (title && !zh_content)) {\n\n            } else {\n                this.showToast('中文必填项请填写完整')\n                this.setState({\n                    addLoading: false\n                })\n                return\n            }\n        }\n        const params = {\n            title,\n            e_title,\n            start_time: dealDateTime(start_time.format('YYYY-MM-DD HH:mm')),\n            content: content.toHTML(),\n            e_content: e_content.toHTML(),\n            source,\n            e_source,\n            class_id,\n            type,\n            status,\n            home_image,\n            wx_image\n        }\n        let userStr = []\n        this.state.userList.forEach(ele => {\n            userStr.push(ele.id)\n        })\n        params.invite_uids = userStr.join(',')\n        console.log('添加编辑资讯参数--params:', params)\n        if (this.infoId) {   // 编辑\n            actionInfoManage.infoEdit({ ...params, id: this.infoId }).then(res => {\n                if (res.code === 200) {\n                    this.showToast({ content: '编辑成功', type: 'success' })\n                    this.props.changePage('list')\n                } else {\n                    this.showToast({ type: 'error', content: res.msg })\n                }\n            }).finally(() => {\n                this.setState({\n                    addLoading: false\n                })\n            })\n        } else {   // 创建\n            actionInfoManage.infoAdd(params).then(res => {\n                if (res.code === 200) {\n                    this.showToast({ type: 'success', content: '创建成功' })\n                    this.props.changePage('list')\n                } else {\n                    this.showToast({ type: 'error', content: res.msg })\n                }\n            }).finally(() => {\n                this.setState({\n                    addLoading: false\n                })\n            })\n        }\n    }\n\n    pageTitle = () => {\n        let title = '创建资讯'\n        if (this.infoId) {\n            title = '编辑资讯'\n        }\n        return (\n            <div className=\"custom-page-title\">\n                <span>{title}</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.changePage('list', { page: this.props.page })\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n\n    /**\n     * 创建表单的label\n     */\n    createLabel = (labelName, need, style = {}) => {\n        return <div>\n            {need ? <span style={{ color: '#ff4d4f' }}>*</span> : null}\n            <span style={{ ...style }}>{labelName}</span>\n        </div>\n    }\n\n    range = (start, end) => {\n        const result = []\n        for (let i = start; i < end; i++) {\n            result.push(i)\n        }\n        return result\n    }\n\n    disabledDate = (current) => {\n        return current && current < moment().startOf('day')\n    }\n\n    disabledDateTime = (dates) => {\n        let hours = moment().hours()\n        let minutes = moment().minutes()\n        // 当日只能选择当前时间之后的时间点\n        if (dates && moment(dates[1]).date() === moment().date()) {\n            return {\n                disabledHours: () => this.range(0, 24).splice(0, hours),\n                disabledMinutes: () =>this.range(0, 60).splice(0, minutes)\n            }\n        }\n        return {\n            disabledHours: () => [],\n            disabledMinutes: () => []\n        }\n    }\n\n    // 成员添加\n    addSuccess = (data) => {\n        let originUsers = this.state.userList;\n        let returnUsers = data.map(item => {\n            return {\n                'id': item.id,\n                'nickname': item.nickname\n            }\n        })\n        let newUsers = []\n        for (let user of returnUsers) {\n            let index = originUsers.findIndex(item => item.id === user.id)\n            if (index < 0) {\n                newUsers.push(user)\n            }\n        }\n        let finalUsers = originUsers.concat(newUsers)\n        this.setState({\n            userList: finalUsers\n        }, () => {\n            this.form.validateFields(['invite_uids'])\n        })\n    }\n\n    // 音视频上传\n    audioVideoUpload = (upload) => {\n        let uploader = new Uploader({\n            file: upload.file,\n            method: 'POST',\n            baseURL: config.uploadBaseUrl,\n            url: '/api/playback/upload',\n            chunkSize: 2 * 1024 * 1024,   // 切片大小 2M\n            onStart: () => {\n            },\n            onSuccess: (res) => {\n                console.log('--------上传成功-------', res)\n                upload.success({\n                    url: res.url,\n                    meta: {\n                        id: res.id,\n                        title: upload.file.name,\n                        alt: '',\n                        loop: false, // 指定音视频是否循环播放\n                        autoPlay: false, // 指定音视频是否自动播放\n                        controls: true, // 指定音视频是否显示控制栏\n                        poster: '', // 指定视频播放器的封面\n                    }\n                })\n            },\n            onError: () => {\n                console.log('--------上传失败-------')\n                upload.error({ msg: '上传失败' })\n            },\n            onProgress: (progress) => {\n                console.log('-------上传进度---------', progress)\n                // 进度条\n                upload.progress(progress)\n            },\n            onCancel: () => {\n                console.log('-------上传取消---------')\n            }\n        })\n        let dtype = 0\n        if (upload.file.type.includes('audio')) {\n            dtype = 1\n        }\n        uploader.upload({\n            dtype,\n            dtranscode: false\n        })\n    }\n\n    // 图片上传\n    imageUpload = (upload) => {\n        let formData = new FormData()\n        formData.append('resource', upload.file)\n        formData.append('type', 'picture')\n        commonActions.fileUpload(formData).then(res => {\n            console.log('上传图片返回--res:', res)\n            if (res.code === 200) {\n                upload.success({\n                    url: res.data.fileurl,\n                    meta: {\n                        id: res.data.fileurl,\n                        title: upload.file.name,\n                        alt: ''\n                    }\n                })\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        })\n    }\n\n    render() {\n        const { showSelectGroup, selectType, originCanCancel, returnStyle, mustIdent } = this.state.addUserConfig\n        return (\n            <WindowContainer title={this.pageTitle}>\n                <div className='page-info-edit'>\n                    <Tabs defaultActiveKey=\"zh\"\n                        style={{ flex: 1 }}\n                        onChange={key => {\n                            this.setState({\n                                language: key\n                            })\n                        }}\n                    >\n                        <TabPane tab=\"中文\" key=\"zh\">\n                        </TabPane>\n                        <TabPane tab=\"英文\" key=\"en\">\n                        </TabPane>\n                    </Tabs>\n                    <RLForm\n                        ref={form => this.form = form}\n                        labelCol={{ style: { width: 150, marginRight: 20, textAlign: 'right' } }}\n                        labelAlign='left'\n                        wrapperCol={{ style: { span: 24, marginRight: 30 }}}\n                        onFinish={this.editConfirm}\n                        onFinishFailed={this.editFailed}\n                        initialValues={this.state.infoListInfo}\n                        validateTrigger='onBlur'\n                    >\n                        {\n                            this.state.language === 'zh' ?\n                                <RLFormItem\n                                    name='title'\n                                    label='资讯主题'\n                                    colon={false}\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: '请输入资讯主题'\n                                        }, {\n                                            max: 50,\n                                            message: '资讯主题最多50个字符'\n                                        }\n                                    ]}\n                                >\n                                    <RLInput \n                                        placeholder='请输入资讯主题'\n                                        style={{ width: 360 }}\n                                        value={this.state.infoListInfo.title}\n                                        onChange={e => {\n                                            this.setState({\n                                                infoListInfo: {\n                                                    ...this.state.infoListInfo,\n                                                    title: e.target.value\n                                                }\n                                            })\n                                        }}\n                                    />\n                                </RLFormItem> :\n                                <RLFormItem\n                                    name='e_title'\n                                    label='资讯主题'\n                                    colon={false}\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: '请输入资讯主题'\n                                        }, {\n                                            max: 50,\n                                            message: '资讯主题最多50个字符'\n                                        }\n                                    ]}\n                                >\n                                    <RLInput\n                                        placeholder='请输入资讯主题'\n                                        style={{ width: 360 }}\n                                        value={this.state.infoListInfo.e_title}\n                                        onChange={e => {\n                                            this.setState({\n                                                infoListInfo: {\n                                                    ...this.state.infoListInfo,\n                                                    e_title: e.target.value\n                                                }\n                                            })\n                                        }}\n                                    />\n                                </RLFormItem>\n                        }\n                        <RLFormItem\n                            name='start_time'\n                            label='发布时间'\n                            colon={false}\n                            rules={[\n                                {\n                                    required: true,\n                                    message: '请选择发布时间'\n                                }\n                            ]}\n                        >\n                            <DatePicker\n                                allowClear\n                                locale={locale}\n                                showTime\n                                disabledDate={this.disabledDate}\n                                // disabledTime={this.disabledDateTime}\n                                format={'YYYY-MM-DD HH:mm'}\n                                placeholder='请选择日期时间'\n                            />\n                        </RLFormItem>\n                        {\n                            this.state.language === 'zh' ?\n                                <RLFormItem\n                                    name='content'\n                                    label='正文内容'\n                                    colon={false}\n                                    rules={[\n                                        {\n                                            required: true,\n                                            validator: (rule, value) => {\n                                                if (value.isEmpty()) {\n                                                    return Promise.reject('请输入正文内容')\n                                                } else {\n                                                    return Promise.resolve()\n                                                }\n                                            }\n                                        }\n                                    ]}\n                                >\n                                    <BraftEditor\n                                        // language={this.state.language}\n                                        value={this.state.infoListInfo.content}\n                                        onChange={editorState => {\n                                            this.setState({\n                                                infoListInfo: {\n                                                    ...this.state.infoListInfo,\n                                                    content: editorState\n                                                }\n                                            })\n                                        }}\n                                        // onSave={this.submitContent}\n                                        // placeholder=\"请输入正文内容\"\n                                        media={{\n                                            accepts: {\n                                                image: 'image/jpeg,image/png',\n                                                video: 'video/mp4',\n                                                audio: 'audio/mpeg,audio/mp3',\n                                            },\n                                            uploadFn: (upload) => {\n                                                console.log('media-upload--file:', upload)\n                                                const fileType = upload.file && upload.file.type   // 文件类型\n                                                if (!fileType) {\n                                                    return\n                                                }\n                                                // 音视频上传\n                                                if (fileType.includes('video') || fileType.includes('audio')) {\n                                                    this.audioVideoUpload(upload)\n                                                }\n                                                // 图片上传\n                                                else if (fileType.includes('image')) {\n                                                    this.imageUpload(upload)\n                                                }\n                                            },\n                                            // validateFn: (file) => {\n                                            //     console.log('media-upload--file:', file)\n                                            //     const fileName = file && file.name\n                                            //     console.log(`fileName----------------`, fileName)\n                                            //     if (!fileName) {\n                                            //         return false\n                                            //     }\n                                            //     let fileType = getFileType(fileName)\n                                            //     let dtype   // 0 视频 /1 音频 /2 图片 /3 文档 /4 压缩包 /5 其他\n                                            //     switch (fileType) {\n                                            //         case 'video':\n                                            //             dtype = 0\n                                            //             break\n                                            //         case 'radio':\n                                            //             dtype = 1\n                                            //             break\n                                            //         case 'image':\n                                            //             dtype = 2\n                                            //             break\n                                            //         case 'pdf': case 'txt': case 'word': case 'excel': case 'ppt':\n                                            //             dtype = 3\n                                            //             break\n                                            //         case 'zip':\n                                            //             dtype = 4\n                                            //             break\n                                            //         case 'other':\n                                            //             dtype = 5\n                                            //             break\n                                            //         default:\n                                            //             dtype = 0\n                                            //             break\n                                            //     }\n                                            //     if (dtype === 0 && !fileName.endsWith('.mp4')) {\n                                            //         return false\n                                            //     } else if (dtype === 1 && !fileName.endsWith('.mp3')) {\n                                            //         return false\n                                            //     } else if ([3, 4, 5].includes(dtype)) {\n                                            //         return false\n                                            //     } else {\n                                            //         return true\n                                            //     }\n                                            // }\n\n                                            // onChange(...rest) {\n                                            //     console.log('onChange---rest', rest)\n                                            // }\n                                        }}\n                                        style={{ border: '1px solid #d1d1d1', borderRadius: 3, background: '#fff' }}\n                                    />\n                                </RLFormItem> :\n                                <RLFormItem\n                                    name='e_content'\n                                    label='正文内容'\n                                    colon={false}\n                                    rules={[\n                                        {\n                                            required: true,\n                                            validator: (rule, value) => {\n                                                if (value.isEmpty()) {\n                                                    return Promise.reject('请输入正文内容')\n                                                } else {\n                                                    return Promise.resolve()\n                                                }\n                                            }\n                                        }\n                                    ]}\n                                >\n                                    <BraftEditor\n                                        // language={this.state.language}\n                                        value={this.state.infoListInfo.e_content}\n                                        onChange={editorState => {\n                                            this.setState({\n                                                infoListInfo: {\n                                                    ...this.state.infoListInfo,\n                                                    e_content: editorState\n                                                }\n                                            })\n                                        }}\n                                        // onSave={this.submitContent}\n                                        // placeholder=\"请输入正文内容\"\n                                        media={{\n                                            accepts: {\n                                                image: 'image/jpeg,image/png',\n                                                video: 'video/mp4',\n                                                audio: 'audio/mpeg',\n                                            },\n                                            uploadFn: (upload) => {\n                                                console.log('media-upload--file:', upload)\n                                                const fileType = upload.file.type   // 文件类型\n                                                // 音视频上传\n                                                if (fileType === 'video/mp4' || fileType === 'audio/mpeg') {\n                                                    this.audioVideoUpload(upload)\n                                                }\n                                                // 图片上传\n                                                else if (fileType === 'image/jpeg' || fileType === 'image/png') {\n                                                    this.imageUpload(upload)\n                                                }\n                                            },\n                                            onChange(...rest) {\n                                                console.log('onChange---rest', rest)\n                                            }\n                                        }}\n                                        style={{ border: '1px solid #d1d1d1', borderRadius: 3, background: '#fff' }}\n                                    />\n                                </RLFormItem>\n                        }\n                        \n                        <RLFormItem\n                            name='class_id'\n                            label='资讯分类'\n                            colon={false}\n                            rules={[{\n                                required: true,\n                                message: \"请选择资讯分类\"\n                            }]}\n                        >\n                            <RLSelect\n                                options={this.state.language === 'zh' ? this.state.infoOptions : this.state.e_infoOptions}\n                                style={{ width: 200, marginRight: 12 }}\n                                key='class_id'\n                                placeholder='请选择'\n                                valuekey='id'\n                                labelkey='name'\n                                value={this.state.infoListInfo.class_id}\n                            />\n                        </RLFormItem>\n                        <RLFormItem\n                            name='type'\n                            label='发布范围'\n                            colon={false}\n                            rules={[{\n                                required: true,\n                                message: \"请选择发布范围\"\n                            }]}\n                        >\n                            <RLRadioGroup\n                                items={[\n                                    { value: 1, label: '公开' },\n                                    { value: 0, label: '非公开' }\n                                ]}\n                                value={this.state.infoListInfo.type}\n                                onChange={e => {\n                                    this.setState({\n                                        infoListInfo: {\n                                            ...this.state.infoListInfo,\n                                            type: e.target.value\n                                        }\n                                    }, () => {\n                                        this.form.validateFields(['invite_uids'])\n                                    })\n                                }}\n                            />\n                        </RLFormItem>\n                        <RLFormItem\n                            label={this.createLabel('可见名单', this.state.infoListInfo.type === 1 ? false : true)}\n                            colon={false}\n                            name='invite_uids'\n                            rules={[\n                                {\n                                    validator: () => {\n                                        if (this.state.infoListInfo.type === 0) {\n                                            if (this.state.userList.length === 0) {\n                                                return Promise.reject('如果发布范围选择的是非公开，可见名单是必填项')\n                                            } else {\n                                                return Promise.resolve()\n                                            }\n                                        } else {\n                                            return Promise.resolve()\n                                        }\n                                    }\n                                }\n                            ]}\n                        >\n                            <div className='form-item-gropu'>\n                                <div style={{\n                                    width: 520,\n                                    minHeight: 60,\n                                    border: '1px solid rgb(220, 223, 230)',\n                                    borderRadius: 3,\n                                    display: 'flex',\n                                    flexWrap: 'wrap',\n                                    padding: '10px 10px 10px 10px',\n                                    boxSizing: 'border-box'\n                                }}>\n                                    {this.state.userList.map(ele => {\n                                        return <div style={{ height: 19, marginTop: 4 }} key={ele.id}>\n                                            <RLTag\n                                                label={ele.nickname}\n                                                closable\n                                                onClose={() => {\n                                                    let all = [...this.state.userList]\n                                                    let index = all.findIndex(clc => { return clc.id === ele.id })\n                                                    all.splice(index, 1)\n                                                    this.setState({\n                                                        userList: all\n                                                    })\n                                                }}\n                                            />\n                                        </div>\n                                    })}\n                                </div>\n                                <RLButton\n                                    label='添加用户'\n                                    type='primary'\n                                    disabled={this.state.infoListInfo.type === 1}\n                                    onClick={() => {\n                                        this.setState({\n                                            showAddUserModal: true\n                                        })\n                                    }}\n                                    style={{ marginLeft: 20 }}\n                                />\n                            </div>\n                        </RLFormItem>\n                        {\n                            this.state.language === 'zh' ?\n                            <RLFormItem\n                                name='source'\n                                label='发布机构落款'\n                                colon={false}\n                            >\n                                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                                    <RLInput\n                                        placeholder='请输入内容'\n                                        style={{ width: 200 }}\n                                        value={this.state.infoListInfo.source}\n                                        onChange={e => {\n                                            this.setState({\n                                                infoListInfo: {\n                                                    ...this.state.infoListInfo,\n                                                    source: e.target.value\n                                                }\n                                            })\n                                        }}\n                                    />\n                                        <div style={{ marginLeft: 5 }}>若不填写，默认为z止于至善</div>\n                                </div>\n                            </RLFormItem> :\n                            <RLFormItem\n                                name='e_source'\n                                label='发布机构落款'\n                                colon={false}\n                            >\n                                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                                    <RLInput\n                                        placeholder='请输入内容'\n                                        style={{ width: 200 }}\n                                        value={this.state.infoListInfo.e_source}\n                                        onChange={e => {\n                                            this.setState({\n                                                infoListInfo: {\n                                                    ...this.state.infoListInfo,\n                                                    e_source: e.target.value\n                                                }\n                                            })\n                                        }}\n                                    />\n                                    <div style={{ marginLeft: 5 }}>若不填写，默认为chinabond</div>\n                                </div>\n                            </RLFormItem>\n                        }\n                        <RLFormItem\n                            name='home_image'\n                            label='资讯封面图'\n                            colon={false}\n                        >\n                            <CmpUpload\n                                aspect={4 / 3}\n                                saveUrl={fileurl => {\n                                    this.setState({\n                                        infoListInfo: {\n                                            ...this.state.infoListInfo,\n                                            home_image: fileurl,\n                                            wx_image: this.state.infoListInfo.wx_image || fileurl\n                                        }\n                                    })\n                                }}\n                                src={this.state.infoListInfo.home_image}\n                                imgStyle={{ width: 120, height: 90, borderRadius: 4, cursor: 'pointer' }}\n                                default={require('../../../../assets/images/upload.png').default}\n                            />\n                            <div style={{ marginTop: 10 }}>只能上传jpg/png，大小不超过2M，图片比例4：3</div>\n                        </RLFormItem>\n                        <RLFormItem\n                            name='wx_image'\n                            label='微信分享图'\n                            colon={false}\n                        >\n                            <CmpUpload\n                                saveUrl={fileurl => {\n                                    this.setState({\n                                        infoListInfo: {\n                                            ...this.state.infoListInfo,\n                                            wx_image: fileurl\n                                        }\n                                    })\n                                }}\n                                src={this.state.infoListInfo.wx_image}\n                                imgStyle={{ width: 90, height: 90, borderRadius: 4, cursor: 'pointer' }}\n                                default={require('../../../../assets/images/default.png').default}\n                            />\n                            <div style={{ marginTop: 10 }}>只能上传jpg/png，大小不超过2M</div>\n                        </RLFormItem>\n                        <RLFormItem\n                            name='status'\n                            label='资讯状态'\n                            colon={false}\n                        >\n                            <RLRadioGroup\n                                items={[\n                                    { value: 1, label: '上架' },\n                                    { value: 0, label: '下架' }\n                                ]}\n                            />\n                        </RLFormItem>\n\n                        <RLFormItem>\n                            <div style={{ display: 'flex', justifyContent: 'center' }}>\n                                <RLButton\n                                    type=\"default\"\n                                    label='取消'\n                                    width={80}\n                                    style={{ display: 'inline-block' }}\n                                    onClick={() => {\n                                        this.props.changePage('list')\n                                    }}\n                                />\n                                <RLButton\n                                    type=\"primary\"\n                                    htmlType=\"submit\"\n                                    label={this.infoId ? '保存' : '创建'}\n                                    style={{ marginLeft: 40, display: 'inline-block' }}\n                                    loading={this.state.addLoading}\n                                    width={80}\n                                />\n\n                            </div>\n\n                        </RLFormItem>\n                    </RLForm>\n                </div>\n                {\n                    this.state.showAddUserModal && <AddUser\n                        visible={this.state.showAddUserModal}\n                        showSelectGroup={showSelectGroup}\n                        selectType={selectType}\n                        originArr={this.state.userList}\n                        originCanCancel={originCanCancel}\n                        returnStyle={returnStyle}\n                        mustIdent={mustIdent}\n                        onCancel={() => {\n                            this.setState({\n                                showAddUserModal: false\n                            })\n                        }}\n                        onAdd={data => {\n                            this.addSuccess(data)\n                        }}\n                    />\n                }\n            </WindowContainer >\n        )\n    }\n\n}\nexport default connect((store, props) => {\n    return {\n        ...props\n    }\n})(CmpInfoEdit)\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/infoManage/components/InfoManage/CmpInfoList.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/infoManage/components/InfoClassify/CmpInfoClassifyList.js",["1384"],"import BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport { Tooltip } from 'antd'\nimport {\n    RLButton, RLTable, RLFilterTool, RLSwitch, RLTooltip\n} from '@components/index.js'\nimport { dealTableTime } from '@/libs/utils.js'\nimport interfaces from '@/api/interfaces'\n\nimport actionInfoClassify from '@actions/infoManage/actionInfoClassify.js'\n\n\nclass CmpInfoClassifyList extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.state = {\n            infoClassifyListInfo: {\n                pageNum: 1,  // 总页数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: 1,     // 当前第几页\n            },\n            getListLoading: true,   // 获取列表loading\n        }\n        this.columns = [\n            {\n                title: '序号',\n                dataIndex: 'id',\n                key: 'id',\n                width: '8%',\n                render: (text, record, index) => {\n                    return <div>\n                        {(this.state.infoClassifyListInfo.page - 1) * this.pageSize + index + 1}\n                    </div>\n                }\n            },\n            {\n                title: '分类名称',\n                dataIndex: 'name',\n                key: 'name',\n                width: '15%',\n                render: (text, record) => <RLTooltip placement=\"bottomLeft\" title={record.name}>\n                    <div className='line-clamp-noColor'>\n                        {record.name}\n                    </div>\n                </RLTooltip>\n            },\n            {\n                title: '是否显示',\n                dataIndex: 'is_show',\n                key: 'is_show',\n                width: '10%',\n                render: (text, record) => {\n                    return (\n                        <div style={{ display: 'flex', flexDirection: 'row' }}>\n                            {\n                                interfaces.INFO_CLASSIFY_HIDE && <RLSwitch\n                                    defaultChecked={record.is_show === 1}\n                                    onChange={e => {\n                                        // 调用更新接口\n                                        this.updateValue(record, e)\n                                    }}\n                                />\n                            }\n                        </div>\n                    )\n                }\n            },\n            {\n                title: '资讯数',\n                dataIndex: 'info_count',\n                key: 'info_count',\n                width: '10%'\n            },\n            {\n                title: '创建时间',\n                dataIndex: 'create_at',\n                key: 'create_at',\n                width: '14%',\n                render: (text, record) => {\n                    return <div>\n                        {dealTableTime(record.create_at)}\n                    </div>\n                }\n            },\n            {\n                title: '创建者',\n                dataIndex: 'creator',\n                key: 'creator',\n                width: '18%',\n                render: (text, record) => <RLTooltip placement=\"bottomLeft\" title={record.creator}>\n                    <div className='line-clamp-noColor'>\n                        {record.creator}\n                    </div>\n                </RLTooltip>\n            },\n            {\n                title: <span style={{ paddingLeft: 6 }}>操作</span>,\n                key: 'option',\n                width: '16%',\n                render: (text, record) => (\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\n                        {\n                            interfaces.INFO_CLASSIFY_EDIT && <RLButton\n                                type='link'\n                                label='编辑'\n                                onClick={e => {\n                                    e.stopPropagation()\n                                    this.props.changePage('edit', {\n                                        record,\n                                        page: this.state.infoClassifyListInfo.page\n                                    })\n                                }}\n                                style={{ color: '#8F1D22' }}\n                            />\n                        }\n                        {\n                            interfaces.INFO_CLASSIFY_DELETE && <RLButton\n                                type='link'\n                                label='删除'\n                                onClick={e => {\n                                    if (record.info_count !== 0) {\n                                        this.showModal({\n                                            title: '请先删除该分类下的资讯',\n                                            singleText: '确定',\n                                            size: 'small'\n                                        })\n                                    } else {\n                                        this.showModal({\n                                            content: '确认删除后，该资讯分类将被彻底删除，是否确认删除？',\n                                            title: '是否删除该资讯分类',\n                                            okText: '确定',\n                                            cancelText: '取消',\n                                            onOk: () => {\n                                                this.infoClassifyDelConfirm(record)\n                                            },\n                                            onCancel: () => { },\n                                            size: 'big'\n                                        })\n                                    }\n                                }}\n                                style={{ color: '#8F1D22' }}\n                            />\n                        }\n                    </div>\n                )\n            }\n        ]\n    }\n    componentDidMount() {\n        this.getInfoClassifyList()\n    }\n    componentWillUnmount() {\n\n    }\n\n    getInfoClassifyList({ sign, page = this.state.infoClassifyListInfo.page } = { sign: true, page: this.state.infoClassifyListInfo.page }) {\n        if (sign) {\n            this.setState({\n                getListLoading: true\n            })\n        }\n        actionInfoClassify.getInfoClassifyList({\n            page,\n            page_size: this.pageSize\n        }).then(res => {\n            if (res.code === 200) {\n                if (res.date && res.data.list.length === 0 && page > 1) {\n                    this.getInfoClassifyList({ page: page - 1 })\n                } else {\n                    let newState = {\n                        infoClassifyListInfo: {\n                            list: res.data.list,\n                            page,\n                            count: res.data.count,\n                            pageNum: Math.ceil(res.data.count / this.pageSize)\n                        }\n                    }\n                    this.setState(newState)\n                }\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        }).finally(() => {\n            this.setState({\n                getListLoading: false\n            })\n        })\n    }\n\n    // 更新显隐\n    updateValue = (record, value) => {\n        const params = {\n            id: record.id,\n            is_show: value ? 1 : 0\n        }\n        return actionInfoClassify.infoClassifyHide(params).then(res => {\n            if (res.code === 200) {\n                this.getInfoClassifyList({ sign: false })\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        })\n    }\n\n    // 删除\n    infoClassifyDelConfirm = (record) => {\n        const params = {\n            id: record.id\n        }\n        return actionInfoClassify.infoClassifyDelete(params).then(res => {\n            if (res.code === 200) {\n                this.getInfoClassifyList({ sign: false })\n                this.showToast({ type: 'success', content: '删除成功' })\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        })\n    }\n\n    getRightItems = () => {\n        return ([\n            interfaces.INFO_CLASSIFY_ADD && <RLButton\n                label='添加分类'\n                type='primary'\n                key='add'\n                onClick={() => {\n                    this.props.changePage('edit', {\n                        page: this.state.infoClassifyListInfo.page\n                    })\n                }}\n            />,\n            <RLButton\n                label='刷新'\n                key='refresh'\n                onClick={() => {\n                    this.getInfoClassifyList()\n                }}\n                style={{ marginLeft: 20 }}\n            />\n        ])\n    }\n\n    pageChange = (page, pageSize) => {\n        this.getInfoClassifyList({ page })\n    }\n\n    render() {\n        const { list, count, page } = this.state.infoClassifyListInfo\n        return (\n            <WindowContainer>\n                <div>\n                    <RLFilterTool leftItems={[]} rightItems={this.getRightItems} />\n                    <RLTable\n                        loading={this.state.getListLoading}\n                        dataSource={list}\n                        rowKey='id'\n                        columns={this.columns}\n                        paginationInfo={{\n                            total: count,\n                            pageSize: this.pageSize,\n                            onChange: this.pageChange,\n                            current: page\n                        }}\n                        rowClassName='rl-table-click-row'\n                    />\n                </div>\n            </WindowContainer>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props\n    }\n})(CmpInfoClassifyList)\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/seminar/mySeminar/components/CancelSeminar.js",["1385","1386","1387"],"import React, { Component } from 'react'\nimport { Modal, Button, message } from \"antd\"\nimport actionSeminar from '@actions/seminar/actionSeminar.js'\nimport BaseCmp from '@components/BaseCmp.js'\n\nexport default class CancelSeminar extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.state = {\n            disabled: 0\n        }\n    }\n    // 删除研讨会\n    seminarDelete = () => {\n        actionSeminar.seminarDelete({ meeting_id: this.props.isShow }).then(res => {\n            console.log('删除研讨会---res：', res)\n            if (res.code === 200) {\n                if (this.props.getSeminarList) {\n                    this.props.getSeminarList(this.props.pageCon.type, this.props.pageCon.page)\n                } else {\n                    this.props.changePage('list')\n                }\n                this.setState({\n                    disabled: 0\n                })\n                this.props.closeHandler()\n            } else {\n                this.showToast(res.msg)\n            }\n        })\n    }\n    // 结束研讨会\n    seminarClose = () => {\n        actionSeminar.seminarClose({ meeting_id: this.props.isShow }).then(res => {\n            console.log('结束研讨会---res：', res)\n            if (res.code === 200) {\n                if (this.props.getSeminarList) {\n                    this.props.getSeminarList(this.props.pageCon.type, this.props.pageCon.page)\n                } else {\n                    this.props.changePage('list')\n                }\n                this.setState({\n                    disabled: 0\n                })\n                this.props.closeHandler()\n            } else {\n                this.showToast(res.msg)\n            }\n        })\n    }\n\n    clickHandler = (type) => {\n        return () => {\n\n            switch (type) {\n                case \"cancel\":\n                    console.log(type);\n                    this.seminarDelete()\n                    break;\n                case \"end\":\n                    this.seminarClose()\n                    break;\n                case \"delete\":\n                    this.seminarDelete()\n                    break;\n                default:\n                    return\n            }\n        }\n    }\n\n\n    render() {\n        let { isShow, data, closeHandler } = this.props\n        return (\n            <Modal\n                title={data.title}\n                visible={isShow}\n                onCancel={closeHandler}\n                footer={null}\n                footer={\n                    <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: 'center' }}>\n                        <Button\n                            onClick={closeHandler}\n                            style={{\n                                width: 100,\n                                height: 40,\n                                marginRight: 30,\n                                display: \"flex\",\n                                justifyContent: \"center\",\n                                alignItems: \"center\",\n                                backgroundColor: \"#fff\",\n                                border: \"1px solid #dcdfe6\",\n                                color: \"#666666\",\n                                borderRadius: \"4px\"\n                            }\n                            }>{data.btn}</Button>\n                        <Button\n                            disabled={this.state.disabled}\n                            onClick={this.clickHandler(data.type)}\n                            style={{\n                                width: 100,\n                                height: 40,\n                                marginLeft: 30,\n                                display: \"flex\",\n                                justifyContent: \"center\",\n                                alignItems: \"center\",\n                                backgroundColor: \"#4d88fe\",\n                                border: \"1px solid rgba(0,0,0,0)\",\n                                color: \"#fff\",\n                                borderRadius: \"4px\"\n                            }}>{this.props.btn ? this.props.btn : data.title}</Button>\n                    </div>\n                }>\n                <p style={{ textAlign: \"center\" }}>{data.text}</p>\n            </Modal>\n        )\n    }\n}\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/infoManage/actionInfoClassify.js",["1388","1389","1390"],"import { getData } from '@/libs/utils.js'\nimport store from '@/store/index.js'\nimport actionTypes from '@/store/actionTypes.js'\nimport interfaces from '@/api/interfaces.js'\nimport config from '@/config.js'\n\nconst actionInfoClassify = {\n\n    // 资讯分类-列表\n    getInfoClassifyList(data) {\n        return getData({\n            method: 'get',\n            url: interfaces.INFO_CLASSIFY_LIST,\n            data\n        })\n    },\n    // 资讯分类-添加\n    infoClassifyAdd(data) {\n        return getData({\n            method: 'post',\n            url: interfaces.INFO_CLASSIFY_ADD,\n            data\n        })\n    },\n    // 资讯分类-编辑\n    infoClassifyEdit(data) {\n        return getData({\n            method: 'post',\n            url: interfaces.INFO_CLASSIFY_EDIT,\n            data\n        })\n    },\n    // 资讯分类-删除\n    infoClassifyDelete(data) {\n        return getData({\n            method: 'post',\n            url: interfaces.INFO_CLASSIFY_DELETE,\n            data\n        })\n    },\n    // 资讯分类-显示/隐藏\n    infoClassifyHide(data) {\n        return getData({\n            method: 'post',\n            url: interfaces.INFO_CLASSIFY_HIDE,\n            data\n        })\n    },\n    getAllInfoClassify() {\n        return getData({\n            method: 'get',\n            url: interfaces.INFO_CLASSIFY_ALL\n        })\n    }\n}\n\nexport default actionInfoClassify\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/libs/citys.js",[],["1391","1392"],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/InviteModal.js",["1393","1394"],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/GroupManage.js",["1395"],"import React from 'react'\nimport BaseCmp from '@components/BaseCmp.js'\nimport { connect } from 'react-redux'\nimport {\n    RLTable, RLButton, RLFilterTool, RLModal, RLForm, RLFormItem, RLInput, RLDropdown, RLSelect, RLTooltip\n} from '@components/index.js'\nimport actionGroupManage from '@actions/userManage/actionGroupManage.js'\nimport AddGroupUser from './components/groupManage/AddGroupUser.js'\nimport AddUser from '@/pages/common/meeting/AddUser.js'\nimport interfaces from '@/api/interfaces'\nimport './GroupManage.less'\nimport images from '@/libs/images/index.js'\n\nconst commonImg = images.commonImg\n\nclass GroupManage extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.state = {\n            empty: true, //成员组是否为空\n            // 群组列表\n            groupList: {\n                uuid: '',   // 修改群组（用户组成员修改群组）\n                data: []\n            },\n            // 群组成员列表\n            groupUserList: {\n                pageNum: 1,  // 总页数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: 1      // 当前第几页\n            },\n            // 非当前组成员列表\n            addGroupUserList: {\n                pageNum: 1,  // 总页数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: 1      // 当前第几页\n            },\n            more_group: {\n                uuid: '',   // 用户组id--点击左侧‘三个点’\n                title: '',   // 用户组title--点击左侧‘三个点’\n            },\n            group_uuid: '',   // 用户组id--点击左侧列表群组名称\n            group_title: '',   // 用户组名称--点击左侧列表群组名称\n            // 弹框\n            showModal: {\n                ADD_GROUP: false,   // 新建群组弹框\n                EDIT_GROUP: false,   // 编辑群组（群组名称修改）弹框\n                ADD_GROUP_USER: false,   // 添加成员\n                EDIT_GROUP_USER: false   // 修改群组（用户组成员修改群组）弹框\n            },\n            userList: [],   // 成员列表\n            selectUser: [],\n            addUserConfig: {\n                showSelectGroup: false,\n                selectType: 'checkbox',\n                originCanCancel: true,\n                returnStyle: 'object',\n                mustIdent: true\n            },\n            selectedMemberKeys: [],   // 选中的用户\n            getListLoading: true   // 获取列表loading\n        }\n\n        this.addGroupForm = React.createRef()\n        this.editGroupForm = React.createRef()\n        this.editGroupUserForm = React.createRef()\n\n        // table 字段\n        this.columns = [\n            {\n                title: '序号',\n                dataIndex: 'uuid',\n                key: 'uuid',\n                width: '10%',\n                render: (text, record, index) => {\n                    return (<div>\n                        {(this.state.groupUserList.page - 1) * this.pageSize + index + 1}\n                    </div>)\n                }\n            },\n            {\n                title: '姓名',\n                dataIndex: 'nickname',\n                key: 'nickname',\n                width: '14%'\n            },\n            {\n                title: '手机号',\n                dataIndex: 'mobile',\n                key: 'mobile',\n                width: '14%'\n            },\n            {\n                title: '邮箱',\n                dataIndex: 'email',\n                key: 'email',\n                width: '18%'\n            },\n            {\n                title: '机构名称',\n                dataIndex: 'company_name',\n                key: 'company_name',\n                width: '20%',\n                render: (text, record) => <RLTooltip placement=\"bottomLeft\" title={record.company_name}>\n                    <div className='line-clamp-noColor'>\n                        {record.company_name}\n                    </div>\n                </RLTooltip>\n            },\n            {\n                title: <span style={{ paddingLeft: 6 }}>操作</span>,\n                key: 'option',\n                width: '16%',\n                render: (text, record) => (\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\n                        {\n                            <RLButton\n                                type='link'\n                                label='删除'\n                                onClick={(e) => {\n                                    console.log('record', record)\n                                    this.showModal({\n                                        title: '是否移除该用户？',\n                                        content: '确认删除后，该用户将被移除此群组，是否确认删除？',\n                                        className: 'group-confirm-modal',\n                                        okText: '确认',\n                                        cancelText: '取消',\n                                        onOk: () => {\n                                            this.removeGroupUserConfirm(this.state.group_uuid, [record.uuid])\n                                        },\n                                        onCancel: () => { },\n                                        size: 'small'\n                                    })\n                                }}\n                            />\n                        }\n                    </div>\n                )\n            },\n        ]\n    }\n    componentDidMount() {\n        this.getGroupList(true);\n        // this.getGroupUserList()\n    }\n\n    // 获取群组列表\n    getGroupList() {\n        this.setState({\n            getListLoading: true\n        })\n        actionGroupManage.getGroupUserList({\n            type: 'group'\n        }).then(res => {\n            if (res.code === 200) {\n                let isEmpty = res.data.length === 0;\n                let item = res.data.find(item => item.uuid === this.state.groupList.uuid);\n\n                //如果当前群组为空\n                if(isEmpty){\n                    this.setState({\n                        empty: true,\n                        group_uuid: '',\n                        group_title: '',\n                        groupList: {\n                            uuid: '',\n                            data: []\n                        }\n                    });\n                }\n                //群组非空，并且当前已选中的群组不存在\n                else if( !isEmpty && !item && !this.state.groupList.uuid){\n                    this.setState({\n                        empty: false,\n                        group_uuid: res.data[0].uuid,\n                        group_title: res.data[0].title,\n                        groupList: {\n                            uuid: res.data[0].uuid,\n                            data: res.data\n                        }\n                    }, () => {\n                        this.getGroupUserList();\n                    });\n                }\n                //群组非空，并且当前选中的群组存在\n                else if(!isEmpty && item){\n                    this.setState({\n                        empty: false,\n                        group_uuid: item.uuid,\n                        group_title: item.title,\n                        groupList: {\n                            uuid: item.uuid,\n                            data: res.data\n                        }\n                    })\n                }\n            }\n        }).finally(() => {\n            this.setState({\n                getListLoading: false\n            })\n        })\n    }\n\n    // 获取群组成员列表\n    getGroupUserList({ page = this.state.groupUserList.page } = { page: this.state.groupUserList.page }) {\n        this.setState({\n            getListLoading: true\n        })\n        actionGroupManage.getGroupUserList({\n            type: 'user',\n            uuid: this.state.group_uuid,\n            page,\n            pagesize: this.pageSize\n        }).then(res => {\n            if (res.code === 200) {\n                if (res.data.list.length === 0 && page > 1) {\n                    this.getGroupUserList({ page: page - 1 })\n                } else {\n                    let newState = {\n                        groupUserList: {\n                            list: res.data.list,\n                            page,\n                            count: res.data.count,\n                            pageNum: Math.ceil(res.data.count / this.pageSize)\n                        },\n                        userList: res.data.list\n                    }\n                    this.setState(newState)\n                }\n            }\n        }).finally(() => {\n            this.setState({\n                getListLoading: false\n            })\n        })\n    }\n\n    // 获取非当前组成员列表\n    getAddGroupUserList({ page = this.state.addGroupUserList.page } = { page: this.state.addGroupUserList.page }) {\n        this.setState({\n            getListLoading: true\n        })\n        actionGroupManage.getGroupUserList({\n            type: 'add',\n            uuid: this.state.group_uuid,\n            page,\n            pagesize: this.pageSize\n        }).then(res => {\n            if (res.code === 200) {\n                if (res.data.list.length === 0 && page > 1) {\n                    this.getGroupUserList({ page: page - 1 })\n                } else {\n                    let newState = {\n                        addGroupUserList: {\n                            list: res.data.list,\n                            page,\n                            count: res.data.count,\n                            pageNum: Math.ceil(res.data.count / this.pageSize)\n                        }\n                    }\n                    this.setState(newState)\n                }\n            }\n        }).finally(() => {\n            this.setState({\n                getListLoading: false\n            })\n        })\n    }\n\n    // 新建群组\n    addGroupConfirm = (value) => {\n        console.log('value', value)\n        actionGroupManage.groupAdd({\n            title: value.title\n        }).then(res => {\n            if (res.code === 200) {\n                this.setState({\n                    showModal: {\n                        ...this.state.showModal,\n                        ADD_GROUP: false\n                    }\n                }, () => {\n                    this.getGroupList();\n                })\n                this.showToast({ type: 'success', content: '创建成功' })\n            } else {\n                this.showToast({ type: 'error', content: '创建失败' })\n            }\n        })\n    }\n\n    // 编辑群组（群组名称修改）\n    editGroupConfirm = (value) => {\n        console.log('value', value)\n        actionGroupManage.groupEdit({\n            uuid: this.state.more_group.uuid,\n            title: value.title\n        }).then(res => {\n            if (res.code === 200) {\n                this.setState({\n                    showModal: {\n                        ...this.state.showModal,\n                        EDIT_GROUP: false\n                    }\n                }, () => {\n                    this.getGroupList();\n                })\n                this.showToast({ type: 'success', content: '修改成功' })\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        })\n    }\n\n    // 删除群组\n    removeGroupConfirm = (uuid) => {\n        actionGroupManage.groupRemove({\n            uuid\n        }).then(res => {\n            if (res.code === 200) {\n                this.getGroupList()\n                this.showToast({ type: 'success', content: '删除成功' })\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        })\n    }\n\n    // 用户组人员移除\n    removeGroupUserConfirm = (group_uuid, users) => {\n        actionGroupManage.groupUserRemove({\n            group_uuid,\n            users\n        }).then(res => {\n            if (res.code === 200) {\n                this.getGroupUserList()\n                // 清除选中\n                this.setState({\n                    selectedMemberKeys: []\n                })\n                this.showToast({ type: 'success', content: '移除成功' })\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        })\n    }\n\n    // 修改群组（用户组成员修改群组）\n    editGroupUserConfirm = (value) => {\n        const { selectedMemberKeys } = this.state\n        actionGroupManage.groupUserEdit({\n            group_uuid: value.group_uuid,\n            current: this.state.group_uuid,\n            users: selectedMemberKeys\n        }).then(res => {\n            if (res.code === 200) {\n                this.setState({\n                    selectedMemberKeys: [],   // 清除选中\n                    showModal: {\n                        ...this.state.showModal,\n                        EDIT_GROUP_USER: false\n                    }\n                }, () => {\n                    this.getGroupUserList()\n                })\n                this.showToast({ type: 'success', content: '修改成功' })\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        })\n    }\n\n    // 新建群组弹框渲染\n    renderAddGroup = () => {\n        const { ADD_GROUP } = this.state.showModal\n        return (\n            <RLModal\n                title='新建群组'\n                className='modal-approval'\n                maskClosable={false}\n                visible={ADD_GROUP}\n                footer={null}\n                onCancel={() => {\n                    this.setState({\n                        showModal: {\n                            ...this.state.showModal,\n                            ADD_GROUP: false\n                        }\n                    })\n                }}\n            >\n                <div style={{ paddingLeft: 20, paddingRight: 20 }}>\n                    <RLForm\n                        validateTrigger='onBlur'\n                        onFinish={this.addGroupConfirm}\n                        ref={this.addGroupForm}\n                    >\n                        <RLFormItem\n                            colon={false}\n                            label=\"群组名称\"\n                            name='title'\n                            rules={[\n                                {\n                                    required: true,\n                                    message: '请输入群组名称',\n                                },\n                                {\n                                    max: 20,\n                                    message: '群组名称最多20个字符'\n                                }\n                            ]}\n                        >\n                            <RLInput\n                                placeholder='请输入群组名称'\n                                onChange={(e) => {\n                                    \n                                }}\n                            >\n                            </RLInput>\n                        </RLFormItem>\n                    </RLForm>\n                </div>\n                <div className='modal-btnContainer'>\n                    <RLButton label='取消'\n                        onClick={() => {\n                            this.setState({\n                                showModal: {\n                                    ...this.state.showModal,\n                                    ADD_GROUP: false\n                                }\n                            })\n                        }}\n                    />\n                    <RLButton\n                        label='确定'\n                        type='primary'\n                        style={{ marginLeft: 50 }}\n                        onClick={() => {\n                            this.addGroupForm.current.submit()\n                        }}\n                    />\n                </div>\n            </RLModal>\n        )\n    }\n\n    // 编辑群组（群组名称修改）弹框渲染\n    renderEditGroup = () => {\n        const { EDIT_GROUP } = this.state.showModal\n        return (\n            <RLModal\n                title='编辑群组'\n                className='modal-approval'\n                maskClosable={false}\n                visible={EDIT_GROUP}\n                footer={null}\n                onCancel={() => {\n                    this.setState({\n                        showModal: {\n                            ...this.state.showModal,\n                            EDIT_GROUP: false\n                        }\n                    })\n                }}\n            >\n                <div style={{ paddingLeft: 20, paddingRight: 20 }}>\n                    <RLForm\n                        validateTrigger='onBlur'\n                        onFinish={this.editGroupConfirm}\n                        initialValues={this.state.more_group}\n                        ref={this.editGroupForm}\n                    >\n                        <RLFormItem\n                            colon={false}\n                            label=\"群组名称\"\n                            name='title'\n                            rules={[\n                                {\n                                    required: true,\n                                    message: '请输入群组名称',\n                                },\n                                {\n                                    max: 20,\n                                    message: '群组名称最多20个字符'\n                                }\n                            ]}\n                        >\n                            <RLInput\n                                placeholder='请输入群组名称'\n                                defaultValue={this.state.more_group.title}\n                                onChange={(e) => {\n\n                                }}\n                            >\n                            </RLInput>\n                        </RLFormItem>\n                    </RLForm>\n                </div>\n                <div className='modal-btnContainer'>\n                    <RLButton label='取消'\n                        onClick={() => {\n                            this.setState({\n                                showModal: {\n                                    ...this.state.showModal,\n                                    EDIT_GROUP: false\n                                }\n                            })\n                        }}\n                    />\n                    <RLButton\n                        label='确定'\n                        type='primary'\n                        style={{ marginLeft: 50 }}\n                        onClick={() => {\n                            this.editGroupForm.current.submit()\n                        }}\n                    />\n                </div>\n            </RLModal>\n        )\n    }\n\n    // 修改群组（用户组成员修改群组）弹框渲染\n    renderEditGroupUser = () => {\n        const { EDIT_GROUP_USER } = this.state.showModal\n        const { uuid, data} = this.state.groupList\n        return (\n            <RLModal\n                title='修改群组'\n                className='modal-approval'\n                maskClosable={false}\n                visible={EDIT_GROUP_USER}\n                footer={null}\n                onCancel={() => {\n                    this.setState({\n                        showModal: {\n                            ...this.state.showModal,\n                            EDIT_GROUP_USER: false\n                        }\n                    })\n                }}\n            >\n                <div style={{ paddingLeft: 20, paddingRight: 20 }}>\n                    <RLForm\n                        validateTrigger='onBlur'\n                        onFinish={this.editGroupUserConfirm}\n                        ref={this.editGroupUserForm}\n                    >\n                        <RLFormItem\n                            colon={false}\n                            label=\"选择群组\"\n                            name='group_uuid'\n                            rules={[\n                                {\n                                    required: true,\n                                    message: '请选择群组',\n                                }\n                            ]}\n                        >\n                            <RLSelect\n                                options={data}\n                                placeholder='请选择群组'\n                                valuekey='uuid'\n                                labelkey='title'\n                                value={uuid}\n                            />\n                        </RLFormItem>\n                    </RLForm>\n                </div>\n                <div className='modal-btnContainer'>\n                    <RLButton label='取消'\n                        onClick={() => {\n                            this.setState({\n                                showModal: {\n                                    ...this.state.showModal,\n                                    EDIT_GROUP_USER: false\n                                }\n                            })\n                        }}\n                    />\n                    <RLButton\n                        label='确定'\n                        type='primary'\n                        style={{ marginLeft: 50 }}\n                        onClick={() => {\n                            this.editGroupUserForm.current.submit()\n                        }}\n                    />\n                </div>\n            </RLModal>\n        )\n    }\n\n    // 左侧群组名称后的‘更多’操作\n    leftMoreOperate = (item) => {\n        let btns = [];\n        if(interfaces.GROUNP_EDIT){\n            btns.push({ label: '编辑群组', key: 'edit', value: item.uuid });\n        }\n        if(interfaces.GROUP_DELETE){\n            btns.push({ label: '删除群组', key: 'remove', value: item.uuid })\n        }\n        return (\n            <RLDropdown\n                subBtns={btns}\n                label={\n                    <img alt=''\n                        style={{ height: 16, width: 16, marginRight: 3, cursor: 'pointer' }}\n                        src={commonImg.more}\n                    />\n                }\n                onClick={(e, key, value) => {\n                    e.stopPropagation()\n                    const groupObj = this.state.groupList.data.find(item => item.uuid === value)\n                    switch (key) {\n                        case 'edit':\n                            // 编辑群组（群组名称修改）\n                            this.setState({\n                                more_group: {\n                                    title: (groupObj && groupObj.title) || '',\n                                    uuid: value\n                                },\n                                showModal: {\n                                    ...this.state.showModal,\n                                    EDIT_GROUP: true\n                                }\n                            })\n                            break\n                        case 'remove':\n                            // 删除群组\n                            this.showModal({\n                                title: '是否删除该群组？',\n                                content: '确认删除后，该群组将被解散，是否确认删除？',\n                                okText: '确认',\n                                cancelText: '取消',\n                                onOk: () => {\n                                    this.removeGroupConfirm(value)\n                                },\n                                onCancel: () => { },\n                                size: 'small'\n                            })\n                            break\n                        default:\n                            break\n                    }\n                }}\n            />\n        )\n    }\n\n    // 左侧群组列表及操作\n    leftGroup = () => {\n        return (\n            <div style={{ width: 220, borderRight: '1px solid #e5e5e5' }}>\n                <div className=\"groupManageTitle\" >\n                    <div style={{ fontSize: 18, fontWeight: '400', color: '#333333' }}>群组管理</div>\n                    { \n                        interfaces.GROUNP_ADD && <img alt=''\n                            style={{ height: 16, width: 16, cursor: 'pointer' }}\n                            src={commonImg.add}\n                            onClick={(e) => {\n                                // 新建群组\n                                this.setState({\n                                    showModal: {\n                                        ...this.state.showModal,\n                                        ADD_GROUP: true\n                                    }\n                                })\n                            }}\n                        />\n                    }\n                </div>\n                <div style={{ display: 'flex', flexDirection: 'column' }}>\n                    {\n                        this.state.groupList.data.map(item => {\n                            return <div className={item.uuid === this.state.group_uuid ? 'groupRow active': 'groupRow'}\n                                onClick={(e) => {\n                                    this.setState({\n                                        group_uuid: item.uuid,\n                                        group_title: item.title\n                                    }, () => {\n                                        this.getGroupUserList()\n                                    })\n                                }}\n                            >\n                                <img alt=''\n                                    style={{ marginLeft: 16, marginRight: 10, height: 16, width: 16 }}\n                                    src={commonImg.groupUser}\n                                />\n                                <span style={{ flex: 1, whiteSpace: 'nowrap', textOverflow: 'ellipsis', overflow: 'hidden' }}>\n                                    {item.title}\n                                </span>\n                                { (interfaces.GROUNP_EDIT || interfaces.GROUP_DELETE) && this.leftMoreOperate(item) }\n                            </div>\n                        })\n                    }\n                </div>\n            </div>\n        )\n    }\n\n    // 列表操作按钮\n    getLeftItems = () => {\n        const { group_uuid, selectedMemberKeys } = this.state\n        return ([\n            interfaces.GROUNP_PARTICIPANT_ADD && <RLButton\n                label='+添加成员'\n                type='primary'\n                key='add'\n                onClick={() => {\n                    this.toggleAddGroupUserModal()\n                }}\n                style={{ marginRight: 10 }}\n            />,\n            interfaces.LWM_REMOVE_GROUNP_PARTICIPANT_ADD && <RLButton\n                label='移除成员'\n                type='default'\n                key='remove'\n                disabled={selectedMemberKeys.length <= 0}\n                onClick={() => {\n                    this.showModal({\n                        title: '是否移除该用户？',\n                        content: '确认删除后，该用户将被移除此群组，是否确认删除？',\n                        okText: '确认',\n                        cancelText: '取消',\n                        onOk: () => {\n                            this.removeGroupUserConfirm(group_uuid, selectedMemberKeys)\n                        },\n                        onCancel: () => {},\n                        size: 'small'\n                    })\n                }}\n                style={{ marginRight: 10 }}\n            />,\n            interfaces.LWM_EDIT_GROUNP_PARTICIPANT_ADD && <RLButton\n                label='修改群组'\n                type='default'\n                key='edit'\n                disabled={selectedMemberKeys.length <= 0}\n                onClick={() => {\n                    this.setState({\n                        showModal: {\n                            ...this.state.showModal,\n                            EDIT_GROUP_USER: true\n                        }\n                    })\n                }}\n            />\n        ])\n    }\n\n    // 成员添加\n    addSuccess = (data) => {\n        let originUsers = this.state.userList\n        let returnUsers = data.map(item => {\n            return {\n                'id': item.id,\n                'uuid': item.uuid,\n                'nickname': item.nickname\n            }\n        })\n        let newUsers = []\n        for (let user of returnUsers) {\n            let index = originUsers.findIndex(item => item.id === user.id)\n            if (index < 0) {\n                newUsers.push(user)\n            }\n        }\n        let finalUsers = originUsers.concat(newUsers)\n        let userArr = []\n        for (let user of finalUsers) {\n            userArr.push(user.uuid)\n        }\n        console.log(`userArr--------------`, userArr)\n        this.setState({\n            userList: finalUsers,\n            selectUser: userArr\n        }, () => {\n            actionGroupManage.groupUserAdd({\n                group_uuid: this.state.group_uuid,\n                users: this.state.selectUser\n            }).then(res => {\n                if (res.code === 200) {\n                    this.getGroupUserList()\n                    this.showToast({ type: 'success', content: '添加成功' })\n                } else {\n                    this.showToast({ type: 'error', content: res.msg })\n                }\n            }).finally(() => {\n                this.setState({\n                    addLoading: false\n                })\n            })\n        })\n\n    }\n\n    onSelectChange = (selectedRowKeys, selectedRows) => {\n        console.log(selectedRowKeys, selectedRows)\n        this.setState({\n            selectedMemberKeys: selectedRowKeys\n        })\n    }\n\n    pageChange = (page, pageSize) => {\n        console.log('翻页了', page, pageSize)\n        this.getGroupUserList({ page })\n    }\n\n    toggleAddGroupUserModal = () => {\n        this.setState({\n            showModal: {\n                ...this.state.showModal,\n                ADD_GROUP_USER: !this.state.showModal.ADD_GROUP_USER\n            }\n        }, () => {\n            if (!this.state.showModal.ADD_GROUP_USER) {\n                this.getGroupUserList()\n            }\n        })\n    }\n\n    render() {\n        const { getListLoading, group_title, groupUserList } = this.state\n        const { showSelectGroup, selectType, originCanCancel, returnStyle, mustIdent } = this.state.addUserConfig\n        return (\n            <div style={{ display: 'flex', flexDirection: 'row', height: '100%' }}>\n                { this.leftGroup() }\n               {!this.state.empty ? \n                    <div style={{ flex: 1 }}>\n                        <div className=\"groupTitleRight\">\n                            <div style={{ marginRight: 10 }}>{group_title}</div>\n                            <img alt=''\n                                style={{ height: 14, width: 14, marginRight: 4 }}\n                                src={commonImg.userCount}\n                            />\n                            <div>{groupUserList.count}</div>\n                        </div>\n                        <div style={{ marginLeft: 21, marginRight: 21, paddingBottom: 21 }}>\n                            <RLFilterTool leftItems={this.getLeftItems} />\n                            <RLTable\n                                loading={getListLoading}\n                                dataSource={groupUserList.list}\n                                rowKey='uuid'\n                                columns={this.columns}\n                                rowSelection={{\n                                    selectedRowKeys: this.state.selectedMemberKeys,\n                                    type: 'checkbox',\n                                    onChange: this.onSelectChange\n                                }}\n                                paginationInfo={{\n                                    total: groupUserList.count,\n                                    pageSize: this.pageSize,\n                                    onChange: this.pageChange,\n                                    current: groupUserList.page\n                                }}\n                                rowClassName='rl-table-click-row'\n                            />\n                        </div>\n                    </div>  : null}\n                \n                {/* 弹框 */}\n                {\n                    this.state.showModal.ADD_GROUP && this.renderAddGroup()\n                }\n                {\n                    this.state.showModal.EDIT_GROUP &&  this.renderEditGroup()\n                }\n                {/* {\n                    this.state.showModal.ADD_GROUP_USER &&\n                    <AddGroupUser\n                        toggleAddGroupUserModal={this.toggleAddGroupUserModal}\n                        uuid={this.state.group_uuid}\n                    />\n                } */}\n                {\n                    this.state.showModal.ADD_GROUP_USER && <AddUser\n                        visible={this.state.showModal.ADD_GROUP_USER}\n                        showSelectGroup={showSelectGroup}\n                        selectType={selectType}\n                        originArr={this.state.userList}\n                        originCanCancel={originCanCancel}\n                        returnStyle={returnStyle}\n                        mustIdent={mustIdent}\n                        onCancel={() => {\n                            this.setState({\n                                showModal: {\n                                    ...this.state.showModal,\n                                    ADD_GROUP_USER: false\n                                }\n                            })\n                        }}\n                        onAdd={data => {\n                            this.addSuccess(data)\n                        }}\n                    />\n                }\n                {\n                    this.state.showModal.EDIT_GROUP_USER && this.renderEditGroupUser()\n                }\n            </div>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props\n    }\n})(GroupManage)\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/PhoneList.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/UserFieldsSetting.js",["1396","1397","1398"],"import BaseCmp from '@components/BaseCmp.js'\nimport { connect } from 'react-redux'\nimport CmpUserFieldsSetting from './components/userFieldsSetting/CmpUserFieldsSetting.js'\n\nimport CmpAuthed from './components/unauthedUser/CmpAuthed.js'\n\nimport './UserFieldsSetting.less'\n\nimport { Route } from 'react-router-dom';\n\nexport default class UserFieldsSetting extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.state = {\n            props\n        }\n    }\n\n    changePage = (page, props = {}) => {\n        this.setState({\n            showPage: page,\n            props\n        })\n    }\n\n    render() {\n\n        return (\n            <div style={{ flex: 1, display: 'flex', flexDirection: 'column', overflow: 'auto' }}>\n                <CmpUserFieldsSetting\n                    changePage={this.changePage}\n                    {...this.state.props}\n                />\n            </div>\n        )\n    }\n}\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/VODManage/VideoManage.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/VODManage/VODManage.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/UnauthedUserList.js",["1399","1400"],"import BaseCmp from '@components/BaseCmp.js'\nimport { connect } from 'react-redux'\nimport CmpUnauthedUserList from './components/unauthedUser/CmpUnauthedUserList.js'\nimport CmpAuthedDetail from './components/unauthedUser/CmpAuthedDetail.js'\nimport CmpAuthed from './components/unauthedUser/CmpAuthed.js'\n\nimport './UnauthedUserList.less'\n\nimport { Route } from 'react-router-dom';\n\nexport default class UnauthedUserList extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.state = {\n            showPage: 'list',   // 要显示的页面 list：认证列表/detail：详情/approval：认证页面\n            props\n        }\n    }\n\n    changePage = (page, props = {}) => {\n        this.setState({\n            showPage: page,\n            props\n        })\n    }\n\n    render() {\n        let showCmp\n        if (this.state.showPage === 'list') {\n            showCmp = <CmpUnauthedUserList\n                changePage={this.changePage}\n                {...this.state.props}\n            />\n        } else if (this.state.showPage === 'detail') {\n            showCmp = <CmpAuthedDetail\n                changePage={this.changePage}\n                {...this.state.props}\n            />\n        } else if (this.state.showPage === 'approval') {\n            showCmp = <CmpAuthed\n                changePage={this.changePage}\n                {...this.state.props}\n            />\n        }\n\n        return (\n            <div style={{ flex: 1, display: 'flex', flexDirection: 'column', overflow: 'auto' }}>\n                {showCmp}\n            </div>\n        )\n    }\n}\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/AuthorityManage.js",["1401","1402","1403","1404","1405","1406","1407","1408","1409","1410","1411"],"import BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport {\n    RLInput, RLButton, RLDisplayBoard, RLForm, RLFormItem, RLRadioGroup\n} from '@components/index.js'\n\nimport actionUserList from '@actions/userManage/actionUserList.js'\nimport commonAction from '@actions/commonActions'\nimport utils from '@/libs/utils.js'\nimport interfaces from '@/api/interfaces';\n\nimport CmpRoleEdit from './components/authorityManage/CmpRoleEdit.js';\nimport CmpRoleDetail from './components/authorityManage/CmpRoleDetail.js';\nimport CmpRoleList from './components/authorityManage/CmpRoleList.js';\nimport CmpMemberList from './components/authorityManage/CmpMemberList.js';\nclass AuthorityManage extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.state = {\n            showPage: 'list',  \n            props\n        };\n    }\n    changePage = (page, props = {}) => {\n        this.setState({\n            showPage: page,\n            props\n        })\n    }\n    render() {\n        let showCmp\n        if (this.state.showPage === 'list') {\n            showCmp = <CmpRoleList\n                changePage={this.changePage}\n                {...this.state.props}\n            />\n        } else if (this.state.showPage === 'detail') {\n            showCmp = <CmpRoleDetail\n                changePage={this.changePage}\n                {...this.state.props}\n            />\n        } else if (this.state.showPage === 'edit') {\n            showCmp = <CmpRoleEdit\n                changePage={this.changePage}\n                {...this.state.props}\n            />\n        }else if(this.state.showPage === 'member'){\n            showCmp = <CmpMemberList\n                changePage={this.changePage}\n                {...this.state.props}\n            />\n        }\n        return (\n            <div style={{ flex: 1, display: 'flex', flexDirection: 'column', overflow: 'auto' }}>\n                {showCmp}\n            </div>\n\n        )\n\n    }\n\n}\nexport default connect((store, props) => {\n    return {\n        ...props,\n        // roleList: store.roleManage.roleList,\n        // planAvailable: store.userList.planAvailable\n    }\n})(AuthorityManage)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/UserList.js",["1412"],"import BaseCmp from '@components/BaseCmp.js'\nimport { connect } from 'react-redux'\n\nimport './UserList.less'\nimport CmpUserEdit from './components/userList/CmpUserEdit.js'\nimport CmpUserList from './components/userList/CmpUserList.js'\nimport CmpUserDetail from './components/userList/CmpUserDetail.js'\nimport CmpUserImport from './components/userList/CmpUserImport.js';\n\nimport { Route } from 'react-router-dom';\n\nclass UserList extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.state = {\n            showPage: 'list',     // 要现实的页面appoint：预约会议/detail：会议详情/list：会议列表\n            props\n        };\n    }\n    changePage = (page, props = {}) => {\n        this.setState({\n            showPage: page,\n            props\n        })\n    }\n    render() {\n        let showCmp\n        if (this.state.showPage === 'list') {\n            showCmp = <CmpUserList\n                changePage={this.changePage}\n                {...this.state.props}\n            />\n        } else if (this.state.showPage === 'detail') {\n            showCmp = <CmpUserDetail\n                changePage={this.changePage}\n                {...this.state.props}\n            />\n        } else if (this.state.showPage === 'edit') {\n            showCmp = <CmpUserEdit\n                changePage={this.changePage}\n                {...this.state.props}\n            />\n        }\n        else if(this.state.showPage === 'batch_import'){\n            showCmp = <CmpUserImport\n                changePage={this.changePage}\n                {...this.state.props}\n            />\n        }\n        return (\n            <div style={{ flex: 1, display: 'flex', flexDirection: 'column', overflow: 'auto' }}>\n                {showCmp}\n            </div>\n\n        )\n\n    }\n\n}\n// export default UserList\nexport default connect((store, props) => {\n    return {\n        ...props,\n        userList: store.userList.allUserInfo.list,\n        roleList: store.roleManage.roleList,\n    }\n})(UserList)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/personalInfo/PersonalInfo.js",["1413","1414","1415","1416","1417","1418","1419","1420"],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/common/meeting/RLTree.js",["1421"],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/phoneList/CmpPhoneList.js",["1422","1423","1424","1425","1426","1427","1428","1429","1430","1431","1432","1433","1434","1435","1436","1437","1438","1439","1440"],"import { createRef } from 'react';\nimport BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport { RLInput, RLButton, RLSelect, RLTable, RLFilterTool, RLTooltip, RLDatePicker, RLModal, RLForm, RLFormItem, RLRadioGroup, RLTextarea, RLCheckbox } from '@components/index.js'\nimport actionPhoneList from '@actions/userManage/actionPhoneList.js'\nimport actionRoleManage from '@actions/userManage/actionRoleManage.js'\n// import '../../userList/UserList.less'\nimport interfaces from '@/api/interfaces'\nimport utils, { downloadFile } from '@/libs/utils.js'\nimport eventBus from '@/libs/EventBus.js'\nimport config from '@/config.js';\nimport { DatePicker, Input } from 'antd';\nimport axios from 'axios';\nimport moment from 'moment';\n\nclass CmpPhoneList extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.state = {\n            phoneListInfo: {\n                pageNum: 1,  // 总叶数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: props.phonePage || 1,     // 当前第几页\n            },\n        }\n\n        this.columns = [\n            {\n                title: '固话号码',\n                dataIndex: 'number',\n                key: 'number',\n                width: '25%',\n            },\n          \n            {\n                title: '机构名称',\n                dataIndex: 'company',\n                key: 'company',\n                width: '25%'\n            },\n            {\n                title: '上传时间',\n                dataIndex: 'create_at',\n                key: 'create_at',\n                width: '25%',\n                render: (text,record)=>{\n                    return <div>{moment(Number.parseInt(record.create_at)*1000).format('YYYY-MM-DD')}</div>\n                }\n            },\n            {\n                title: <span style={{ paddingLeft: 6 }}>操作</span>,\n                key: 'option',\n                width: '25%',\n                render: (text, record) => (\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\n                        {\n                            interfaces.PHONE_DELETE &&\n                            (\n                                <RLButton\n                                    type='link' label='删除'\n                                    onClick={(e) => {\n                                        e.stopPropagation()\n                                        this.delPhone(record)\n                                    }}\n                                    style={{color:'#8F1D22'}}\n                                />\n                            )\n                        }\n                    </div>\n                )\n            },\n        ];\n\n        this.getPhoneList();\n    }\n    componentWillMount() {\n\n    }\n    componentWillUnmount() {\n        \n    }\n   \n    // 删除固话\n    delPhone = (record) => {\n        this.showModal({\n            content: '删除后信息不可恢复。',\n            title: '是否删除该固话号码',\n            okText: '删除',\n            cancelText: '取消',\n            onOk: () => {\n                return this.phoneDelConfirm(record);\n            },\n            onCancel: () => { },\n            size: 'big'\n        })\n    }\n    \n    phoneDelConfirm = (record) => {\n\n        return actionPhoneList.phoneDel({id: record.id}).then(res => {\n            if (res.code === 200) {\n                this.showToast({ type: 'success', content: '删除成功' });\n                this.getPhoneList();\n            } else {\n                this.showToast({ type: 'error', content: '删除失败' })\n            }\n        })\n    }\n\n    getPhoneList({ page } = { page: this.state.phoneListInfo.page }) {\n        this.setState({\n            getListLoading: true\n        })\n        actionPhoneList.getPhoneList({\n            page,\n            page_size: this.pageSize\n        }).then(res => {\n            if (res.code === 200) {\n                if (res.date && res.data.list.length === 0 && page > 1) {\n                    this.getPhoneList({ page: page - 1 })\n                } else {\n                    let newState = {\n                        phoneListInfo: {\n                            list: res.data.list,\n                            page,\n                            count: res.data.count,\n                            pageNum: Math.ceil(res.data.count / this.pageSize)\n                        }\n                    }\n                    this.setState(newState)\n                }\n            }\n        }).finally(() => {\n            this.setState({\n                getListLoading: false\n            })\n        })\n    }\n    getRightItems = ()=>{\n        return [\n            <RLButton \n                label=\"批量导入\"\n                type=\"primary\"\n                onClick={()=>{\n                    this.props.changePage('import',{\n                        phonePage: this.state.phoneListInfo.page\n                    })\n                }}\n            />\n        ]\n    }\n\n    onSelectChange = (selectedRowKeys, selectedRows) => {\n        this.setState({\n            selectedMemberKeys: selectedRowKeys,\n        })\n    }\n    pageChange = (page, pageSize) => {\n        this.getPhoneList({ page })\n    }\n\n    render() {\n        return (\n            <WindowContainer title={this.pageTitle}>\n                <div className='content-user'>\n                    <RLFilterTool leftItems={[]} rightItems={this.getRightItems} />\n                    <RLTable\n                        loading={this.state.getListLoading}\n                        dataSource={this.state.phoneListInfo.list}\n                        rowKey='uuid'\n                        columns={this.columns}\n                        paginationInfo={{\n                            selectedRowKeys: this.state.selectedMemberKeys,\n                            total: this.state.phoneListInfo.count,\n                            pageSize: this.pageSize,\n                            onChange: this.pageChange,\n                            current: this.state.phoneListInfo.page\n                        }}\n                        rowClassName='rl-table-click-row'\n                    />\n                </div>\n            </WindowContainer>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props,\n    }\n})(CmpPhoneList)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/userManage/actionUserList.js",["1441","1442"],"import { getData, getFile } from '@/libs/utils.js'\nimport store from '@/store/index.js'\nimport actionTypes from '@/store/actionTypes.js'\nimport interfaces from '@/api/interfaces'\nimport config from '@/config.js'\nconst actionUserList = {\n    /**\n     * 获取用户列表\n     * param1 active: Number 0/1\n     * param2 role_id: String\n     * param3 keyword: string\n    */\n    getUserList(data) {\n        return getData({ method: 'get', url: interfaces.USER_LIST, data: data})\n    },\n    getUserDetail(data){\n        return getData({method: 'post', url: interfaces.GET_USER_DETAIL, data: data})\n    },\n    getApprovalDetail(uid){\n        return getData({ method: 'post', url: interfaces.APPROVE_DETAIL, data: {uuid: uid}})\n    },\n    // 获取所有用户\n    getAllUserList(keyword) {\n        return getData({\n            method: 'get',\n            url: interfaces.USER_LIST,\n            data: { status: 1, keyword, pagesize: 99999, page: 1 }\n        }).then(res => {\n            if (res.code === 200) {\n                let users = res.data.list.map(user => {\n                    user.type = 'file'\n                    user.name = user.nickname\n                    return user\n                })\n                store.dispatch({\n                    type: actionTypes.INIT_ALL_USERS,\n                    data: {\n                        list: users,\n                        count: res.data.count\n                    }\n                });\n                return users\n            }\n        })\n    },\n    getFieldsSetting(){\n        return getData({ \n            method: 'post', url: interfaces.FIELD_SETTING_LIST, data: {type: 'register'}\n        })\n    },\n    /**\n     * \n     * @param {*} uidList \n     */\n    userApprove(data){\n        return getData({\n            method: 'post', url: interfaces.USER_APPROVE, data: data\n        })\n    },\n    /**\n     * 删除用户\n    */\n    userDel( uidList ) {\n        return getData({\n            method: 'post', url: interfaces.USER_DELETE, data: { users: uidList }\n        })\n    },\n    /**\n     * 添加用户\n    */\n    addUser(data) {\n        return getData({\n            method: 'post',\n            url: interfaces.USER_ADD,\n            data: data\n        })\n    },\n    /**\n     * 编辑用户\n    */\n    editUser(data) {\n        return getData({ method: 'post', url: interfaces.USER_EDIT, data: data})\n    },\n\n    userExport(users){\n        // window.open(config.requestHosts + interfaces.USER_EXPORT + '?users=' + users);\n        return getData({ \n            method: 'post',\n            url: interfaces.USER_EXPORT,\n            data: {users: users},\n            responseType: 'blob'\n        })\n    },\n\n    downloadTemplate(){\n        let link = document.createElement('a');\n        link.style.display = 'none';\n        link.href = '';\n        link.setAttribute('download', '导入用户模版.xlsx');\n        document.body.appendChild(link);\n        link.click();\n    },\n\n    sendEmail(data ){\n        return getData({ method:'post', url: interfaces.USER_SEND_EMAIL, data: data})\n    },\n\n    uploadPicture(data){\n        return getData({method:'post', url: interfaces.FilE_UPLOAD, data: data})\n    },\n\n    userImport(data){\n        return getData({method:'POST', url: interfaces.USER_IMPORT, data: data})\n    }\n}\nexport default actionUserList","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/unauthedUser/CmpAuthedDetail.js",["1443","1444","1445","1446","1447","1448","1449"],"import BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport {\n    RLInput, RLButton, RLDisplayBoard\n} from '@components/index.js'\n\nimport actionUnauthedUserList from '@actions/userManage/actionUnauthedUserList.js'\nimport commonAction from '@actions/commonActions'\nimport utils from '@/libs/utils.js'\nimport interfaces from '@/api/interfaces'\nimport images from '@/libs/images/index.js'\nimport CmpFile from '@/pages/marketingTool/components/QAManage/CmpFile.js';\nconst commonImg = images.commonImg\n\nclass CmpAuthedDetail extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.uuid = props.uuid\n        this.approvalId = props.approvalId\n        this.tabKey = props.tabKey\n        this.page = props.page\n        this.state = {\n            authedUserInfo: {}\n        }\n\n    }\n    componentWillMount() {\n        this.getAuthedUserInfo()\n    }\n    getAuthedUserInfo = () => {\n        const params = {\n            uuid: this.uuid,\n            approval_id: this.approvalId\n        }\n        actionUnauthedUserList.approvedDetail(params).then(res => {\n            if (res.code === 200) {\n                this.setState({\n                    authedUserInfo: res.data\n                })\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        })\n    }\n    baseUserInfo = () => {\n        const info = this.state.authedUserInfo\n        let inJobIsPDF = info.in_job && info.in_job.endsWith('.pdf')\n        let jobCardIsPDF = info.job_card && info.job_card.endsWith('.pdf')\n        let otherIsPDF = info.other && info.other.endsWith('.pdf')\n        const labelStyle = {\n            color: '#999',\n            fontSize: 14,\n            lineHeight: '20px',\n            textAlign: 'right',\n            marginRight: 30,\n            flex: 'none',\n            width: 140\n        }\n        const valueStyle = {\n            color: '#333',\n            fontSize: 14,\n            lineHeight: '20px'\n        }\n        let authedUserInfo = [{\n            list: [\n                {\n                    label: '姓名',\n                    value: info.nickname,\n                    labelStyle,\n                    valueStyle,\n                }, {\n                    label: '手机号',\n                    value: info.mobile,\n                    labelStyle,\n                    valueStyle,\n                }, {\n                    label: '机构全称',\n                    value: info.company_name,\n                    labelStyle,\n                    valueStyle,\n                }, {\n                    label: '头像',\n                    value: <div>\n                        {\n                            <img\n                                alt=''\n                                src={info.avatar || commonImg.logo}\n                                style={{ height: 56, width: 56, borderRadius: '50%', cursor: 'pointer' }}\n                            />\n                        }\n                    </div>,\n                    labelStyle,\n                    valueStyle,\n                }, {\n                    label: '部门',\n                    value: info.department || '未填写',\n                    labelStyle,\n                    valueStyle,\n                }, {\n                    label: '职务',\n                    value: info.position || '未填写',\n                    labelStyle,\n                    valueStyle,\n                }, {\n                    label: '邮箱',\n                    value: info.email || '未填写',\n                    labelStyle,\n                    valueStyle,\n                }, {\n                    label: '身份证号',\n                    value: info.id_number || '未填写',\n                    labelStyle,\n                    valueStyle,\n                }, {\n                    label: '身份证正反面照片',\n                    value: info.positive_card && info.reverse_card ? <div>\n                        <img\n                            src={info.positive_card || require('../../../../assets/images/card_positive.png')}\n                            alt=''\n                            style={{ width: 202, height: 112 }}>\n                        </img>\n                        <img\n                            src={info.reverse_card || require('../../../../assets/images/card_reverse.png')}\n                            alt=''\n                            style={{ width: 202, height: 112, marginLeft: 21 }}>\n                        </img>\n                    </div> : <span>未上传</span>,\n                    labelStyle\n                }, {\n                    label: '一个月内在职证明',\n                    value: info.in_job ? \n                    <div style={{marginTop: -12}}>\n                        <CmpFile \n                            src={info.in_job}\n                            name={info.in_job_desc}\n                            editable={false}\n                            click={()=>{\n                                window.open(info.in_job);\n                            }}\n                        />\n                    </div> : <span>未上传</span>,\n                    labelStyle\n                }, {\n                    label: '工卡及名片同框照片',\n                    value: info.job_card ? \n                                <div style={{marginTop: -12}}>\n                                    <CmpFile \n                                        src={info.job_card}\n                                        name={info.job_card_desc}\n                                        editable={false}\n                                        click={()=>{\n                                            window.open(info.job_card);\n                                        }}\n                                    />\n                                </div>: \n                                <span>未上传</span>,\n                    labelStyle\n                }, {\n                    label: '其他有效证件',\n                    value: info.other ? \n                                <div style={{marginTop: -12}}>\n                                    <CmpFile \n                                        src={info.other}\n                                        name={info.other_desc}\n                                        editable={false}\n                                        click={()=>{\n                                            window.open(info.other);\n                                        }}\n                                    />\n                                </div> : <span>未上传</span>,\n                    labelStyle\n                }, {\n                    label: '用户认证',\n                    value: info.current && info.current.operate_status_desc,\n                    labelStyle,\n                    valueStyle\n                }, {\n                    label: '认证详情',\n                    value: info.current && info.current.remark,\n                    labelStyle,\n                    valueStyle,\n                }\n            ]\n        }]\n        return (\n            <RLDisplayBoard\n                style={{ width: '100%' }}\n                valueCol={10}\n                spaceWidth={20}\n                items={authedUserInfo}>\n            </RLDisplayBoard>\n        )\n    }\n    pageTitle = () => {\n        return (\n            <div className=\"custom-page-title\">\n                <span>认证详情</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.changePage('list', { tabKey: this.tabKey, page: this.page })\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <WindowContainer title={this.pageTitle} className='authed-detail'>\n                {this.baseUserInfo()}\n            </WindowContainer>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props\n    }\n})(CmpAuthedDetail)\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/groupManage/AddGroupUser.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/unauthedUser/CmpUnauthedUserList.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/unauthedUser/CmpAuthed.js",["1450","1451","1452","1453","1454","1455"],"import BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { Radio } from 'antd'\nimport { connect } from 'react-redux'\nimport { \n    RLButton, RLDisplayBoard, RLTextarea, RLForm, RLFormItem, RLRadioGroup\n} from '@components/index.js'\n\nimport actionUnauthedUserList from '@actions/userManage/actionUnauthedUserList.js'\n\nimport utils from '@/libs/utils.js'\nimport config from '@/config.js'\nimport images from '@/libs/images/index.js'\nimport CmpFile from '@/pages/marketingTool/components/QAManage/CmpFile.js';\nconst commonImg = images.commonImg\n\nclass CmpAuthed extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.uuid = props.uuid\n        this.tabKey = props.tabKey\n        this.page = props.page\n        this.state = {\n            operate_status: null, // 认证操作\n            remark: '',  // 认证详情\n            addLoading: false,  // 添加按钮loading\n            authedUserInfo: {}\n        }\n    }\n    componentWillMount() {\n        this.getAuthedUserInfo()\n    }\n    getAuthedUserInfo = () => {\n        const params = {\n            uuid: this.uuid,\n            approval_id: ''\n        }\n        actionUnauthedUserList.approvedDetail(params).then(res => {\n            if (res.code === 200) {\n                this.setState({\n                    authedUserInfo: res.data\n                })\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        })\n    }\n    baseUserInfo = () => {\n        const info = this.state.authedUserInfo\n        let inJobIsPDF = info.in_job && info.in_job.endsWith('.pdf')\n        let jobCardIsPDF = info.job_card && info.job_card.endsWith('.pdf')\n        let otherIsPDF = info.other && info.other.endsWith('.pdf')\n        const labelStyle = {\n            color: '#999',\n            fontSize: 14,\n            lineHeight: '20px',\n            textAlign: 'right',\n            marginRight: 30,\n            flex: 'none',\n            width: 140\n        }\n        const valueStyle = {\n            color: '#333',\n            fontSize: 14,\n            lineHeight: '20px'\n        }\n        let authedUserInfo = [{\n            list: [\n                {\n                    label: '姓名',\n                    value: info.nickname,\n                    labelStyle,\n                    valueStyle,\n                }, {\n                    label: '手机号',\n                    value: info.mobile,\n                    labelStyle,\n                    valueStyle,\n                }, {\n                    label: '机构全称',\n                    value: info.company_name,\n                    labelStyle,\n                    valueStyle,\n                }, {\n                    label: '头像',\n                    value: <div>\n                        {\n                            <img\n                                alt=''\n                                src={info.avatar || commonImg.logo}\n                                style={{ height: 56, width: 56, borderRadius: '50%', cursor: 'pointer' }}\n                            />\n                        }\n                    </div >,\n                    labelStyle,\n                    valueStyle,\n                }, {\n                    label: '部门',\n                    value: info.department || '未填写',\n                    labelStyle,\n                    valueStyle,\n                }, {\n                    label: '职务',\n                    value: info.position || '未填写',\n                    labelStyle,\n                    valueStyle,\n                }, {\n                    label: '邮箱',\n                    value: info.email || '未填写',\n                    labelStyle,\n                    valueStyle,\n                }, {\n                    label: '身份证号',\n                    value: info.id_number || '未填写',\n                    labelStyle,\n                    valueStyle,\n                }, {\n                    label: '身份证正反面照片',\n                    value: info.positive_card && info.reverse_card ? <div>\n                        <img\n                            src={info.positive_card || require('../../../../assets/images/card_positive.png')}\n                            alt=''\n                            style={{ width: 202, height: 112 }}>\n                        </img>\n                        <img\n                            src={info.reverse_card || require('../../../../assets/images/card_positive.png')}\n                            alt=''\n                            style={{ width: 202, height: 112, marginLeft: 21 }}>\n                        </img>\n                    </div> : <span>未上传</span>,\n                    labelStyle\n                }, {\n                    label: '一个月内在职证明',\n                    value: info.in_job ? <div style={{marginTop: -12}}>\n                                            <CmpFile \n                                                src={info.in_job}\n                                                name={info.in_job_desc}\n                                                editable={false}\n                                                click={()=>{\n                                                    window.open(info.in_job);\n                                                }}\n                                            />\n                                        </div>: <span>未上传</span>,\n                    labelStyle\n                }, {\n                    label: '工卡及名片同框照片',\n                    value: info.job_card ? <div style={{marginTop: -12}}>\n                                                <CmpFile \n                                                    src={info.job_card}\n                                                    name={info.job_card_desc}\n                                                    editable={false}\n                                                    click={()=>{\n                                                        window.open(info.job_card);\n                                                    }}\n                                                />\n                                            </div>: <span>未上传</span>,\n                    labelStyle\n                }, {\n                    label: '其他有效证件',\n                    value: info.other ? <div style={{marginTop: -12}}>\n                                            <CmpFile \n                                                src={info.other}\n                                                name={info.other_desc}\n                                                editable={false}\n                                                click={()=>{\n                                                    window.open(info.other);\n                                                }}\n                                            />\n                                        </div>: <span>未上传</span>,\n                    labelStyle\n                }\n            ]\n        }]\n        return (\n            <RLDisplayBoard\n                style={{ width: '100%' }}\n                valueCol={10}\n                spaceWidth={20}\n                items={authedUserInfo}>\n                {this.renderAuthedOperate()}\n            </RLDisplayBoard>\n        )\n    }\n    // 认证保存\n    saveConfirm = (values) => {\n        console.log('onFinish', values)\n        this.setState({\n            addLoading: true\n        })\n        const { operate_status: status, remark } = values\n        actionUnauthedUserList.approvedOperate({\n            users: [this.uuid],\n            status,\n            remark\n        }).then(res => {\n            console.log('认证保存返回--res:', res)\n            if (res.code === 200) {\n                this.showToast({ content: '认证成功', type: 'success' })\n                this.props.changePage('list', { tabKey: this.tabKey })\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        }).finally(() => {\n            this.setState({\n                addLoading: false\n            })\n        })\n    }\n    pageTitle = () => {\n        return (\n            <div className=\"custom-page-title\">\n                <span>用户认证</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.changePage('list', { tabKey: this.tabKey, page: this.page })\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n\n    // 底部-认证操作\n    renderAuthedOperate = () => {\n        return (\n            <RLForm\n                labelCol={{ style: { width: 140, textAlign: 'right', marginRight: 20, marginLeft: 60 } }}\n                labelAlign='left'\n                wrapperCol={\n                    { span: 24 }\n                }\n                onFinish={this.saveConfirm}\n                initialValues={{operate_status:1}}\n                validateTrigger='onBlur'\n            >\n                <RLFormItem\n                    colon={false}\n                    label=\"用户认证\"\n                    name='operate_status'\n                    rules={[{\n                        required: true,\n                        message: \"请选择是否同意\"\n                    }]}\n                >\n                    <RLRadioGroup \n                        items={[\n                            { value: 1, label: '同意' },\n                            { value: 2, label: '拒绝' },\n                        ]}\n                    />\n                </RLFormItem>\n                <RLFormItem\n                    colon={false}\n                    label=\"认证详情\"\n                    name='remark'\n                >\n                    <RLTextarea rows={4} style={{ width: 360 }} />\n                </RLFormItem>\n\n                <RLFormItem>\n                    <div style={{ display: 'flex', flexDirection:'row',justifyContent:'center', marginTop: 35,  }}>\n                        <RLButton\n                            type=\"default\"\n                            label='取消'\n                            width={80}\n                            style={{ display: 'inline-block' }}\n                            onClick={() => {\n                                this.props.changePage('list')\n                            }}\n                        />\n                        <RLButton\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                            label='确认'\n                            style={{ marginLeft: 40, display: 'inline-block' }}\n                            loading={this.state.addLoading}\n                            width={80}\n                        />\n                    </div>\n                </RLFormItem>\n            </RLForm>\n        )\n    }\n\n    render() {\n        return (\n            <WindowContainer title={this.pageTitle}>\n                {this.baseUserInfo()}\n            </WindowContainer >\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props\n    }\n})(CmpAuthed)\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/userFieldsSetting/CmpUserFieldsSetting.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/authorityManage/CmpMemberList.js",["1456","1457","1458","1459","1460","1461","1462","1463","1464","1465"],"import { createRef } from 'react';\nimport BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport { RLInput, RLButton, RLSelect, RLTable, RLFilterTool, RLTooltip, RLDatePicker, RLModal, RLForm, RLFormItem, RLRadioGroup } from '@components/index.js'\nimport actionUserList from '@actions/userManage/actionUserList.js'\nimport actionRoleManage from '@actions/userManage/actionRoleManage.js';\n// import '../../userList/UserList.less'\nimport interfaces from '@/api/interfaces'\nimport utils from '@/libs/utils.js';\nimport config from '@/config.js';\nimport eventBus from '@/libs/EventBus.js'\nimport { DatePicker, Input } from 'antd';\n// import CmpAddUser from '@pages/common/meeting/AddUser.js';\nimport AddUser from '../../../common/meeting/AddUser';\n\nclass CmpMemberList extends BaseCmp {\n    constructor(props) {\n        super(props);\n        this.role_code = props.role_code;\n        this.rolePage = props.rolePage;\n        this.state = {\n            keyword: null,\n            value: '',\n            roleList: [],\n            memberListInfo: {\n                pageNum: 1,  // 总叶数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: 1,     // 当前第几页\n            },\n            selectedMemberKeys: [],  // 选中的用户\n            getListLoading: true,       // 获取列表loading,\n\n            showSwitchRoleModal: false,\n            selected_users: [],\n            selected_role: '',\n\n            showAddUserModal: false,\n        }\n        this.userAddModal = createRef();\n        this.columns = [\n            {\n                title: '序号',\n                width: '10%',\n                render: (text, record, index) => {\n                    return <div>{(this.state.memberListInfo.page - 1) * this.pageSize + index + 1 }</div>\n                },\n            },\n            {\n                title: '姓名',\n                dataIndex:'nickname',\n                key: 'nickname',\n                width: '15%',\n            },\n            {\n                title: '手机号',\n                dataIndex: 'mobile',\n                key: 'mobile',\n                width: '15%'\n            },\n            {\n                title: '邮箱',\n                dataIndex: 'email',\n                key: 'email',\n                width: '15%',\n            },\n            {\n                title: '机构名称',\n                dataIndex: 'company_name',\n                key: 'company_name',\n                width: '15%',\n            },\n            {\n                title: '提交时间',\n                dataIndex: 'created_at',\n                key: 'created_at',\n                width: '15%',\n            },\n            {\n                title: <span style={{ paddingLeft: 6 }}>操作</span>,\n                key: 'option',\n                width: '15%',\n                render: (text, record) => (\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\n                        {\n                            <RLButton\n                                type='link'\n                                label='更换角色'\n                                onClick={(e) => {\n                                    e.stopPropagation();\n                                    this.setState({\n                                        selected_users: [record.uuid],\n                                        showSwitchRoleModal: true\n                                    })\n                                }}\n                            />\n                        }\n                    </div>\n                )\n            },\n        ];\n        this.getMemberList(); \n        this.getAllRoles();\n    }\n    getMemberList({ page = this.state.memberListInfo.page } = { page: this.state.memberListInfo.page }) {\n        this.setState({\n            getListLoading: true\n        })\n        actionUserList.getUserList({\n            keyword: this.state.keyword || '',\n            value: this.state.value || '',\n            role_code: this.role_code || '',\n            approval_status: '',\n            start_date: '',\n            end_date:'',\n            page,\n            pagesize: this.pageSize\n        }).then(res => {\n            if (res.code === 200) {\n                if (res.data && res.data.list.length === 0 && page > 1) {\n                    this.getMemberList({ page: page - 1 })\n                } else {\n                    this.setState({\n                        memberListInfo: {\n                            list: res.data.list,\n                            page,\n                            count: res.data.count,\n                            pageNum: Math.ceil(res.data.count / this.pageSize)\n                        }\n                    });\n                }\n            }\n        }).finally(() => {\n            this.setState({\n                getListLoading: false\n            })\n        })\n    }\n    getAllRoles(){\n        actionRoleManage.getAllRoles().then( res => {\n            if(res.code === 200){\n                this.setState({\n                    roleList: res.data\n                })\n            }else{\n                \n            }\n        }).catch(err => {\n           \n        })\n    }\n    getLeftItems = () => {\n        return ([\n            <RLSelect \n                placeholder=\"请选择\"\n                value={this.state.keyword}\n                options={config.keywordType}\n                style={{width: 160, marginRight:20}}\n                onChange={(val)=>{\n                    this.setState({\n                        keyword: val,\n                    })\n                }}/>,\n            <RLInput placeholder=\"请输入\" \n                    value={this.state.value}\n                    onChange={ (e)=>{\n                        this.setState({\n                            value: e.target.value\n                        })\n                    }}\n                    style={{width: 260}}/>\n        ])\n    }\n    getRightItems = () => {\n        return ([\n            <RLButton label=\"搜索\" \n                type=\"primary\"\n                onClick={ ()=> {\n                    this.getMemberList();\n                }} \n                style={{marginRight: 20}}\n            />,\n            <RLButton label=\"重置\" \n                onClick={ ()=>{\n                    this.setState({\n                        keyword:null,\n                        value: ''\n                    }, ()=>{\n                        this.getMemberList();\n                    })\n                }}/>\n        ])\n    }\n\n    getRightSecondItems = () => {\n        return (\n            [\n               this.role_code !== 'ordinary' && <RLButton\n                    label='添加角色成员'\n                    type='primary'\n                    key='add'\n                    onClick={() => {\n                        this.setState({\n                            showAddUserModal: true\n                        })\n                    }}\n                    style={{ marginRight: 20 }}\n                />,\n                <RLButton \n                    label=\"批量更换角色\"\n                    disabled = {this.state.selectedMemberKeys.length <= 0 }\n                    onClick={() =>{\n                        this.state.selected_users = this.state.selectedMemberKeys;\n                        this.setState({\n                            showSwitchRoleModal: true\n                        });\n                    }}\n                />\n            ]\n        )\n    }\n    getGoBackItems = () => {\n        return [\n                <RLButton \n                    label=\"返回\"\n                    onClick={()=>{\n                        this.props.changePage('list',{\n                            rolePage: this.rolePage\n                        })\n                    }}\n                />\n        ]\n    }\n    onSelectChange = (selectedRowKeys, selectedRows) => {\n        this.setState({\n            selectedMemberKeys: selectedRowKeys,\n        })\n    }\n    pageChange = (page, pageSize) => {\n        this.getMemberList({ page })\n    }\n    AddUser = (users) => {\n        let user_ids = users.map(item => item.uuid);\n        actionRoleManage.changeRole({role_code:this.role_code, users: user_ids}).then( res=> {\n            if(res.code === 200){\n                this.showToast({type:'success',content:'成员添加成功！'});\n                this.getMemberList();\n            }else{\n                this.showToast({type:'error',content: '成员添加失败！'});\n            }\n        }).catch(err => {\n            this.showToast({type:'error',content: '成员添加失败！'});\n        })\n    }\n    pageTitle = () => {\n        return (\n            <div className=\"custom-page-title\">\n                <span>{this.props.role_name || '角色成员'}</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.changePage('list',{\n                            rolePage: this.rolePage,\n                        })\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n    render() {\n        return (\n            <WindowContainer title={this.pageTitle}>\n                <div className='content-user'>      \n                    <RLFilterTool leftItems={this.getLeftItems} rightItems={this.getRightItems}/>\n                    <RLFilterTool leftItems={[]} rightItems={this.getRightSecondItems}/>\n                    <RLTable\n                        loading={this.state.getListLoading}\n                        dataSource={this.state.memberListInfo.list}\n                        rowKey='uuid'\n                        columns={this.columns}\n                        rowSelection={{\n                            type: 'checkbox',\n                            onChange: this.onSelectChange,\n                            getCheckboxProps: (record) => ({\n                                disabled: false\n                            })\n                        }}\n                        paginationInfo={{\n                            selectedRowKeys: this.state.selectedMemberKeys,\n                            total: this.state.memberListInfo.count,\n                            pageSize: this.pageSize,\n                            onChange: this.pageChange,\n                            current: this.state.memberListInfo.page\n                        }}\n                        rowClassName='rl-table-click-row'\n                    />\n                </div>\n              { this.state.showAddUserModal && <AddUser \n                    ref={c => this.userAddModal = c }\n                    visible={this.state.showAddUserModal}\n                    selectType = \"checkbox\"\n                    showSelectGroup={false}\n                    originArr={this.state.memberListInfo.list}\n                    originCanCancel={false}\n                    returnStyle=\"object\"\n                    onCancel={()=>{\n                        this.setState({showAddUserModal: false})\n                    }}\n                    onAdd={this.AddUser}\n                    mustIdent={true}\n                    // * originArr    原数组  \n                    // * originCanCancel  原数据是否可取消\n                    // * returnStyle   点击添加返回的数据类型 'object'返回数据所有属性，'arr'返回id数组\n                    // * onCancel   取消回调函数\n                    // * onAdd     添加回调函数\n                />}\n               { this.state.showSwitchRoleModal && <RLModal\n                    title=\"更换角色\"\n                    visible={this.state.showSwitchRoleModal}\n                    footer={null}\n                    onCancel={()=>{\n                        this.setState({\n                            selected_role:'',\n                            selected_users: [],\n                            showSwitchRoleModal: false\n                        });\n                    }}\n                    >\n                    <div style={{display:'flex', flexDirection:'column',justifyContent:'center',alignItems:'center'}}>\n                        <RLSelect \n                            options={this.state.roleList} \n                            placeholder=\"请选择角色\"\n                            onChange={( val )=>{\n                                this.state.selected_role = val;\n                            }}\n                            labelkey=\"role_name\"\n                            valuekey=\"role_code\"\n                            style={{width:260}}/>\n                        <div style={{display:'flex', flexDirection:'row',justifyContent:'center',marginTop:40}}>\n                            <RLButton \n                                label=\"取消\"\n                                onClick={()=>{\n                                    this.setState({\n                                        selected_role:'',\n                                        selected_users: [],\n                                        showSwitchRoleModal: false\n                                    })\n                                }}\n                                style={{marginRight: 40}}/>\n                            <RLButton \n                                label=\"确定\"\n                                type=\"primary\"\n                                onClick={()=>{\n                                    if(!this.state.selected_role){\n                                        this.showToast({type:'error',content:'请选择角色！'});\n                                        return;\n                                    }\n                                    actionRoleManage.changeRole({\n                                        role_code: this.state.selected_role,\n                                        users: this.state.selected_users\n                                    }).then( res => {\n                                        if(res.code === 200){\n                                            this.showToast({type:'error', content:'角色替换成功！'});\n                                            this.setState({\n                                                showSwitchRoleModal: false\n                                            });\n                                            this.getMemberList();\n                                        }else{\n                                            this.showToast({type:'error',content:'角色替换失败！'});\n                                            this.setState({\n                                                showSwitchRoleModal: false\n                                            });\n                                        }\n                                    }).catch( err => {\n                                        this.showToast({type:'error',content:'角色替换失败！'});\n                                        this.setState({\n                                            showSwitchRoleModal: false\n                                        });\n                                    })\n\n                                }}/>\n                        </div>\n                    </div>\n                </RLModal>}\n            </WindowContainer>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props,\n    }\n})(CmpMemberList)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/authorityManage/CmpRoleDetail.js",["1466","1467","1468","1469","1470","1471","1472","1473","1474","1475"],"import BaseCmp from '@components/BaseCmp.js';\nimport WindowContainer from '@components/WindowContainer.js';\nimport { connect } from 'react-redux';\nimport {\n    RLInput, RLButton, RLDisplayBoard, RLForm, RLFormItem, RLRadioGroup, RLKVList\n} from '@components/index.js';\nimport PhoneRegionView from '@/pages/common/PhoneRegionView.js';\n\nimport commonAction from '@actions/commonActions';\nimport actionRoleManage from '@actions/userManage/actionRoleManage.js';\nimport utils from '@/libs/utils.js';\nimport interfaces from '@/api/interfaces';\nimport CmpAuthTree from './CmpAuthTree';\n\n\n\nclass CmpRoleDetail extends BaseCmp {\n    constructor(props) {\n        super(props);\n\n        this.roleId = props.roleId;\n        this.rolePage = props.rolePage\n        this.roleDetail = props.roleDetail;\n        this.state = {\n            sysAuthData: [],\n            roleInfo: this.roleDetail,\n        }\n        this.getSystemAuth();\n    }\n    componentWillMount() {\n        // this.getUserInfo()\n    }\n\n    getSystemAuth = ()=>{\n        actionRoleManage.getSystemAuth().then(res =>{\n            if(res.code === 200){\n                this.setState({\n                    sysAuthData: res.data\n                });\n            }else{\n                this.showToast({type:'erroe', content: res.msg});\n            }\n        }).catch( err => {\n            this.showToast({type:'erroe', content: err.msg});\n        })\n    }\n    pageTitle = () => {\n        return (\n            <div className=\"custom-page-title\">\n                <span>{this.state.roleInfo.role_name || '角色详情'}</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.changePage('list',{\n                            rolePage: this.rolePage,\n                        })\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <WindowContainer title={this.pageTitle}>\n                <div className='page-userAdd' >\n                    <div style={{display:'flex',flexDirection:'column',alignItems:'center'}}>\n                        <div style={{width:'100%',borderLeft: '4px solid #8F1D22',paddingLeft:5, fontSize:16,fontWeight:500}}>角色信息</div>\n                        <div style={{width:'96%'}}>\n                            <div style={{display:'flex',flexDirection:'row',marginTop:10}}>\n                                <div style={{marginRight: 50}}>角色名称</div>\n                                <div style={{width:360}}>{this.state.roleInfo.role_name}</div>\n                            </div>\n                            <div style={{display:'flex',flexDirection:'row',marginTop:10}}>\n                                <div style={{marginRight: 50}}>角色描述</div>\n                                <div style={{width:360,maxHeight:110,overflowY:'scroll'}}>{this.state.roleInfo.role_desc}</div>\n                            </div>\n                        </div>  \n                    </div>\n                    <div style={{display:'flex',flexDirection:'column',alignItems:'center', marginTop: 20}}>\n                        <div style={{width:'100%',borderLeft: '4px solid #8F1D22',paddingLeft:5, fontSize:16,fontWeight:500}}>角色权限</div>\n                        <div style={{width:'96%',marginTop:0}}>\n                            <CmpAuthTree \n                                treeData={this.state.sysAuthData}\n                                checkedList={this.state.roleInfo.auth}\n                                readOnly={true}/>\n                        </div>\n                    </div>\n                    {/* <div style={{display:'flex',flexDirection:'row', justifyContent:'center'}}>\n                        <RLButton label=\"返回\" \n                            onClick={()=> {\n                                this.props.changePage('list',{\n                                    rolePage: this.rolePage,\n                                })\n                            }} \n                            style={{marginTop:20}}/>\n                    </div> */}\n                   \n                </div>\n            </WindowContainer>\n        )\n    }\n\n}\nexport default connect((store, props) => {\n    return {\n        ...props,\n    }\n})(CmpRoleDetail)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/authorityManage/CmpRoleEdit.js",["1476","1477","1478","1479","1480","1481"],"import { createRef } from 'react';\nimport BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport { RLInput, RLButton, RLSelect, RLForm, RLFormItem, RLRadioGroup, RLCheckbox } from '@components/index.js'\nimport commonAction from '@actions/commonActions'\nimport actionRoleManage from '@actions/userManage/actionRoleManage.js';\nimport utils from '@/libs/utils.js'\nimport config from '@/config.js'\n\nimport CmpAuthTree from './CmpAuthTree.js';\n\nimport { Input, Form,  } from 'antd';\nimport './CmpRoleEdit.less';\n\n\nclass CmpRoleEdit extends BaseCmp {\n    constructor(props) {\n        super(props);\n\n        this.roleId = props.roleId;\n        this.rolePage = props.rolePage\n        this.roleDetail = props.roleDetail;\n       \n        this.state = {\n            sysAuthData: [],\n            is_edit: this.roleId ? true: false,\n            addLoading: false,  // 添加按钮loadin\n            roleInfo: this.roleId ? this.roleDetail: {role_name: '', role_desc:'', auth:[], role_code: ''},\n            role_id: ''\n        };\n        this.authTree = createRef();\n        this.form = createRef();\n\n    }\n    componentWillMount() {\n        this.getSystemAuth();\n    }\n    getSystemAuth = ()=>{\n        actionRoleManage.getSystemAuth().then(res =>{\n            if(res.code === 200){\n                this.setState({\n                    sysAuthData: res.data\n                });\n            }else{\n                this.showToast({type:'erroe', content: res.msg});\n            }\n        }).catch( err => {\n            this.showToast({type:'erroe', content: err.msg});\n        })\n    }\n    editConfirm = (values) => {\n        this.setState({\n            addLoading: true\n        });\n        let data = {\n            ...values,\n            role_code: this.roleId,\n            auth: this.authTree.getCheckedList()\n        }\n        if (this.roleId) {\n            actionRoleManage.editRole(data).then(res => {\n                if (res.code === 200) {\n                    this.showToast({ content: '编辑角色成功', type: 'success' })\n                    this.setState({\n                        addLoading: false\n                    });\n                    this.props.changePage('list',{\n                        rolePage: this.rolePage\n                    });\n                } else {\n                    this.showToast({ type: 'error', content: res.msg });\n                    this.setState({\n                        addLoading: false\n                    });\n                }\n            }).catch( err=> {\n                this.showToast({ type: 'error', content: err.msg });\n                    this.setState({\n                        addLoading: false\n                    });\n            }).finally(() => {\n                this.setState({\n                    addLoading: false\n                })\n            })\n        } else {\n            actionRoleManage.addRole(data).then(res => {\n                if (res.code === 200) {\n                    this.showToast({ type: 'success', content: '角色创建成功！' })\n                    this.props.changePage('list',{\n                        rolePage: this.rolePage\n                    })\n                }else {\n                    this.showToast({ type: 'error', content: res.msg })\n                }\n            }).catch(err => {\n                this.showToast({ type: 'error', content: err.msg });\n                this.setState({\n                    addLoading: false\n                });\n            }).finally(() => {\n                this.setState({\n                    addLoading: false\n                })\n            })\n        }\n    }\n\n    pageTitle = () => {\n        let title = '添加角色'\n        if (this.roleId) {\n            title = this.state.roleInfo.role_name || '编辑角色';\n        }\n        return (\n            <div className=\"custom-page-title\">\n                <span>{title}</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.changePage('list',{\n                            rolePage: this.rolePage\n                        })\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n    render() {\n\n        return (\n            <WindowContainer title={this.pageTitle}>\n                <div className='page-userAdd'>\n                    <RLForm ref={form => this.form = form}\n                        labelCol={{ style: { width: 100, marginRight: 20, marginLeft: 30 } }}\n                        labelAlign='left'\n                        wrapperCol={\n                            { span: 24 }\n                        }\n                        onFinish={this.editConfirm}\n                        initialValues={this.state.roleInfo}\n                        validateTrigger='onBlur'>\n                        <div style={{display:'flex',flexDirection:'column',alignItems:'center', marginTop: 20}}>\n                            <div style={{width:'100%', borderLeft: '4px solid #8F1D22',paddingLeft:5, fontSize:16,fontWeight:500}}>角色信息</div>\n                            <div style={{width:'96%'}}>请填写角色信息</div>\n                            <div style={{width:'96%'}}>\n                                <Form.Item label=\"角色名称\" name=\"role_name\" colon={false}\n                                    rules={[{\n                                        required: !this.state.is_edit,\n                                        message: '请输入角色名称'\n                                    }]}>\n                                    <RLInput placeholder='请输入姓名' style={{ width: 360 }} disabled={this.state.is_edit}/>\n                                </Form.Item>\n                                <RLFormItem label=\"角色描述\" name=\"role_desc\" colon={false}>\n                                    <Input.TextArea placeholder=\"请输入内容\" style={{width: 360, height: 110}}/>\n                                </RLFormItem>\n                            </div>\n                        </div>\n                        <div style={{display:'flex',flexDirection:'column',alignItems:'center', marginTop: 20}}>\n                            <div style={{width:'100%',borderLeft: '4px solid #8F1D22',paddingLeft:5, fontSize:16,fontWeight:500}}>角色权限</div>\n                            <div style={{width:'96%'}}>请选择角色信息</div>\n                            <div style={{width: '90%'}}>\n                                <CmpAuthTree  \n                                    ref={ c => this.authTree = c }\n                                    treeData={this.state.sysAuthData}\n                                    checkedList={this.state.roleInfo.auth}\n                                    readOnly={this.state.roleInfo.role_code === 'admin'}\n                                />\n                            </div>\n                        </div>\n                        <RLFormItem>\n                            <div style={{ display: 'flex', justifyContent: 'center', marginTop: 40}}>\n                                <RLButton type=\"default\" label='取消' width={80}\n                                    style={{ display: 'inline-block' }}\n                                    onClick={() => {\n                                        this.props.changePage('list',{\n                                            rolePage: this.rolePage\n                                        })\n                                    }} />\n                                <RLButton type=\"primary\"\n                                    htmlType=\"submit\" label={this.roleId ? '保存' : '添加'}\n                                    style={{ marginLeft: 40, display: 'inline-block' }}\n                                    loading={this.state.addLoading}\n                                    width={80}\n                                />\n                            </div>\n                        </RLFormItem>\n                    </RLForm>\n                </div>\n            </WindowContainer>\n        )\n    }\n\n}\nexport default connect((store, props) => {\n    return {\n        ...props,\n    }\n})(CmpRoleEdit)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/authorityManage/CmpRoleList.js",["1482","1483","1484","1485","1486","1487","1488","1489","1490","1491","1492","1493","1494","1495"],"import { createRef } from 'react';\nimport BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport { RLInput, RLButton, RLSelect, RLTable, RLFilterTool, RLTooltip, RLDatePicker, RLModal, RLForm, RLFormItem, RLRadioGroup } from '@components/index.js'\nimport actionUserList from '@actions/userManage/actionUserList.js'\nimport actionRoleManage from '@actions/userManage/actionRoleManage.js'\n// import '../../userList/UserList.less'\nimport interfaces from '@/api/interfaces'\nimport utils from '@/libs/utils.js'\nimport eventBus from '@/libs/EventBus.js'\nimport { DatePicker, Input } from 'antd';\n\nclass RoleList extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.state = {\n            roleListInfo: {\n                pageNum: 1,  // 总叶数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: props.rolePage || 1,     // 当前第几页\n            },\n            selectedMemberKeys: [],  // 选中的用户\n            getListLoading: true,       // 获取列表loading,\n        }\n        this.columns = [\n            {\n                title: '角色名称',\n                dataIndex: 'role_name',\n                key: 'role_name',\n                width: '15%',\n            },\n            {\n                title: '角色说明',\n                dataIndex:'role_desc',\n                key: 'role_desc',\n                width: '20%',\n            },\n            {\n                title: '用户数',\n                dataIndex: 'user_count',\n                key: 'user_count',\n                width: '10%'\n            },\n            {\n                title: '更新时间',\n                dataIndex: 'updated_at',\n                key: 'updated_at',\n                width: '15%',\n            },\n            {\n                title: <span style={{ paddingLeft: 6 }}>操作</span>,\n                key: 'option',\n                width: '40%',\n                render: (text, record) => (\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\n                        {\n                            <RLButton\n                                type='link'\n                                label='查看'\n                                onClick={(e) => {\n                                    e.stopPropagation()\n                                    this.props.changePage('detail', {\n                                        roleId: record.uuid,\n                                        rolePage: this.state.roleListInfo.page,\n                                        roleDetail: {\n                                            role_name: record.role_name,\n                                            role_desc: record.role_desc,\n                                            auth: record.auth,\n                                        }\n                                    })\n                                }}\n                            />\n                        }\n                        {\n                            interfaces.ROLE_EDIT && \n                            record.role_code !== 'admin' && \n                            <RLButton\n                                type='link'\n                                label='编辑'\n                                onClick={(e) => {\n                                    e.stopPropagation()\n                                    this.props.changePage('edit',{\n                                        roleId: record.role_code,\n                                        rolePage: this.state.roleListInfo.page,\n                                        roleDetail: {\n                                            role_name: record.role_name,\n                                            role_desc: record.role_desc,\n                                            role_code: record.role_code,\n                                            auth: record.auth,\n                                        }\n                                    })\n                                }}\n                            />\n                        }\n                        {\n                            interfaces.ROLE_SEARCH &&\n                            <RLButton\n                                type='link'\n                                label='查看用户'\n                                onClick={(e) => {\n                                    e.stopPropagation()\n                                    this.props.changePage('member',{\n                                        role_code: record.role_code,\n                                        rolePage: this.state.roleListInfo.page,\n                                        role_name: record.role_name,\n                                        role_desc: record.role_desc,\n                                    })\n                                }}\n                            />\n                        }\n                        {\n                            interfaces.ROLE_DELETE &&\n                            record.role_code !== 'admin'  && record.role_code !== 'apply_admin' && record.role_code !== 'audit_admin' &&\n                            record.role_code !== 'ordinary' && \n                            (\n                                <RLButton\n                                    type='link' label='删除'\n                                    onClick={(e) => {\n                                        e.stopPropagation()\n                                        this.delRole(record)\n                                    }}\n                                />\n                            )\n                        }\n                    </div>\n                )\n            },\n        ];\n        this.getRoleList(); \n    }\n    componentWillMount() {\n        \n    }\n    componentWillUnmount() {\n        // eventBus.removeListener('userlist-tab-change')\n    }\n\n    getRoleList({ page = this.state.roleListInfo.page } = { page: this.state.roleListInfo.page }) {\n        this.setState({\n            getListLoading: true\n        })\n        actionRoleManage.getRoleList({\n            page,\n            pagesize: this.pageSize\n        }).then(res => {\n            if (res.code === 200) {\n                if (res.data && res.data.list.length === 0 && page > 1) {\n                    this.getRoleList({ page: page - 1 })\n                } else {\n\n                    this.setState({\n                        roleListInfo: {\n                            list: res.data.list,\n                            page,\n                            count: res.data.count,\n                            pageNum: Math.ceil(res.data.count / this.pageSize)\n                        }\n                    });\n                }\n\n            }\n        }).finally(() => {\n            this.setState({\n                getListLoading: false\n            })\n        })\n    }\n\n    delRole = (record) => {\n        this.showModal({\n            content: '角色删除后，该角色下的用户将被设置成普通用户，并将同步删除该角色下的用户所分配的权限，删除后信息不可恢复。',\n            title: '是否删除该角色？',\n            okText: '确认',\n            cancelText: '取消',\n            onOk: () => {\n                return this.roleDelConfirm(record.role_code)\n            },\n            onCancel: () => { },\n            size: 'big'\n        })\n    }\n    \n    roleDelConfirm = (role_code) => {\n\n        return actionRoleManage.deleteRole({role_code}).then(res => {\n            if (res.code === 200) {\n                this.showToast({ type: 'success', content: '删除成功' })\n                this.getRoleList()\n            } else {\n                this.showToast({ type: 'error', content: '删除失败' })\n            }\n        })\n    }\n  \n    getRightItems = () => {\n        return (\n            [\n                interfaces.ROLE_ADD && <RLButton\n                    label='+创建角色'\n                    type='primary'\n                    key='add'\n                    onClick={() => {\n                        this.props.changePage('edit')\n                    }}\n                    style={{ marginRight: 0 }}\n                />,\n            ]\n        )\n    }\n    onSelectChange = (selectedRowKeys, selectedRows) => {\n        this.setState({\n            selectedMemberKeys: selectedRowKeys,\n        })\n    }\n    pageChange = (page, pageSize) => {\n        this.getRoleList({ page })\n    }\n\n    render() {\n        return (\n            <WindowContainer >\n                <div className='content-user'>\n                    <RLFilterTool leftItems={[]} rightItems={this.getRightItems}/>\n                    <RLTable\n                        loading={this.state.getListLoading}\n                        dataSource={this.state.roleListInfo.list}\n                        rowKey='uuid'\n                        columns={this.columns}\n                        // rowSelection={{\n                        //     type: 'checkbox',\n                        //     onChange: this.onSelectChange,\n                        //     getCheckboxProps: (record) => ({\n                        //         disabled: false\n                        //     })\n                        // }}\n                        paginationInfo={{\n                            total: this.state.roleListInfo.count,\n                            pageSize: this.pageSize,\n                            onChange: this.pageChange,\n                            current: this.state.roleListInfo.page\n                        }}\n                        // onRow={(record) => {\n                        //     return {\n                        //         onClick: (e) => {\n                        //             this.rowClick(e, record)\n                        //         }\n                        //     }\n                        // }}\n                        rowClassName='rl-table-click-row'\n                    />\n                </div>\n            </WindowContainer>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props,\n        // roleList: store.roleManage.roleList,\n    }\n})(RoleList)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/userList/CmpUserEdit.js",["1496","1497","1498","1499","1500","1501"],"import BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport { RLInput, RLButton, RLSelect, RLForm, RLFormItem, RLRadioGroup, RLRadio } from '@components/index.js'\nimport PhoneRegionView from '@/pages/common/PhoneRegionView.js'\nimport actionUserList from '@actions/userManage/actionUserList.js'\nimport commonAction from '@actions/commonActions'\nimport utils from '@/libs/utils.js'\nimport config from '@/config.js'\n\nimport { Upload } from 'antd';\nimport { UploadOutlined, InboxOutlined } from '@ant-design/icons';\n\nimport CmpUpload from '@/pages/common/CmpUpload.js';\nimport { createRef } from 'react'\nimport RLCheckbox from '../../../../components/RLCheckbox.js'\nimport CmpFile from '@/pages/marketingTool/components/QAManage/CmpFile.js';\nclass CmpUserEdit extends BaseCmp {\n    constructor(props) {\n        super(props)\n        // this.urlParam = this.getParams(props.location.search)\n        this.userId = props.userId;\n        this.userPage = props.userPage;\n        this.state = {\n            userInfo: {},\n            fieldSettings: [],\n            is_edit: this.userId ? true : false,\n            user_type: this.userId ? 0 : 1,  //创建时使用 国内用户：1， 国外用户：2\n            showSubForm: false,  // 是否显示专业版选择计划框\n            addLoading: false,  // 添加按钮loading\n            showAreaList: false, // 显示手机号区号列表\n            // areacodeSelected: {\n            //     name: '中国',\n            //     value: '+86'\n            // },\n        }\n\n        this.form = createRef()\n    }\n    componentWillMount() {\n        //获取必填字段\n        this.getFieldSetting();\n        if (this.userId) {\n            this.getUserInfo()\n        } else {\n            this.setState({\n                userInfo: {\n                    type: 'cn',\n                    nickname: '',\n                    mobile: '',\n                    email: '',\n                    company_name: '',\n                    avatar: '',\n                    department: '',\n                    position: '',\n                    id_number: '',\n                    positive_card: '',\n                    reverse_card: '',\n                    business_card: '',\n                    in_job: '',\n                    in_job_desc: '',\n                    job_card: '',\n                    job_card_desc: '',\n                    other: '',\n                    other_desc: '',\n                    is_approval: false\n                }\n            });\n        }\n    }\n    isRequired(field) {\n        let setting = this.state.fieldSettings.find(item => item.form_title === field)\n        return setting && setting.value === 1\n    }\n    getFieldSetting = () => {\n        actionUserList.getFieldsSetting().then(res => {\n            if (res.code === 200) {\n                this.setState({\n                    fieldSettings: res.data\n                });\n            } else {\n                this.showToast({ type: 'error', content: '获取字段设置失败！' })\n            }\n        })\n    }\n    getUserInfo = () => {\n        actionUserList.getUserDetail({ uuid: this.userId }).then(res => {\n            if (res.code === 200) {\n                this.setState({\n                    userInfo: res.data\n                }, () => {\n                    //给表单重置值\n                    this.form && this.form.setFieldsValue(this.state.userInfo)\n                });\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        })\n    }\n\n    editConfirm = (values) => {\n        console.log('onFinish', values, this.state.areacodeSelected)\n        this.setState({\n            addLoading: true\n        })\n        values.is_approval = values.is_approval ? 1 : 0;\n        values.in_job_desc = this.state.userInfo.in_job_desc;\n        values.job_card_desc = this.state.userInfo.job_card_desc;\n        values.other_desc = this.state.userInfo.other_desc;\n        if (this.userId) {\n            values.uuid = this.state.userInfo.uuid;\n            values.type = this.state.userInfo.reg_type === 1 ? 'cn' : 'en';\n            actionUserList.editUser(values).then(res => {\n                if (res.code === 200) {\n                    this.showToast({ content: '编辑用户成功', type: 'success' })\n                    this.props.changePage('list', {\n                        userPage: this.userPage,\n                    })\n                } else {\n                    this.showToast({ type: 'error', content: res.msg })\n                }\n            }).finally(() => {\n                this.setState({\n                    addLoading: false\n                })\n            })\n        } else {\n            actionUserList.addUser(values).then(res => {\n                if (res.code === 200) {\n                    this.props.changePage('list', {\n                        userPage: this.userPage\n                    })\n                } else {\n                    this.showToast({ type: 'error', content: res.msg })\n                }\n            }).finally(() => {\n                this.setState({\n                    addLoading: false\n                })\n            })\n        }\n    }\n\n    pageTitle = () => {\n        let title = '添加用户'\n        if (this.userId) {\n            title = '编辑用户'\n        }\n        return (\n            <div className=\"custom-page-title\">\n                <span>{title}</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.changePage('list', {\n                            userPage: this.userPage\n                        })\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <WindowContainer title={this.pageTitle}>\n                <div className='page-userAdd'>\n                    {\n                        <RLForm ref={form => this.form = form}\n                            labelCol={{ style: { width: 150, marginRight: 20, marginLeft: 30, textAlign: 'right' } }}\n                            labelAlign='left'\n                            wrapperCol={\n                                { span: 24 }\n                            }\n                            onFinish={this.editConfirm}\n                            initialValues={this.state.userInfo}\n                            validateTrigger='onBlur'\n                        >\n                            {\n                                !this.state.is_edit ?\n                                    <RLFormItem name='type' label='用户类型' colon={false} layout={'vertical'}\n                                        rules={\n                                            [{ required: true }]\n                                        }>\n                                        <RLRadioGroup\n                                            items={[\n                                                { value: 'cn', label: '国内用户', disabled: false },\n                                                { value: 'en', label: '国外用户', disabled: false },\n                                            ]}\n                                            onChange={(e) => {\n                                                if (e.target.value === 'en') {\n                                                    this.setState({ user_type: 2 });\n                                                } else if (e.target.value === 'cn') {\n                                                    this.setState({ user_type: 1 });\n                                                }\n                                            }}\n                                        />\n                                    </RLFormItem> : null\n                            }\n\n                            <RLFormItem name='nickname'\n                                label='姓名' colon={false}\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: '请输入姓名',\n                                    }, {\n                                        max: 40,\n                                        message: '姓名最多40个字符',\n                                    }, {\n                                        pattern: /\\S+/,\n                                        message: '姓名格式不对'\n                                    }\n                                ]}\n                            >\n                                <RLInput placeholder='请输入姓名' style={{ width: 360 }} />\n                            </RLFormItem>\n\n                            <RLFormItem name='mobile' label=\"手机号\" colon={false}\n                                rules={[\n                                    {\n                                        required: (!this.is_edit && this.state.user_type === 1) || this.state.userInfo.reg_type === 1,\n                                        message: '请输入手机号'\n                                    }, {\n                                        pattern: /^1[0-9]{10}$/,\n                                        message: '请输入正确的手机号'\n                                    }\n                                ]}>\n\n                                <RLInput placeholder=\"请输入手机号\" style={{ width: 360 }} disabled={this.state.is_edit && this.state.userInfo.reg_type === 1} />\n                            </RLFormItem>\n\n                            <RLFormItem name='company_name' label='机构全称' colon={false}\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: '请输入机构全称'\n                                    }, {\n                                        max: 100,\n                                        message: '机构名称最多100个字符'\n                                    }\n                                ]}>\n                                <RLInput placeholder='请输入机构全称' style={{ width: 360 }} />\n                            </RLFormItem>\n\n                            <RLFormItem name='avatar' label='头像' colon={false}\n                                ref={c => this.avatarInput = c}\n                                rules={[\n                                    {\n                                        required: this.isRequired('avatar'),\n                                        message: '请上传头像'\n                                    },\n                                ]}\n                            >\n                                <CmpUpload saveUrl={(fileurl) => {\n                                    this.form.setFieldsValue({\n                                        avatar: fileurl,\n                                    })\n                                }}\n                                    src={this.state.userInfo.avatar}\n                                    imgStyle={{ width: 56, height: 56, borderRadius: '50%' }}\n                                    default={require('../../../../assets/images/avatar_upload.png').default}\n                                />\n                            </RLFormItem>\n\n\n                            <RLFormItem name='department' label='部门' colon={false}\n                                rules={[{\n                                    required: this.isRequired('department'),\n                                    message: '请输入部门'\n                                },\n                                {\n                                    max: 40,\n                                    message: '部门最多40个字符'\n                                }\n                                ]\n                                }>\n                                <RLInput placeholder='请输入职位' style={{ width: 360 }} />\n                            </RLFormItem>\n\n                            <RLFormItem name='position' label='职务' colon={false}\n                                rules={[\n                                    {\n                                        required: this.isRequired('position'),\n                                        message: '请输入职务'\n                                    },\n                                    {\n                                        max: 40,\n                                        message: '职务最多40个字符'\n                                    }\n                                ]\n                                }>\n                                <RLInput placeholder='请输入职务' style={{ width: 360 }} />\n                            </RLFormItem>\n\n                            <RLFormItem name='email' label='邮箱' colon={false}\n                                rules={[\n                                    {\n                                        required: (!this.is_edit && this.state.user_type === 2) || this.state.userInfo.reg_type === 2 || this.isRequired('email'),\n                                        message: '请输入邮箱'\n                                    },\n                                    {\n                                        pattern: config.emailReg,\n                                        message: '邮箱格式错误'\n                                    }\n                                ]}\n                            >\n                                <RLInput placeholder=\"请输入邮箱地址\" style={{ width: 360 }} disabled={this.state.is_edit && this.state.userInfo.reg_type === 2} />\n                                {/* ?<RLInput placeholder='请输入邮箱地址' style={{ width: 360 }} readOnly={this.state.is_edit && this.state.userInfo.type === 'cn'}/> */}\n                            </RLFormItem>\n\n                            <RLFormItem name='id_number' label='身份证号' colon={false}\n                                rules={[\n                                    {\n                                        required: this.isRequired('id_number'),\n                                        message: '请输入身份证号'\n                                    }, {\n                                        pattern: /^[1-9]\\d{5}(18|19|20)\\d{2}((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\\d{3}[0-9Xx]$/,\n                                        message: '身份证号格式错误'\n                                    }\n                                ]\n\n                                }>\n                                <RLInput placeholder='请输入身份证号' style={{ width: 360 }} />\n                            </RLFormItem>\n                            <RLFormItem label=\"身份证正反面照片\" name=\"card\" rules={\n                                [{\n                                    required: this.isRequired('positive_card') || this.isRequired('reverse_card'),\n                                    message: ''\n                                }]\n                            } colon={false}>\n                                <div style={{ display: 'flex', flexDirection: 'row' }}>\n                                    <RLFormItem name='positive_card' colon={false}\n                                        rules={[\n                                            {\n                                                required: this.isRequired('positive_card'),\n                                                message: '请上传身份证正面照片'\n                                            }\n                                        ]}>\n                                        <CmpUpload\n                                            aspect={5 / 3}\n                                            saveUrl={(fileurl) => {\n                                                this.form.setFieldsValue({\n                                                    positive_card: fileurl,\n                                                })\n                                            }}\n                                            clearFile={() => {\n\n                                            }}\n                                            src={this.state.userInfo.positive_card}\n                                            imgStyle={{ width: 202, height: 118, borderRadius: 4, marginRight: 20 }}\n                                            default={require('../../../../assets/images/id_card_positive.png').default}\n                                        />\n                                    </RLFormItem>\n\n                                    <RLFormItem name='reverse_card' colon={false}\n                                        rules={[\n                                            {\n                                                required: this.isRequired('reverse_card'),\n                                                message: '请上传身份证反面照片'\n                                            }\n                                        ]} style={{ marginRight: 20 }}>\n                                        <CmpUpload\n                                            aspect={5 / 3}\n                                            saveUrl={(fileurl) => {\n                                                this.form.setFieldsValue({\n                                                    reverse_card: fileurl,\n                                                })\n                                            }}\n                                            src={this.state.userInfo.reverse_card}\n                                            imgStyle={{ width: 202, height: 118, borderRadius: 4 }}\n                                            default={require('../../../../assets/images/id_card_reverse.png').default}\n                                        />\n                                    </RLFormItem>\n                                </div>\n                            </RLFormItem>\n\n                            <RLFormItem name='in_job' label='公司在职证明' colon={false}\n                                rules={[{\n                                    required: this.isRequired('in_job'),\n                                    message: '请上传公司在职证明'\n                                }]\n                                }>\n                                <div>\n                                    <div style={{display:'flex',flexDirection:'row',alignItems:'flex-end'}}>\n                                        <Upload \n                                            accept=\".jpeg, .png, .pdf\"\n                                            showUploadList={false}\n                                            customRequest={(upload) =>{\n                                                if(! /^.*\\.(jpg|JPG|png|PNG|pdf|PDF)$/.test(upload.file.name)){\n                                                    this.showToast({type:'error', content:'上传文件类型应为jpg、png、pdf'});\n                                                    return;\n                                                }\n                                                if (upload.file.size > 2 * 1024 * 1024) {\n                                                    this.showToast({type:'error',content:'文件大小不应大于2M'});\n                                                    return;\n                                                }\n                                                let formData = new FormData();\n                                                formData.append('type', 'doc')\n                                                formData.append('resource', upload.file);\n                                                commonAction.fileUpload(formData).then(res => {\n                                                    if(res.code === 200){\n                                                        this.setState({\n                                                            userInfo: {\n                                                                ...this.state.userInfo,\n                                                                in_job: res.data.fileurl,\n                                                                in_job_desc: upload.file.name\n                                                            }   \n                                                        });\n                                                        this.form.setFieldsValue({\n                                                            in_job: res.data.fileurl,\n                                                        })\n                                                    }else{\n                                                        this.showToast({type:'error',content:res.msg})\n                                                    }\n                                                    \n                                                })\n                                            }}\n                                        >\n                                            <RLButton label=\"上传文件\"/>\n                                        </Upload>\n                                        <div style={{marginLeft:10}}>凭证提交的图片不超过2M, jpg、png、pdf格式</div>\n                                    </div>\n                                    <div>\n                                        {\n                                            this.state.userInfo.in_job &&\n                                            <CmpFile name={this.state.userInfo.in_job_desc} src={this.state.userInfo.in_job} \n                                                editable={true}\n                                                onDelete={()=>{\n                                                    this.setState({\n                                                        userInfo: {\n                                                            ...this.state.userInfo,\n                                                            in_job: '',\n                                                            in_job_desc: '',\n                                                        }\n                                                       \n                                                    });\n                                                }}\n                                            />\n                                        }\n                                    </div>\n                                </div>\n                            </RLFormItem>\n\n                            <RLFormItem name='job_card' label='工卡及名片同框照片' colon={false}\n                                rules={[{\n                                    required: this.isRequired('job_card'),\n                                    message: '请上传工卡及名片同框照片'\n                                }]\n                                }>\n                                <div>\n                                    <div style={{display:'flex',flexDirection:'row',alignItems:'flex-end'}}>\n                                        <Upload \n                                            accept=\".jpeg, .png, .pdf\"\n                                            showUploadList={false}\n                                            customRequest={(upload) =>{\n                                                if(! /^.*\\.(jpg|JPG|png|PNG|pdf|PDF)$/.test(upload.file.name)){\n                                                    this.showToast({type:'error', content:'上传文件类型应为jpg、png、pdf'});\n                                                    return;\n                                                }\n                                                if (upload.file.size > 2 * 1024 * 1024) {\n                                                    this.showToast({type:'error', content:'文件大小不应大于2M'});\n                                                    return;\n                                                }\n                                                let formData = new FormData();\n                                                formData.append('type', 'doc')\n                                                formData.append('resource', upload.file);\n                                                commonAction.fileUpload(formData).then(res => {\n                                                    if(res.code === 200){\n                                                        this.setState({\n                                                            userInfo: {\n                                                                ...this.state.userInfo,\n                                                                job_card: res.data.fileurl,\n                                                                job_card_desc: upload.file.name\n                                                            }\n                                                        });\n                                                        this.form.setFieldsValue({\n                                                            job_card: res.data.fileurl,\n                                                        })\n                                                    }else{\n                                                        this.showToast({type:'error',content:res.msg})\n                                                    }\n                                                    \n                                                })\n                                            }}\n                                        >\n                                            <RLButton label=\"上传文件\"/>\n                                        </Upload>\n                                        <div style={{marginLeft:10}}>凭证提交的图片不超过2M, jpg、png、pdf格式</div>\n                                    </div>\n                                    <div>\n                                    {\n                                            this.state.userInfo.job_card &&\n                                            <CmpFile name={this.state.userInfo.job_card_desc} src={this.state.userInfo.job_card_desc} \n                                                editable={true}\n                                                onDelete={()=>{\n                                                    this.setState({\n                                                        userInfo: {\n                                                            ...this.state.userInfo,\n                                                            job_card: '',\n                                                            in_job: '',\n                                                        }  \n                                                    });\n                                                }}\n                                            />\n                                        }\n                                    </div>\n                                </div>\n                            </RLFormItem>\n\n                            <RLFormItem name='other' label='其他有效证件' colon={false}\n                                rules={[{\n                                    required: this.isRequired('other'),\n                                    message: '请上传其他有效证件'\n                                }]\n                                }>\n                                <div>\n                                    <div style={{display:'flex',flexDirection:'row',alignItems:'flex-end'}}>\n                                        <Upload \n                                            accept=\".jpeg,.JPEG, .png,.PNG, .pdf,.PDF\"\n                                            showUploadList={false}\n                                            customRequest={(upload) =>{\n                                                if(! /^.*\\.(jpg|JPG|png|PNG|pdf|PDF)$/.test(upload.file.name)){\n                                                    this.showToast({type:'error', content:'上传文件类型应为jpg、png、pdf'});\n                                                    return;\n                                                }\n                                                if (upload.file.size > 2 * 1024 * 1024) {\n                                                    this.showToast({type:'error', content:'文件大小不应大于2M'});\n                                                    return;\n                                                }\n                                                let formData = new FormData();\n                                                formData.append('type', 'doc')\n                                                formData.append('resource', upload.file);\n                                                commonAction.fileUpload(formData).then(res => {\n                                                    if(res.code === 200){\n                                                        this.setState({\n                                                            userInfo: {\n                                                                ...this.state.userInfo,\n                                                                other: res.data.fileurl,\n                                                                other_desc: upload.file.name\n                                                            }   \n                                                        });\n                                                        this.form.setFieldsValue({\n                                                            other: res.data.fileurl,\n                                                        })\n                                                    }else{\n                                                        this.showToast({type:'error',content:res.msg})\n                                                    }\n                                                    \n                                                })\n                                            }}\n                                        >\n                                            <RLButton label=\"上传文件\"/>\n                                        </Upload>\n                                        <div style={{marginLeft:10}}>凭证提交的图片不超过2M, jpg、png、pdf格</div>\n                                    </div>\n                                    <div>\n                                        {\n                                            this.state.userInfo.other &&\n                                            <CmpFile name={this.state.userInfo.other_desc} src={this.state.userInfo.other} \n                                                editable={true}\n                                                onDelete={()=>{\n                                                    this.setState({\n                                                        userInfo: {\n                                                            ...this.state.userInfo,\n                                                            other: '',\n                                                            other_desc: '',\n                                                        }    \n                                                    });\n                                                }}\n                                            />\n                                        }\n                                    </div>\n                                </div>\n                            </RLFormItem>\n\n                            {\n                                !this.state.is_edit ?\n                                    <RLFormItem name='is_approval' label='     ' colon={false} valuePropName=\"checked\"\n                                        rules={[]\n                                        }>\n                                        <RLCheckbox label=\"是否是认证用户\" />\n                                    </RLFormItem> : null\n                            }\n\n                            <RLFormItem>\n                                <div style={{ display: 'flex', justifyContent: 'center' }}>\n                                    <RLButton type=\"default\" label='取消' width={80}\n                                        style={{ display: 'inline-block' }}\n                                        onClick={() => {\n                                            this.props.changePage('list', {\n                                                userPage: this.userPage\n                                            })\n                                        }} />\n                                    <RLButton type=\"primary\"\n                                        htmlType=\"submit\" label={this.userId ? '保存' : '添加'}\n                                        style={{ marginLeft: 40, display: 'inline-block' }}\n                                        loading={this.state.addLoading}\n                                        width={80}\n                                    />\n                                </div>\n                            </RLFormItem>\n                        </RLForm>\n                    }\n\n                </div>\n            </WindowContainer >\n        )\n    }\n\n}\nexport default connect((store, props) => {\n    return {\n        ...props,\n        roleList: store.roleManage.roleList,\n    }\n})(CmpUserEdit)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/userList/CmpUserList.js",["1502","1503","1504","1505","1506","1507","1508","1509","1510","1511","1512"],"import { createRef } from 'react';\nimport BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport { RLInput, RLButton, RLSelect, RLTable, RLFilterTool, RLTooltip, RLDatePicker, RLModal, RLForm, RLFormItem, RLRadioGroup, RLTextarea, RLCheckbox } from '@components/index.js'\nimport actionUserList from '@actions/userManage/actionUserList.js'\nimport actionRoleManage from '@actions/userManage/actionRoleManage.js'\n// import '../../userList/UserList.less'\nimport interfaces from '@/api/interfaces'\nimport utils, { downloadFile } from '@/libs/utils.js'\nimport eventBus from '@/libs/EventBus.js'\nimport config from '@/config.js';\nimport { DatePicker, Input } from 'antd';\nimport axios from 'axios';\n\nclass UserList extends BaseCmp {\n    constructor(props) {\n        super(props)\n        let select = [];\n        let selectList = [];\n        this.state = {\n            searchParam: {  // 筛选用户列表项\n                keyword: null,\n                value: '',\n                role_code: null,\n                approval_state: null,\n                start_date: '',\n                end_date: ''\n            },\n            userListInfo: {\n                pageNum: 1,  // 总叶数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: props.userPage || 1,     // 当前第几页\n            },\n            showSubForm: false,  // 是否显示专业版选择计划框\n            selectedMemberKeys: [],  // 选中的用户\n            corp_id: '',\n            getListLoading: true,       // 获取列表loading,\n\n            showAuthDetailModal: false,\n            showBatchAuthModal: false,\n            showBatchSMSModal: false,\n            showBatchEmailModal: false,\n            showDeleteConformModal: false,\n\n            start_date: null,\n            end_date: null,\n\n            approval_detail: [],\n\n            emailLoading: false,\n            approvalLoading: false,\n            allSelect: [...select],    //所有选择UUID集合\n            allSelectList: [...selectList],   //所有选择列表集合\n        }\n        this.columns = [\n            {\n                title: '序号',\n                dataIndex: 'uuid',\n                key: 'uuid',\n                width: '10%',\n                render: (text, record, index) => {\n                    return <div>{(this.state.userListInfo.page - 1) * this.pageSize + index + 1}</div>\n                }\n            },\n            {\n                title: '姓名',\n                key: 'nickname',\n                width: '10%',\n                render: (text, record) => {\n                    return <RLTooltip placement=\"bottomLeft\" title={record.nickname}>\n                        <div className='line-clamp-noColor'>\n                            {record.nickname}\n                        </div>\n                    </RLTooltip>\n                }\n            },\n            {\n                title: '角色',\n                dataIndex: 'role_name',\n                key: 'role_name',\n                width: '10%'\n            },\n            {\n                title: '手机号',\n                key: 'mobile',\n                width: '12%',\n                render: (text, record) => {\n                    return <RLTooltip placement=\"bottomLeft\" title={record.mobile}>\n                        <div className='line-clamp-noColor'>\n                            {record.mobile}\n                        </div>\n                    </RLTooltip>\n                }\n            },\n            {\n                title: '邮箱',\n                key: 'email',\n                width: '12%',\n                render: (text, record) => {\n                    return <RLTooltip placement=\"bottomLeft\" title={record.email}>\n                        <div className='line-clamp-noColor'>\n                            {record.email}\n                        </div>\n                    </RLTooltip>\n                }\n            },\n            {\n                title: '机构名称',\n                dataIndex: 'company_name',\n                key: 'company_name',\n                width: '12%'\n            },\n            {\n                title: '认证状态',\n                key: 'status',\n                width: '12%',\n                render: (text, record) => {\n                    return <div>\n                        <div style={{ color: this.getColor(record.approval_status) }}> {record.approval_status_desc} </div>\n                        {record.approval_status === 3 || record.approval_status === 4 ?\n                            <div style={{ color: '#8F1D22', cursor: 'pointer' }}\n                                onClick={(event) => {\n                                    event.stopPropagation();\n                                    actionUserList.getApprovalDetail(record.uuid).then(res => {\n                                        if (res.code === 200) {\n                                            this.setState({\n                                                approval_detail: res.data.approval,\n                                                showAuthDetailModal: true\n                                            })\n                                        } else {\n                                            this.showToast({ type: 'error', content: '获取认证详情失败' });\n                                        }\n                                    }).catch(err => {\n                                        this.showToast({ type: 'error', content: '获取认证详情失败' });\n                                    });\n                                }}>\n                                认证详情\n                            </div> : null}\n                    </div>\n                }\n            },\n            {\n                title: '创建时间',\n                dataIndex: 'created_at',\n                key: 'created_at',\n                width: '12%'\n            },\n            {\n                title: <span style={{ paddingLeft: 6 }}>操作</span>,\n                key: 'option',\n                width: '16%',\n                render: (text, record) => (\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\n                        {\n                            <RLButton\n                                type='link'\n                                label='查看'\n                                onClick={(e) => {\n                                    e.stopPropagation()\n                                    this.props.changePage('detail', {\n                                        userId: record.uuid,\n                                        userPage: this.state.userListInfo.page\n                                    })\n                                }}\n                                style={{ color: '#8F1D22' }}\n                            />\n                        }\n                        {\n                            interfaces.USER_EDIT &&\n                            record.role_code !== 'admin' &&\n                            record.approval_status !== 4 &&\n                            <RLButton\n                                type='link'\n                                label='编辑'\n                                onClick={(e) => {\n                                    e.stopPropagation()\n                                    this.props.changePage('edit', {\n                                        userId: record.uuid,\n                                        userPage: this.state.userListInfo.page\n                                    })\n                                }}\n                                style={{ color: '#8F1D22' }}\n                            />\n                        }\n                        {\n                            interfaces.USER_DELETE &&\n                            record.role_code !== 'admin' &&\n                            (\n                                <RLButton\n                                    type='link' label='删除'\n                                    onClick={(e) => {\n                                        e.stopPropagation()\n                                        this.delUser(record)\n                                    }}\n                                    style={{ color: '#8F1D22' }}\n                                />\n                            )\n                        }\n                    </div>\n                )\n            },\n        ]\n        this.approve_culumns = [\n            {\n                title: '审核员',\n                dataIndex: 'approval_operator',\n                key: 'approval_operator',\n                width: '20%'\n            },\n            {\n                title: '审核时间',\n                dataIndex: 'approval_time',\n                key: 'approval_time',\n                width: '30%'\n            },\n            {\n                title: '审核结果',\n                dataIndex: 'operate_status',\n                key: 'operate_status',\n                width: '15%',\n                render: (text, record, index) => {\n                    return (<span style={{ color: record.operate_status === 1 ? '#09b391' : '#000000' }}>\n                        {record.operate_status === 1 ? '已同意' : '已拒绝'}\n                    </span>)\n                }\n            },\n            {\n                title: '认证详情',\n                dataIndex: 'remark',\n                key: 'remark',\n                width: '35%'\n            },\n        ];\n        this.getUserList();\n        if (!this.props.roleList.length) {\n            actionRoleManage.getAllRoles().then(res => {\n                if (res.code === 200) {\n\n                } else {\n\n                }\n            })\n        }\n    }\n    componentWillMount() {\n    }\n    componentWillUnmount() {\n\n    }\n    batchExport = () => {\n        actionUserList.userExport(this.state.allSelect).then(res => {\n            if (res.code === 200) {\n                downloadFile(res.data, '用户名单.xlsx');\n                this.setState({\n                    allSelect: [],\n                    allSelectList: []\n                })\n            }\n\n        }).catch(err => {\n            console.log(err);\n        });\n    }\n    batchApprove = (values) => {\n        this.setState({\n            approvalLoading: true\n        });\n        return actionUserList.userApprove({\n            status: values.status,\n            remark: values.remark || '',\n            users: this.state.allSelect\n        }).then(res => {\n            if (res.code === 200) {\n                this.showToast({ type: 'success', content: '认证成功' });\n                this.setState({\n                    showBatchAuthModal: false,\n                    allSelect: [],\n                    allSelectList: []\n                });\n                this.getUserList();\n            } else {\n                this.showToast({ type: 'error', content: '认证失败' });\n                this.setState({\n                    showBatchAuthModal: false\n                })\n            }\n            this.setState({\n                approvalLoading: true\n            });\n        }).catch(err => {\n            this.showToast({ type: 'error', content: err.msg });\n            this.setState({\n                showBatchAuthModal: false\n            });\n            this.setState({\n                approvalLoading: true\n            });\n        })\n    }\n    batchSendEmail = (values) => {\n        this.setState({\n            emailLoading: true\n        });\n        actionUserList.sendEmail({ ...values, users: this.state.allSelect }).then(res => {\n            if (res.code === 200) {\n                this.showToast({ type: 'success', content: '邮件发送成功！' });\n                this.setState({\n                    showBatchEmailModal: false,\n                    allSelect: [],\n                    allSelectList: []\n                });\n            } else {\n                this.showToast({ type: 'error', content: '请求失败' });\n                this.setState({\n                    showBatchEmailModal: false\n                });\n            }\n            this.setState({\n                emailLoading: false\n            });\n        }).catch(err => {\n            this.showToast({ type: 'error', content: '请求失败' });\n            this.setState({\n                showBatchEmailModal: false\n            });\n            this.setState({\n                emailLoading: false\n            });\n        })\n    }\n    // 删除用户\n    delUser = (record) => {\n        let is_batch = !record;\n        let users = is_batch ? this.state.allSelect : [record.uuid];\n        this.showModal({\n            content: <div>\n                <div>确认删除后，员工信息将被销毁，将不可登录应用，是否确认删除?</div>\n                <RLCheckbox\n                    label=\"清空用户数据\"\n                    defaultChecked={true}\n                />\n            </div>,\n            title: `确定删除${is_batch ? '选中的' : '该'}用户?`,\n            okText: '删除',\n            cancelText: '取消',\n            onOk: () => {\n                return this.userDelConfirm(users)\n            },\n            onCancel: () => { },\n            size: 'big'\n        })\n    }\n\n    userDelConfirm = (users) => {\n\n        return actionUserList.userDel(users).then(res => {\n            if (res.code === 200) {\n                this.showToast({ type: 'success', content: '删除成功' })\n                this.setState({\n                    allSelect: [],\n                    allSelectList: []\n                });\n                this.getUserList();\n            } else {\n                this.showToast({ type: 'error', content: '删除失败' })\n            }\n        })\n    }\n\n    getUserList({ page = this.state.userListInfo.page } = { page: this.state.userListInfo.page }) {\n        this.setState({\n            getListLoading: true\n        })\n        actionUserList.getUserList({\n            keyword: this.state.searchParam.keyword || '',\n            value: this.state.searchParam.value || '',\n            role_code: this.state.searchParam.role_code || '',\n            approval_status: this.state.searchParam.approval_state || '',\n            start_time: this.state.searchParam.start_date || '',\n            end_time: this.state.searchParam.end_date || '',\n            page,\n            pagesize: this.pageSize\n        }).then(res => {\n            if (res.code === 200) {\n                if (res.data && res.data.list.length === 0 && page > 1) {\n                    this.getUserList({ page: page - 1 })\n                } else {\n                    let newState = {\n                        getListLoading: false,\n                        userListInfo: {\n                            list: res.data.list,\n                            page,\n                            count: res.data.count,\n                            pageNum: Math.ceil(res.data.count / this.pageSize)\n                        }\n                    }\n                    if (res.data.list && res.data.list[0]) {\n                        newState.corp_id = res.data.list[0].corp_id\n                    }\n                    this.setState(newState);\n                }\n            }\n        }).finally(() => {\n            // this.setState({\n            //     getListLoading: false\n            // })\n        })\n    }\n\n    getLeftItems = () => {\n        return (\n            [\n                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                    <span style={{ marginRight: 5 }}>从</span>\n                    <RLDatePicker placeholder=\"请选择日期\"\n                        allowClear\n                        ref={c => this.startDateInput = c}\n                        picker=\"date\"\n                        style={{ width: 130, marginRight: 5 }}\n                        format=\"YYYY-MM-DD\"\n                        value={this.state.start_date}\n                        onChange={(val, dateString) => {\n                            this.setState({\n                                start_date: val,\n                                searchParam: {\n                                    ...this.state.searchParam,\n                                    start_date: dateString\n                                }\n                            })\n                        }} />\n                    <span style={{ marginRight: 5 }}>至</span>\n                    <RLDatePicker placeholder=\"请选择日期\"\n                        allowClear\n                        ref={c => this.endDateInput = c}\n                        picker=\"date\"\n                        style={{ width: 130, marginRight: 20 }}\n                        format=\"YYYY-MM-DD\"\n                        value={this.state.end_date}\n                        onChange={(val, dateString) => {\n                            this.setState({\n                                end_date: val,\n                                searchParam: {\n                                    ...this.state.searchParam,\n                                    end_date: dateString\n                                }\n                            })\n                        }} />\n                </div>,\n                <RLSelect\n                    ref={c => this.keywordInput = c}\n                    allowClear\n                    options={[\n                        {\n                            label: '手机号',\n                            value: 'mobile'\n                        },\n                        {\n                            label: '姓名',\n                            value: 'nickname'\n                        },\n                        {\n                            label: '邮箱',\n                            value: 'email'\n                        }\n                    ]}\n                    style={{ width: 100, marginRight: 20 }}\n                    placeholder='请选择'\n                    value={this.state.searchParam.keyword}\n                    onChange={(val) => {\n                        this.setState({\n                            searchParam: {\n                                ...this.state.searchParam,\n                                keyword: val\n                            }\n                        })\n                    }}\n                    key='type'\n                />,\n                <RLInput\n                    ref={c => this.valueInput = c}\n                    placeholder='请输入'\n                    allowClear\n                    key='keyword'\n                    style={{ width: 150, marginRight: 20 }}\n                    value={this.state.searchParam.value}\n                    onChange={(e) => {\n                        this.setState({\n                            searchParam: {\n                                ...this.state.searchParam,\n                                value: e.target.value\n                            }\n                        })\n                    }}\n                />,\n                <RLSelect\n                    ref={c => this.roleInput = c}\n                    allowClear\n                    options={[...this.props.roleList]}\n                    style={{ width: 150, marginRight: 20 }}\n                    placeholder='请选择角色类型'\n                    valuekey='role_code'\n                    labelkey='role_name'\n                    value={this.state.searchParam.role_code}\n                    onChange={(val) => {\n                        this.setState({\n                            searchParam: {\n                                ...this.state.searchParam,\n                                role_code: val\n                            }\n                        })\n                    }}\n                    key='type'\n                />,\n                <RLSelect\n                    ref={c => this.stateInput = c}\n                    allowClear\n                    options={config.approvalStatus}\n                    style={{ width: 150, marginRight: 20 }}\n                    placeholder='请选择认证状态'\n                    value={this.state.searchParam.approval_state}\n                    onChange={(val) => {\n                        this.setState({\n                            searchParam: {\n                                ...this.state.searchParam,\n                                approval_state: val\n                            }\n                        })\n                    }}\n                    key='type'\n                />,\n\n                <RLButton label='搜索'\n                    type='primary'\n                    key='add'\n                    onClick={() => {\n                        this.getUserList();\n                    }}\n                    style={{ marginRight: 20 }}\n                />,\n\n                <RLButton label='重置'\n                    key='add'\n                    onClick={() => {\n                        this.setState({\n                            start_date: null,\n                            end_date: null,\n                            searchParam: {\n                                keyword: null,\n                                value: '',\n                                role_code: null,\n                                approval_state: null,\n                                start_date: '',\n                                end_date: ''\n                            }\n                        }, () => {\n                            this.getUserList();\n                        });\n                    }}\n                    style={{ marginRight: 20 }} />,\n                <RLButton />\n            ]\n        )\n    }\n\n    getRightItems = () => {\n        return (\n            [\n                interfaces.USER_ADD && <RLButton\n                    label='新增用户'\n                    type='primary'\n                    key='add'\n                    onClick={() => {\n                        this.props.changePage('edit', {\n                            userPage: this.state.userListInfo.page\n                        })\n                    }}\n                    style={{ marginLeft: 20 }}\n                />,\n                interfaces.USER_IMPORT && <RLButton\n                    type=\"default\"\n                    label=\"批量导入\"\n                    key=\"batch_import\"\n                    onClick={() => {\n                        this.props.changePage('batch_import', {\n                            userPage: this.state.userListInfo.page\n                        });\n                    }}\n                    style={{ marginLeft: 20 }}\n                />,\n                interfaces.USER_EXPORT && <RLButton\n                    type=\"default\"\n                    label=\"批量导出\"\n                    key=\"batch_export\"\n                    onClick={() => {\n                        this.batchExport();\n                    }}\n                    disabled={this.state.allSelectList.length <= 0}\n                    style={{ marginLeft: 20 }}\n                />,\n                interfaces.USER_APPROVE && <RLButton\n                    type=\"default\"\n                    label=\"批量认证\"\n                    key=\"batch_approve\"\n                    onClick={() => {\n                        this.setState({ showBatchAuthModal: true })\n                    }}\n                    disabled={this.state.allSelectList.length <= 0}\n                    style={{ marginLeft: 20 }}\n                />,\n                interfaces.USER_DELETE && <RLButton\n                    type=\"default\"\n                    label=\"批量删除\"\n                    key=\"batch_delete\"\n                    onClick={() => {\n                        this.delUser();\n                    }}\n                    disabled={this.state.allSelectList.length <= 0}\n                    style={{ marginLeft: 20 }}\n                />,\n                interfaces.USER_SEND_EMAIL && <RLButton\n                    type=\"default\"\n                    label=\"群发邮件\"\n                    key=\"batch_email\"\n                    onClick={() => {\n                        this.setState({ showBatchEmailModal: true });\n                    }}\n                    disabled={this.state.allSelectList.length <= 0}\n                    style={{ marginLeft: 20 }}\n                />,\n            ]\n        )\n    }\n    onSelectChange = (selectedRowKeys, selectedRows) => {\n        let i = 0;\n        let currentPage = this.state.userListInfo.list;\n        let allSelect = [...this.state.allSelect];\n        let allSelectList = [...this.state.allSelectList];\n        for (i; i < currentPage.length; i++) {\n            let isInSelect = selectedRowKeys.findIndex(ele => { return ele == currentPage[i].uuid })\n            let isInOrigin = allSelect.findIndex(ele => { return ele == currentPage[i].uuid })\n            let isInList = allSelectList.findIndex(ele => { return ele.uuid == currentPage[i].uuid })\n            if (isInSelect === -1 && isInOrigin !== -1) {\n                allSelect.splice(isInOrigin, 1);\n                if (isInList !== -1) {\n                    allSelectList.splice(isInList, 1);\n                }\n            } else if (isInSelect !== -1 && isInOrigin === -1) {\n                allSelect.push(selectedRowKeys[isInSelect]);\n                if (isInList === -1) {\n                    allSelectList.push(currentPage[i]);\n                }\n            }\n            this.setState({\n                allSelect: [...allSelect],\n                allSelectList: [...allSelectList]\n            })\n        }\n    }\n    pageChange = (page, pageSize) => {\n        this.getUserList({ page })\n    }\n\n    getColor(code) {\n        switch (code) {\n            case 1: //未提交\n                return '#216BFF';\n            case 2: //待认证\n                return '#FF8921';\n            case 3: //已同意\n                return '#999999';\n            case 4: //已拒绝\n                return 'DB0B00';\n            default:\n                return '';\n        }\n    }\n    render() {\n        return (\n            <WindowContainer title={this.pageTitle}>\n                <div className='content-user'>\n                    <RLFilterTool leftItems={this.getLeftItems} rightItems={[]} />\n                    <RLFilterTool leftItems={[]} rightItems={this.getRightItems} />\n                    <RLTable\n                        loading={this.state.getListLoading}\n                        dataSource={this.state.userListInfo.list}\n                        rowKey='uuid'\n                        columns={this.columns}\n                        rowSelection={{\n                            type: 'checkbox',\n                            selectedRowKeys: this.state.allSelect,\n                            onChange: this.onSelectChange,\n                            getCheckboxProps: (record) => ({\n                                disabled: false\n                            })\n                        }}\n                        paginationInfo={{\n                            // selectedRowKeys: this.state.allSelectList,\n                            total: this.state.userListInfo.count,\n                            pageSize: this.pageSize,\n                            onChange: this.pageChange,\n                            current: this.state.userListInfo.page\n                        }}\n                        // onRow={(record) => {\n                        //     return {\n                        //         onClick: (e) => {\n                        //             this.rowClick(e, record)\n                        //         }\n                        //     }\n                        // }}\n                        rowClassName='rl-table-click-row'\n                    />\n                    {this.state.showAuthDetailModal && <RLModal\n                        title=\"认证详情\"\n                        visible={this.state.showAuthDetailModal}\n                        width=\"640px\"\n                        height=\"480px\"\n                        footer={null}\n                        onCancel={() => {\n                            this.setState({\n                                showAuthDetailModal: false\n                            })\n                        }}>\n                        <div style={{}}>\n                            <RLTable\n                                columns={this.approve_culumns}\n                                dataSource={this.state.approval_detail}\n                                rowKey='uuid'\n                            />\n                        </div>\n                    </RLModal>}\n                    {this.state.showBatchAuthModal && <RLModal\n                        title=\"批量认证\"\n                        visible={this.state.showBatchAuthModal}\n                        footer={null}\n                        width={640}\n                        onCancel={() => {\n                            this.setState({\n                                showBatchAuthModal: false\n                            })\n                        }}>\n                        <div style={{}}>\n                            <RLForm onFinish={this.batchApprove} validateTrigger='onBlur' initialValues={{ status: 1 }}>\n                                <RLFormItem label=\"用户认证\" name=\"status\" colon={false}>\n                                    <RLRadioGroup\n                                        items={[\n                                            { value: 1, label: '同意' },\n                                            { value: 2, label: '拒绝' },\n                                        ]} />\n                                </RLFormItem>\n                                <RLFormItem label=\"认证详情\" name=\"remark\" rules={[]}>\n                                    <RLTextarea placeholder=\"请输入认证详情\" style={{ width: 508, height: 219 }} />\n                                </RLFormItem>\n                                <RLFormItem>\n                                    <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'center', marginTop: 20 }}>\n                                        <RLButton label=\"取消\"\n                                            onClick={() => {\n                                                this.setState({\n                                                    showBatchAuthModal: false\n                                                })\n                                            }}\n                                            style={{ marginRight: 40 }} />\n                                        <RLButton label=\"确定\"\n                                            type=\"primary\"\n                                            htmlType=\"submit\" \n                                            loading={this.state.approvalLoading}\n                                        />\n                                    </div>\n                                </RLFormItem>\n                            </RLForm>\n                        </div>\n                    </RLModal>}\n                    {this.state.showBatchEmailModal && <RLModal\n                        title=\"群发邮件\"\n                        visible={this.state.showBatchEmailModal}\n                        footer={null}\n                        width={640}\n                        onCancel={() => {\n                            this.setState({\n                                showBatchEmailModal: false\n                            })\n                        }}>\n                        <div style={{}}>\n                            <RLForm onFinish={this.batchSendEmail}>\n                                <RLFormItem label=\"邮件主题\" name=\"title\"\n                                    rules={[{\n                                        required: true,\n                                        message: '请输入邮件标题'\n                                    }]}>\n                                    <RLInput name=\"\" placeholder=\"请输入通知栏标题\" style={{ width: 360 }} />\n                                </RLFormItem>\n                                <RLFormItem label=\"邮件内容\" name=\"content\"\n                                    rules={[{\n                                        required: true,\n                                        message: '请输入邮件内容'\n                                    }]}>\n                                    <Input.TextArea name=\"\" placeholder=\"请输入邮件内容\" style={{ width: 508, height: 219 }} />\n                                </RLFormItem>\n                                <div style={{ fontSize: 12, color: '#666666', marginLeft: 80, marginTop: -5 }}>邮件内容不能为空，长度限不能超过4000个字符</div>\n                                <RLFormItem>\n                                    <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'center', marginTop: 20 }}>\n                                        <RLButton label=\"取消\"\n                                            type=\"normal\"\n                                            onClick={() => { this.setState({ showBatchEmailModal: false }) }}\n                                            style={{ marginRight: 40 }} />\n                                        <RLButton label=\"确定\"\n                                            htmlType=\"submit\"\n                                            type=\"primary\" \n                                            loading={this.state.emailLoading}\n                                        />\n                                    </div>\n                                </RLFormItem>\n                            </RLForm>\n                        </div>\n                    </RLModal>}\n                </div>\n            </WindowContainer>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props,\n        roleList: store.roleManage.roleList,\n    }\n})(UserList)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/userList/CmpUserDetail.js",["1513","1514","1515","1516","1517","1518","1519","1520","1521","1522","1523"],"import BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport {\n    RLInput, RLButton, RLDisplayBoard, RLForm, RLFormItem, RLRadioGroup\n} from '@components/index.js'\nimport PhoneRegionView from '@/pages/common/PhoneRegionView.js'\nimport actionUserList from '@actions/userManage/actionUserList.js'\nimport commonAction from '@actions/commonActions'\nimport utils from '@/libs/utils.js'\nimport interfaces from '@/api/interfaces';\n\nimport { Upload } from 'antd';\nimport CmpFile from '@/pages/marketingTool/components/QAManage/CmpFile.js';\n\nclass CmpUserDetail extends BaseCmp {\n    constructor(props) {\n        super(props)\n       \n        this.userId = props.userId;\n        this.userPage = props.userPage;\n\n        this.state = {\n            userInfo: {},\n        }\n\n    }\n    componentWillMount() {\n        this.getUserInfo()\n    }\n    getUserInfo = () => {\n        actionUserList.getUserDetail({ uuid: this.userId }).then(res => {\n            if (res.code === 200) {\n                this.setState({\n                    userInfo: res.data\n                })\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        })\n    }\n    baseUserInfo = () => {\n        let valueBtnStyle = {\n            paddingLeft: 20,\n            display: 'flex',\n            flexDirection: 'row'\n        };\n        let labelStyle = {\n            color: '#999',\n            fontSize: 14,\n            lineHeight: '20px',\n            textAlign: 'right',\n            // marginTop: 12,\n            marginRight: 30,\n            flex: 'none',\n            width: 140\n        };\n        let labelStyle2 = {\n            color: '#999',\n            fontSize: 14,\n            lineHeight: '20px',\n            textAlign: 'right',\n            // marginTop: 12,\n            marginRight: 30,\n            flex: 'none',\n            width: 140,\n            height: 50,\n            display:'flex',\n            flexDirection:'row',\n            justifyContent: 'flex-end',\n            alignItems:'center'\n        }\n        // let labelStyle = { flex: 'none', width: 70, fontSize: 14, lineHeight: '20px', color: '#999', textAlign: 'left' }\n        let userInfoBoardItems = [\n            {\n                // title: '基本信息',\n                list: [\n                    {\n                        label: '姓名',\n                        value: <div style={valueBtnStyle}>\n                           <div>{this.state.userInfo.nickname }</div>\n                        </div>,\n                        labelStyle,\n                        valueStyle: { flex: 1, fontSize: 14, lineHeight: '20px', color: '#333', paddingLeft: 20 }\n                    },\n                    {\n                        label: '手机号',\n                        value: <div style={valueBtnStyle}>\n                           <div>{this.state.userInfo.mobile }</div>\n                        </div>,\n                        labelStyle,\n                        valueStyle: { flex: 1, fontSize: 14, lineHeight: '20px', color: '#333', paddingLeft: 20 }\n                    }, \n                    {\n                        label: '机构全称',\n                        value: <div style={valueBtnStyle}>\n                            <div>{this.state.userInfo.company_name}</div>\n                        </div>,\n                        labelStyle,\n                        valueStyle: { flex: 1, fontSize: 14, lineHeight: '20px', color: '#333', paddingLeft: 20 },\n\n                    },\n                    {\n                        label: '头像',\n                        value: <div style={valueBtnStyle}>\n                            <img src={this.state.userInfo.avatar || require('../../../../assets/images/logo.png').default} style={{width:56, height:56, borderRadius:'50%'}}/>\n                        </div>,\n                        labelStyle,\n                    },\n                    {\n                        label: '部门',\n                        value: <div style={valueBtnStyle}>\n                            <div>{this.state.userInfo.department}</div>\n                        </div>,\n                        labelStyle,\n                    },\n                    {\n                        label: '职务',\n                        value: <div style={valueBtnStyle}>\n                            <div>{this.state.userInfo.position }</div>\n                        </div> ,\n                        labelStyle\n                    },\n                    {\n                        label: '邮箱',\n                        value: <div style={valueBtnStyle}>\n                            <div>{this.state.userInfo.email}</div>\n                        </div>,\n                        labelStyle\n                    },\n                    {\n                        label: '身份证号',\n                        value: <div style={valueBtnStyle}>\n                            <div>{this.state.userInfo.id_number}</div>\n                        </div>,\n                        labelStyle\n                    },\n                    {\n                        label: '身份证正反照片',\n                        value: <div style={valueBtnStyle}>\n                            {\n                               !this.state.userInfo.positive_card && !this.state.userInfo.reverse_card ?\n                               <span>未上传</span>:\n                               <>\n                                    <img src={this.state.userInfo.positive_card || require('../../../../assets/images/card_positive.png')} alt='' style={{width: 202,height:118}}></img>\n                                    <img src={this.state.userInfo.reverse_card || require('../../../../assets/images/card_positive.png')} alt='' style={{width: 202,height:118, marginLeft:10}}></img>\n                               </>\n\n                            }        \n                        </div>,\n                        labelStyle,\n                    },\n                    {\n                        label: '公司在职证明',\n                        value: <div style={valueBtnStyle}>\n                            {\n                                this.state.userInfo.in_job ? \n                                <div style={{marginTop: -12}}>\n                                    <CmpFile \n                                        src={this.state.userInfo.in_job}\n                                        name={this.state.userInfo.in_job_desc}\n                                        editable={false}\n                                        click={()=>{\n                                            window.open(this.state.userInfo.in_job);\n                                        }}\n                                    />\n                                </div>:\n                                <span>未上传</span>\n                            }\n                        </div>,\n                        labelStyle,\n                    },\n                    {\n                        label: '工卡及名片同框照片',\n                        value: <div style={valueBtnStyle}>\n                            {\n                                this.state.userInfo.job_card ? \n                                <div style={{marginTop: -12}}>\n                                    <CmpFile \n                                        src={this.state.userInfo.in_job}\n                                        name={this.state.userInfo.in_job_desc}\n                                        editable={false}\n                                        click={()=>{\n                                            window.open(this.state.userInfo.in_job);\n                                        }}\n                                    />\n                                </div>:\n                                <span>未上传</span>\n                            }\n                        </div>,\n                        labelStyle,\n                    },\n                    {\n                        label: '其他有效证件',\n                        value: <div style={valueBtnStyle}>\n                            {\n                                this.state.userInfo.other ? \n                                <div style={{marginTop: -12}}>\n                                    <CmpFile \n                                        src={this.state.userInfo.other}\n                                        name={this.state.userInfo.other_desc}\n                                        editable={false}\n                                        click={()=>{\n                                            window.open(this.state.userInfo.other);\n                                        }}\n                                    />\n                                </div> : \n                                <span>未上传</span>\n                            }\n                        </div>,\n                        labelStyle: {...labelStyle, textAlign:'center'},\n                    }\n\n                ]\n            },  \n        ]\n        return (\n            <RLDisplayBoard style={{ width: '100%' }} className='base-info' items={userInfoBoardItems}></RLDisplayBoard>\n        )\n    }\n    pageTitle = () => {\n        return (\n            <div className=\"custom-page-title\">\n                <span>用户详情</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.changePage('list',{\n                            userPage: this.userPage\n                        })\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <WindowContainer title={this.pageTitle}>\n                <div style={{display:'flex', flexDirection:'column',alignItems:'center'}}>\n                    {this.baseUserInfo()}\n                    {/* <RLButton label=\"返回\" \n                        type=\"primary\"\n                        onClick={ ()=> {\n                            this.props.changePage('list',{\n                                userPage: this.userPage\n                            });\n                        }}\n                        style={{marginTop: 15}}/> */}\n                </div>\n            </WindowContainer>\n        )\n    }\n\n}\nexport default connect((store, props) => {\n    return {\n        ...props,\n        roleList: store.roleManage.roleList,\n    }\n})(CmpUserDetail)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/userList/CmpUserImport.js",["1524","1525","1526","1527","1528","1529","1530","1531","1532","1533","1534","1535","1536"],"import BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport {\n    RLInput, RLButton, RLDisplayBoard, RLForm, RLFormItem, RLRadioGroup, RLModal, RLTable\n} from '@components/index.js'\nimport actionUserList from '@actions/userManage/actionUserList.js';\nimport commonAction from '@actions/commonActions';\nimport commonImgs from '@/libs/images';\nimport utils from '@/libs/utils.js'\nimport interfaces from '@/api/interfaces';\nimport { Upload } from 'antd'\nimport './importModal.less';\n\nclass CmpUserImport extends BaseCmp {\n    constructor(props) {\n        super(props)\n\n        this.userId = props.userId;\n        this.userPage = props.userPage;\n\n        this.state = {\n            showImportResultModal: false,\n            showImportingModal: false,\n\n            selected: false,\n            uploadFile: null,\n            importResult: null\n        }\n\n        this.columns = [\n            {\n                title: 'Excel行号',\n                dataIndex: 'line',\n                key: 'line',\n                width: '20%'\n            },\n            {\n                title: '姓名',\n                dataIndex: 'nickname',\n                key: 'nickname',\n                width: '20%'\n            },\n            {\n                title: '手机号',\n                dataIndex: 'mobile',\n                key: 'mobile',\n                width: '20%'\n            },\n            {\n                title: '机构名称',\n                dataIndex: 'company_name',\n                key: 'company_name',\n                width: '20%'\n            },\n            {\n                title: '失败原因',\n                dataIndex: 'error_msg',\n                key: 'error_msg',\n                width: '30%'\n            }\n        ]\n\n    }\n    componentWillMount() {\n        // this.getUserInfo()\n    }\n    pageTitle = () => {\n        return (\n            <div className=\"custom-page-title\">\n                <span>导入用户</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.changePage('list', {\n                            userPage: this.userPage\n                        })\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <WindowContainer title={this.pageTitle}>\n                <div style={{ border: '1px solid #DCDFE6', width: '100%', height: 586, borderRadius: 9 }}>\n                    <div style={{ borderBottom: '1px solid #DCDFE6', height: 161, display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\n                        <div style={{ width: '84%' }}>\n                            <div>1. 下载导入模板</div>\n                        </div>\n                        <div style={{ width: '80%', marginTop: 20 }}>\n                            <div>根据提示信息完善表格内容</div>\n                        </div>\n                        <div style={{ width: '80%', marginTop: 20 }}>\n                            <div onClick={() => {\n                                actionUserList.downloadTemplate();\n                            }}\n                                style={{ display: 'flex', flexDirection: 'row', justifyContent: 'center', alignItems: 'center', border: '1px solid #DCDFE6', borderRadius: 4, width: 164, height: 36, cursor: 'pointer' }}>\n                                <img src={require('../../../../assets/images/download.png').default} style={{ width: 16, height: 16 }} />\n                                <span style={{ marginLeft: 5 }}>下载空的模板表格</span>\n                            </div>\n                        </div>\n                    </div>\n                    <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\n                        <div style={{ width: '84%', marginTop: 20 }}>\n                            <div>2. 上传完善后的表格</div>\n                        </div>\n                        <div style={{ width: '80%', marginTop: 20, border: '1px solid #DCDFE6', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', height: 191 }}>\n                            <img src={require('../../../../assets/images/xls.png').default} style={{ width: 40, height: 40 }} />\n                            {this.state.selected ? <span style={{ marginTop: 5 }}>{`${this.state.uploadFile.name}(${parseFloat(this.state.uploadFile.size / 1024).toFixed(1)}k)`}</span> : null}\n                            <Upload accept=\"application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                                beforeUpload={(file) => {\n                                    this.setState({\n                                        uploadFile: file,\n                                        selected: true\n                                    })\n                                    return false\n                                }}\n                                showUploadList={false}\n                            >\n                                <RLButton type=\"primay\" label={this.state.selected ? '重新选择' : '选择文件'} style={{ marginTop: 10 }} />\n                            </Upload>\n                            <div style={{ marginTop: 5 }}>下载模板并完善信息后，点击【选择文件】上传，支持格式：xls、xlsx</div>\n                        </div>\n                    </div>\n                    <div style={{ marginTop: 20, display: 'flex', flexDirection: 'row', justifyContent: 'center' }}>\n                        <RLButton label=\"取消\"\n                            onClick={() => {\n                                this.props.changePage('list', {\n                                    userPage: this.userPage\n                                });\n                            }}\n                            style={{ marginRight: 40 }}\n                        />\n                        <RLButton label=\"导入\"\n                            type=\"primary\"\n                            disabled={!this.state.selected}\n                            onClick={() => {\n                                if (!this.state.uploadFile) {\n                                    this.showToast({ type: 'normal', content: '请先选择上传文件！' });\n                                    return;\n                                }\n                                let formData = new FormData();\n                                formData.append('file', this.state.uploadFile);\n                                this.setState({\n                                    showImportingModal: true,\n                                });\n                                actionUserList.userImport(formData).then(res => {\n                                    if (res.code === 200) {\n                                        this.setState({\n                                            importResult: res.data,\n                                            showImportingModal: false,\n                                            showImportResultModal: true\n                                        })\n                                    } else {\n                                        this.showToast({ type: 'error', content: res.msg });\n                                        this.setState({\n                                            showImportingModal: false\n                                        })\n                                    }\n                                }).catch(err => {\n                                    this.setState({\n                                        showImportingModal: false\n                                    });\n                                    this.showToast({ type: 'error', content: err.msg });\n                                });\n                            }}\n                        />\n                    </div>\n                </div>\n                {this.state.showImportingModal && <RLModal\n                    visible={this.state.showImportingModal}\n                    header={null}\n                    footer={null}\n                    closable={false}>\n                    <div>\n                        <div style={{ fontSize: 12, color: '#333333' }}>数据导入中，请勿离开当前页面</div>\n                        <div style={{ fontSize: 12, color: '#666666', marginTop: 8 }}>\n                            <span>{this.state.uploadFile && this.state.uploadFile.name}</span>\n                        </div>\n                    </div>\n                </RLModal>}\n                {this.state.showImportResultModal && <RLModal\n                    visible={this.state.showImportResultModal}\n                    footer={null}\n                    closable={false}\n                    className=\"importModal\">\n                    <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', width: '100%', height: '100%' }}>\n                        {\n                            this.state.importResult && this.state.importResult.list.length === 0 ?\n                                <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', width: '100%', heught: '100%' }}>\n                                    <img src={require('../../../../assets/images/success.png').default} style={{ width: 56, height: 56 }} />\n                                    <div style={{ marginTop: 5 }}> 成功导入{this.state.importResult && this.state.importResult.success_count}条 </div>\n                                    <RLButton label=\"完成\"\n                                        type=\"primary\"\n                                        onClick={() => {\n                                            this.setState({\n                                                showImportResultModal: false\n                                            })\n                                        }}\n                                        style={{ marginTop: 30 }} />\n                                </div>\n                                :\n                                <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', width: '100%', heught: '100%' }}>\n                                    <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', borderBottom: '1px solid #e5e5e5', height: 92, width: '100%' }}>\n                                        <div>导入结果</div>\n                                        <div>\n                                            <img src={require('../../../../assets/images/error.png').default} style={{ width: 16, height: 16 }} />\n                                            <span>导入失败{this.state.importResult && this.state.importResult.list.length}条</span>\n                                        </div>\n                                    </div>\n                                    <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', marginBottom: '1px solid #e5e5e5', height: 380, width: '100%' }}>\n                                        <div style={{ width: '90%', marginLeft: 20, fontSize: 16 }}>失败详情</div>\n                                        <div style={{ width: '90%', height: '70%', marginTop: 10, overflowY: 'scroll' }}>\n                                            <RLTable\n                                                columns={this.columns}\n                                                dataSource={(this.state.importResult && this.state.importResult.list) || []}\n                                            />\n                                        </div>\n                                        <RLButton label=\"完成\"\n                                            type=\"primary\"\n                                            onClick={() => {\n                                                this.setState({\n                                                    showImportResultModal: false\n                                                })\n                                            }}\n                                            style={{ marginTop: 10 }} />\n                                    </div>\n                                </div>\n                        }\n                    </div>\n                </RLModal>}\n            </WindowContainer>\n        )\n    }\n\n}\nexport default connect((store, props) => {\n    return {\n        ...props,\n        roleList: store.roleManage.roleList,\n        planAvailable: store.userList.planAvailable\n    }\n})(CmpUserImport)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/VODManage/components/VODManage/CmpVODEdit.js",["1537","1538","1539","1540","1541"],"import BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport { Tabs } from 'antd'\nimport { RLInput, RLButton, RLSelect, RLForm, RLFormItem, RLRadioGroup, RLRadio, RLTextarea, RLTag } from '@components/index.js'\nimport actionVODManage from '@actions/VODManage/actionVODManage.js'\nimport commonAction from '@actions/commonActions'\nimport utils from '@/libs/utils.js'\nimport config from '@/config.js'\n\nimport  CmpUpload  from '@/pages/common/CmpUpload.js';\n\nimport { createRef } from 'react'\n\nimport CmpAddUser from '@/pages/common/meeting/AddUser.js'; \nimport '../../../infoManage/components/InfoManage/CmpInfoEdit.less'\n\nconst { TabPane } = Tabs\n\nclass CmpVODEdit extends BaseCmp {\n    constructor(props) {\n        super(props);\n        this.vodId = props.vodId;\n        this.vodPage = props.vodPage;\n        this.state = {\n            language: 'zh',  //zh: 中文 en: 英文\n            showAddUserModal: false,\n            vodInfo: {\n                title : \"\", //点播主题\n                en_title: \"\", //英文点播主题\n                render_desc: \"\", // 点播简介\n                en_render_desc: \"\", // 英文点播简介\n                thumb: \"\", //点播封面\n                users: [], //可见人名单\n                is_public: 1, //是否公开 1 是\n                is_comment: 1, //是否允许评论  1可以 \n                is_show: 1, //是否上架  1可以 \n                speaker: \"\", //主讲人\n            },\n            is_edit: this.vodId ? true : false,\n            addLoading: false,  // 添加按钮loading\n        }\n\n        this.form = createRef();\n    }\n    componentWillMount() {\n        \n        if (this.vodId) {\n            this.getVODInfo()\n        } \n    }\n    getVODInfo(){\n        actionVODManage.getVODDetail(this.vodId).then(res =>{\n            if (res.code === 200) {\n                this.setState({\n                     vodInfo: res.data\n                 }, ()=>{\n                     //给表单重置值\n                     this.form && this.form.setFieldsValue(this.state.vodInfo)\n                 });\n            } else {\n                this.showToast({ type: 'error', content: res.msg })\n            }\n        }).catch(err =>{\n\n        })\n    }\n    editConfirm = (values) => {\n        this.setState({\n            addLoading: true\n        })\n        if(this.state.language === 'zh'){\n            if(this.state.vodInfo.en_title && !this.state.vodInfo.en_render_desc){\n                this.showToast({ type:'error',content:'请填写英文点播简介'});\n                this.setState({\n                    addLoading: false\n                });\n                return;\n            }else if(!this.state.vodInfo.en_title && this.state.vodInfo.en_render_desc){\n                this.showToast({ type:'error',content:'请填写英文点播主题'});\n                this.setState({\n                    addLoading: false\n                })\n                return;\n            }\n        }else if(this.state.language === 'en'){\n            if(this.state.vodInfo.title && !this.state.vodInfo.render_desc){\n                this.showToast({ type:'error',content:'请填写中文点播简介'});\n                this.setState({\n                    addLoading: false\n                });\n                return;\n            }else if(!this.state.vodInfo.title && this.state.vodInfo.render_desc){\n                this.showToast({ type:'error',content:'请填写中文点播主题'});\n                this.setState({\n                    addLoading: false\n                })\n                return;\n            }\n        }\n\n        let data = {\n            type: this.state.language === 'zh' ? 'cn': 'en',\n            title: this.state.vodInfo.title,\n            render_desc: this.state.vodInfo.render_desc,\n            thumb: this.state.vodInfo.thumb,\n            is_public: this.state.vodInfo.is_public,\n            users: this.state.vodInfo.users.map(item => item.id),\n            speaker: this.state.vodInfo.speaker,\n            is_comment: this.state.vodInfo.is_comment,\n            en_title: this.state.vodInfo.en_title,\n            en_render_desc: this.state.vodInfo.en_render_desc\n        };\n\n        if (this.vodId) {\n            data.course_id = this.vodId;\n            actionVODManage.editVOD(data).then(res => {\n                console.log('编辑用户返回--res:', res)\n                if (res.code === 200) {\n                    this.showToast({ content: '编辑点播成功', type: 'success' })\n                    this.props.changePage('vod_list',{\n                        vodPage: this.vodPage\n                    })\n                } else {\n                    this.showToast({ type: 'error', content: res.msg });\n                    this.setState({\n                        addLoading: false\n                    })\n                }\n            }).finally(() => {\n                this.setState({\n                    addLoading: false\n                })\n            })\n        } else {\n            actionVODManage.addVOD(data).then(res => {\n                if (res.code === 200) {\n                    this.props.changePage('vod_list',{\n                        vodPage: this.vodPage\n                    })\n                } else {\n                    this.showToast({ type: 'error', content: res.msg });\n                    this.setState({\n                        addLoading: false\n                    })\n                }\n            }).finally(() => {\n                this.setState({\n                    addLoading: false\n                })\n            })\n        }\n    }\n\n    pageTitle = () => {\n        let title = '添加点播'\n        if (this.vodId) {\n            title = '编辑点播'\n        }\n        return (\n            <div className=\"custom-page-title\">\n                <span>{title}</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.changePage('vod_list', {\n                            vodPage: this.vodPage\n                        })\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n    createLabel = (labelName, need, style = {}) => {\n        return <div>\n          {need ? <span style={{ color: '#ff4d4f',fontSize: 14, fontFamily:'SimSun, sans-serif' }}>*</span> : null}\n          <span style={{ ...style }}>{labelName}</span>\n        </div>\n    }\n    render() {\n\n        return (\n            <WindowContainer title={this.pageTitle}>\n                <div className='page-info-edit'>\n                        <Tabs defaultActiveKey=\"zh\"\n                            style={{ flex: 1 }}\n                            onChange={key => {\n                                this.setState({\n                                    language: key\n                                })\n                            }}\n                        >\n                            <TabPane tab=\"中文\" key=\"zh\">\n                            </TabPane>\n                            <TabPane tab=\"英文\" key=\"en\">\n                            </TabPane>\n                        </Tabs>\n                        <RLForm ref={ form => this.form = form}\n                            labelCol={{ style: { width: 150, marginRight: 20, marginLeft: 30, textAlign:'right' } }}\n                            labelAlign='left'\n                            wrapperCol={\n                                { span: 24 }\n                            }\n                            onFinish={this.editConfirm}\n                            initialValues={this.state.vodInfo}\n                            validateTrigger='onBlur'\n                        >      \n                            {\n                                this.state.language === 'zh' ?\n                                <>\n                                    <RLFormItem name='title' label='点播主题' colon={false} \n                                        rules={[\n                                            {\n                                                required: true,\n                                                message: '请输入点播主题'\n                                            }\n                                        ]}>\n                                        <RLInput placeholder='请输入点播主题' style={{ width: 360 }} \n                                            value={this.state.vodInfo.title}\n                                            onChange={(e)=>{\n                                                this.setState({\n                                                    vodInfo: {\n                                                        ...this.state.vodInfo,\n                                                        title: e.target.value\n                                                    }\n                                                })\n                                            }}\n                                        />\n                                    </RLFormItem>\n                                    \n                                    <RLFormItem name='render_desc' label='点播简介' colon={false} \n                                        rules={[{\n                                            required: true,\n                                            message: '请输入点播简介'\n                                        }]\n                                        }>\n                                        <RLTextarea placeholder='请输入点播简介' style={{ width: 600, height: 400 }} \n                                            value={this.state.vodInfo.render_desc}\n                                            onChange={(e)=>{\n                                                this.setState({\n                                                    vodInfo: {\n                                                        ...this.state.vodInfo,\n                                                        render_desc: e.target.value\n                                                    }\n                                                })\n                                            }}\n                                        />\n                                    </RLFormItem>\n                                </>: \n                                <>\n                                    <RLFormItem name='en_title' label='点播主题' colon={false} \n                                        rules={[\n                                            {\n                                                required: true,\n                                                message: '请输入点播主题'\n                                            }\n                                        ]}>\n                                        <RLInput placeholder='请输入点播主题' style={{ width: 360 }}\n                                            value={this.state.vodInfo.en_title}\n                                            onChange={(e)=>{\n                                                this.setState({\n                                                    vodInfo: {\n                                                        ...this.state.vodInfo,\n                                                        en_title: e.target.value\n                                                    }\n                                                })\n                                            }} \n                                        />\n                                    </RLFormItem>\n                                    \n                                    <RLFormItem name='en_render_desc' label='点播简介' colon={false} \n                                        rules={[{\n                                            required: true,\n                                            message: '请输入点播简介'\n                                        }]\n                                        }>\n                                        <RLTextarea placeholder='请输入点播简介' style={{ width: 600, height: 400 }} \n                                            value={this.state.vodInfo.en_render_desc}\n                                            onChange={(e)=>{\n                                                this.setState({\n                                                    vodInfo: {\n                                                        ...this.state.vodInfo,\n                                                        en_render_desc: e.target.value\n                                                    }\n                                                })\n                                            }}\n                                        />\n                                    </RLFormItem>\n                                </>\n                            }                                             \n\n                            <RLFormItem name='thumb' label='点播封面' colon={false} \n                                rules={[{\n                                    required: true,\n                                    message: '请选择点播封面'\n                                }]\n                                }>\n                                <CmpUpload \n                                    aspect={ 4 / 3 }\n                                    saveUrl={(fileurl)=>{\n                                        this.setState({\n                                            vodInfo: {\n                                                ...this.state.vodInfo,\n                                                thumb: fileurl\n                                            }\n                                        });\n                                        this.form.setFieldsValue({\n                                            thumb: fileurl\n                                        });\n                                    }}\n                                    src={this.state.vodInfo.thumb}\n                                    imgStyle={{width:86,height:65}}\n                                    default={require('../../../../assets/images/default.png').default}\n                                />\n                                <div style={{marginTop: 10}}>只能上传jpg/png格式图片，大小不超过2M，图片比例4:3</div>\n                            </RLFormItem>\n\n                            <RLFormItem name=\"is_public\" label=\"发布范围\" colon={false}\n                                rules={[{\n                                    required: true,\n                                    message: '请选择发布范围'\n                                }]}>\n                                <RLRadioGroup \n                                    value={this.state.vodInfo.is_public}\n                                    items={[\n                                        {label:'公开', value: 1},\n                                        {label:'非公开', value: 0}\n                                    ]}\n                                    onChange={(e)=>{\n                                        console.log(e)\n                                        this.setState({\n                                            vodInfo: {\n                                                ...this.state.vodInfo,\n                                                is_public: e.target.value\n                                            }\n                                        })\n                                    }}\n                                />\n                            </RLFormItem>\n\n                            <RLFormItem label={this.createLabel('可见名单', this.state.vodInfo.is_public === 0)} colon={false}\n                                    name='users'\n                                    rules={[\n                                        {\n                                            validator: () => {\n                                                if(this.state.vodInfo.is_public === 0){\n                                                    if (this.state.vodInfo.users.length === 0) {\n                                                        return Promise.reject('请选择可见人员名单')\n                                                    } else {\n                                                        return Promise.resolve()\n                                                    }\n                                                }else{\n                                                    return Promise.resolve();\n                                                }\n                                            }\n                                        }\n                                    ]}\n                                >\n                                    <div className='form-item-gropu' style={{display:'flex',flexDirection:'row'}}>\n                                        <div style={{\n                                            width: 500,\n                                            minHeight: 60,\n                                            maxHeight: 200,\n                                            border: '1px solid rgb(220, 223, 230)',\n                                            borderRadius: 3,\n                                            display: 'flex',\n                                            flexWrap: 'wrap',\n                                            padding: '10px 10px 10px 10px',\n                                            boxSizing: 'border-box',\n                                            overflowY: 'scroll'\n                                        }}>\n                                            {this.state.vodInfo.users.map(ele => {\n                                                return <div style={{ height: 19,marginTop:10 }} key={ele.id}>\n                                                    <RLTag label={ele.nickname} closable onClose={() => {\n                                                        let all = [...this.state.vodInfo.users]\n                                                        let index = all.findIndex(clc => { return clc.id === ele.id });\n                                                        all.splice(index, 1);\n                                                        this.setState({\n                                                            vodInfo: {\n                                                                ...this.state.vodInfo,\n                                                                users: all\n                                                            }\n                                                        })\n                                                    }} />\n                                                </div>\n                                            })}\n                                        </div>\n                                        <RLButton\n                                            label='添加'\n                                            type='primary'\n                                            disabled={this.state.vodInfo.is_public === 1}\n                                            onClick={()=>{\n                                                this.setState({\n                                                    showAddUserModal: true,\n                                                })\n                                            }}\n                                            style={{ marginLeft: 20 }}\n                                        />\n                                    </div>\n                                </RLFormItem>\n\n                            <RLFormItem name=\"speaker\" label=\"主讲人名称\" colon={false}>\n                                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                                    <RLInput style={{ width: 360 }}\n                                        value={this.state.vodInfo.speaker}\n                                        onChange={(e) => {\n                                            this.setState({\n                                                vodInfo: {\n                                                    ...this.state.vodInfo,\n                                                    speaker: e.target.value\n                                                }\n                                            })\n                                        }}\n                                    />\n                                <div style={{ marginLeft: 5 }}>若不填写，默认为z止于至善</div>\n                                </div>\n                            </RLFormItem>\n\n                            <RLFormItem name=\"is_comment\" label=\"评论区是否开放\" colon={false}\n                                rules={[]}>\n                                <RLRadioGroup \n                                    value={this.state.vodInfo.is_comment}\n                                    items={[\n                                        {label:'允许',value: 1},\n                                        {label:'禁止',value: 0}\n                                    ]}\n                                    onChange={(e)=>{\n                                        this.setState({\n                                            vodInfo: {\n                                                ...this.state.vodInfo,\n                                                is_comment: e.target.value\n                                            }\n                                        })\n                                    }}\n                                />\n                            </RLFormItem>\n\n                            <RLFormItem>\n                                <div style={{ display: 'flex', justifyContent: 'center' }}>\n                                    <RLButton type=\"default\" label='取消' width={80}\n                                        style={{ display: 'inline-block' }}\n                                        onClick={() => {\n                                            this.props.changePage('vod_list',{\n                                                vodPage: this.vodPage\n                                            })\n                                        }} />\n                                    <RLButton type=\"primary\"\n                                        htmlType=\"submit\" label={this.vodId ? '保存' : '添加'}\n                                        style={{ marginLeft: 40, display: 'inline-block' }}\n                                        loading={this.state.addLoading}\n                                        width={80}\n                                        // onClick={this.editConfirm}\n                                    />\n                                </div>\n                            </RLFormItem>\n                        </RLForm>\n                </div>\n                <CmpAddUser \n                    visible={this.state.showAddUserModal}\n                    showSelectGroup={true}\n                    selectType=\"checkbox\"\n                    originArr={this.state.vodInfo.users}\n                    onCancel={()=>{\n                        this.setState({\n                            showAddUserModal: false\n                        })\n                    }}\n                    originCanCancel={false}\n                    returnStyle=\"object\"\n                    onAdd={\n                        (users)=>{\n                            let originUsers = this.state.vodInfo.users;\n                            let returnUsers = users.map(item => {\n                                return {\"id\": item.id, \"nickname\": item.nickname};\n                            })\n                            let newUsers = []\n                            for(let user of returnUsers){\n                                let index = originUsers.findIndex(item => item.id === user.id)\n                                if(index < 0){\n                                    newUsers.push(user)\n                                }\n                            }\n                            let finalUsers = originUsers.concat(newUsers);\n                            this.setState({\n                                vodInfo: {\n                                    ...this.state.vodInfo,\n                                    users: finalUsers\n                                }\n                        })\n                    }}\n                />\n            </WindowContainer >\n        )\n    }\n\n}\nexport default connect((store, props) => {\n    return {\n        ...props,\n        // roleList: store.roleManage.roleList,\n    }\n})(CmpVODEdit)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/VODManage/components/VODManage/CmpCommentEdit.js",["1542","1543","1544","1545","1546","1547","1548","1549","1550","1551","1552","1553"],"import BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport { RLInput, RLButton, RLSelect, RLForm, RLFormItem, RLRadioGroup, RLRadio, RLDisplayBoard, RLDivider, RLTextarea } from '@components/index.js'\nimport actionVODManage from '@actions/VODManage/actionVODManage.js'\nimport commonAction from '@actions/commonActions'\nimport utils from '@/libs/utils.js'\nimport config from '@/config.js'\n\nimport { createRef } from 'react'\nimport RLCheckbox from '../../../../components/RLCheckbox.js'\nimport { Divider } from 'antd';\nclass CmpCommentEdit extends BaseCmp {\n    constructor(props) {\n        super(props);\n\n        this.vodId = props.vodId;\n        this.vodPage = props.vodPage;\n        this.commentId = props.commentId;\n        this.commentPage = props.commentPage;\n\n        this.state = {\n            commentInfo: props.commentInfo,  \n        }\n        this.form = createRef()\n    }\n    componentWillMount() {\n\n    }\n\n    pageTitle = () => {\n        let title = '添加用户'\n        if (this.userId) {\n            title = '编辑用户'\n        }\n        return (\n            <div className=\"custom-page-title\">\n                <span>{title}</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.changePage('list')\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n\n    updateValue(data){\n        actionVODManage.editComment(data).then(res =>{\n            if(res.code === 200){\n                this.showToast({type:'success',content:'回复成功'});\n                this.props.changePage('comment_list',{\n                    vodId: this.vodId,\n                    vodPage: this.vodPage,\n                    commentPage: this.commentPage\n                });\n            }else{\n                this.showToast({type:'error',content: '回复失败'});\n            }  \n        }).catch( err=>{\n            this.showToast({type:'error',content: '回复失败'});\n        })\n    }\n\n    pageTitle = () => {\n        return (\n            <div className=\"custom-page-title\">\n                <span>{this.chapterId ? '章节创建': '章节编辑'}</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.changePage('comment_list',{\n                            vodId: this.vodId,\n                            vodPage: this.vodPage,\n                            commentPage: this.commentPage\n                        });\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n    render() {\n\n        return (\n            <WindowContainer title={this.pageTitle}>\n                <div className='page-userAdd'>\n                        {/*  */}\n                        <div style={{ display:'flex', flexDirection:'row',marginBottom:20}}>\n                            <div style={{width:100,textAlign:'right',marginRight:50}}>评论人</div>\n                            <div>{this.state.commentInfo.creator}</div>\n                        </div>\n                        <div style={{ display:'flex', flexDirection:'row',marginBottom:20}}>\n                            <div style={{width:100,textAlign:'right',marginRight:50}}>评论时间</div>\n                            <div>{this.state.commentInfo.created_at}</div>\n                        </div>\n                        <div style={{ display:'flex', flexDirection:'row',marginBottom:40}}>\n                            <div style={{width:100,textAlign:'right',marginRight:50}}>评论内容</div>\n                            <div>{this.state.commentInfo.content}</div>\n                        </div>\n                        <div style={{width:100,textAlign:'right',marginRight:50}}>回复评价</div>\n                        <Divider style={{marginTop: 10, marginBottom:10}}/>\n                        <div style={{ display:'flex', flexDirection:'row',marginBottom:20}}>\n                            <div style={{width:100,textAlign:'right',marginRight:50}}>回复内容</div>\n                            <RLTextarea \n                                value={this.state.commentInfo.reply_content}\n                                placeholder=\"请输入回复\"\n                                onChange={(e)=>{\n                                    this.setState({\n                                        commentInfo:{\n                                            ...this.state.commentInfo,\n                                            reply_content: e.target.value\n                                        }\n                                    })\n                                }}\n                                style={{width: 600, height: 400}}\n                                />\n                        </div>\n                        <div style={{ display: 'flex', justifyContent: 'center',marginTop:20 }}>\n                            <RLButton type=\"default\" label='取消' width={80}\n                                style={{ display: 'inline-block' }}\n                                onClick={() => {\n                                    this.props.changePage('comment_list',{\n                                        vodId: this.vodId,\n                                        vodPage: this.vodPage,\n                                        commentPage: this.commentPage\n                                    })\n                                }} />\n                            <RLButton type=\"primary\"\n                                label=\"确定\"\n                                style={{ marginLeft: 40, display: 'inline-block' }}\n                                loading={this.state.addLoading}\n                                width={80}\n                                onClick={()=>{\n                                    this.updateValue({\n                                        course_id: this.vodId,\n                                        comment_id: this.commentId,\n                                        reply_content: this.state.commentInfo.reply_content,\n                                        type: 'comment'\n                                    })\n                                }}\n                            />\n                        </div>\n                </div>\n            </WindowContainer >\n        )\n    }\n\n}\nexport default connect((store, props) => {\n    return {\n        ...props,\n    }\n})(CmpCommentEdit)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/VODManage/components/VODManage/CmpChapterEdit.js",["1554","1555","1556","1557","1558","1559","1560"],"import BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport { Tabs } from 'antd'\nimport { RLInput, RLButton, RLSelect, RLForm, RLFormItem, RLRadioGroup, RLRadio } from '@components/index.js'\nimport actionVODManage from '@actions/VODManage/actionVODManage.js'\nimport actionVideoManage from '@actions/VODManage/actionVideoManage.js';\nimport commonAction from '@actions/commonActions'\nimport utils from '@/libs/utils.js'\nimport config from '@/config.js'\n\nimport CmpUpload from '@/pages/common/CmpUpload.js';\nimport { createRef } from 'react'\nimport RLCheckbox from '../../../../components/RLCheckbox.js'\nimport CmpAddVideo from './CmpAddVideo.js';\nimport '../../../infoManage/components/InfoManage/CmpInfoEdit.less'\n\nconst { TabPane } = Tabs\n\nclass CmpChapterEdit extends BaseCmp {\n    constructor(props) {\n        super(props);\n\n        this.chapterId = props.chapterId;\n        this.vodId = props.vodId;\n        this.vodPage = props.vodPage;\n        this.chapterPage = props.chapterPage;\n\n        this.state = {\n            showAddVideoModal: false,\n            chapterInfo: props.chapterInfo || {\n                                                title: '',\n                                                en_title: '',\n                                                chapters_thumb: '',\n                                                video_id: '',\n                                                video_title: '',\n                                                video_url: ''\n                                            },\n            is_edit: this.chapterId ? true : false,  \n            language: 'zh',  //zh: 中文 en: 英文  \n        }\n        this.form = createRef()\n    }\n    componentWillMount() {\n\n    }\n\n    editConfirm = (values) => {  \n        this.setState({\n            addLoading: true\n        })\n\n        actionVideoManage.getVideoUrl(this.state.chapterInfo.video_id).then(res => {\n            // if(res.code === 200){\n                // this.setState({\n                //     videoLink: res.movies[0].ossurl,\n                //     showPreviewModal: true,\n                // }); \n                \n                let data = {\n                    course_id: this.vodId,\n                    id: this.chapterId,\n                    title: values.title,\n                    chapters_thumb: values.chapters_thumb,\n                    video_id: this.state.chapterInfo.video_id,\n                    video_title: this.state.chapterInfo.video_title,\n                    video_url: res.movies[0].ossurl,\n                    video_duration: this.state.chapterInfo.video_duration\n                };\n\n                data.title = this.state.chapterInfo.title;\n                data.en_title = this.state.chapterInfo.en_title;\n\n                if (this.chapterId) {\n                    actionVODManage.chapterEdit(data).then(res => {\n                        if (res.code === 200) {\n                            this.showToast({ content: '编辑章节成功', type: 'success' })\n                            this.props.changePage('chapter_list',{\n                                vodId: this.vodId,\n                                vodPage: this.vodPage,\n                                chapterPage: this.chapterPage\n                            })\n                        } else {\n                            this.showToast({ type: 'error', content: res.msg })\n                        }\n                    }).finally(() => {\n                        this.setState({\n                            addLoading: false\n                        })\n                    })\n                } else {\n                    actionVODManage.chapterAdd(data).then(res => {\n                        if (res.code === 200) {\n                            this.props.changePage('chapter_list',{\n                                vodId: this.vodId,\n                                vodPage: this.vodPage,\n                                chapterPage: this.chapterPage\n                            })\n                        } else {\n                            this.showToast({ type: 'error', content: res.msg })\n                        }\n                    }).finally(() => {\n                        this.setState({\n                            addLoading: false\n                        })\n                    })\n                }\n\n        });\n\n    }\n\n    pageTitle = () => {\n        let title = '添加章节'\n        if (this.chapterId) {\n            title = '编辑章节'\n        }\n        return (\n            <div className=\"custom-page-title\">\n                <span>{title}</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.changePage('chapter_list',{\n                            vodId: this.vodId,\n                            chapterPage:this.chapterPage,\n                            vodPage: this.vodPage\n                        });\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n\n    createLabel = (labelName, need, style = {}) => {\n        return <div>\n          {need ? <span style={{ color: '#ff4d4f',fontSize: 14, fontFamily:'SimSun, sans-serif' }}>*</span> : null}\n          <span style={{ ...style }}>{labelName}</span>\n        </div>\n    }\n    render() {\n\n        return (\n            <WindowContainer title={this.pageTitle}>\n                <div className='page-info-edit'>\n                    <Tabs defaultActiveKey=\"zh\"\n                        style={{ flex: 1 }}\n                        onChange={key => {\n                            this.setState({\n                                language: key\n                            })\n                        }}\n                    >\n                        <TabPane tab=\"中文\" key=\"zh\">\n                        </TabPane>\n                        <TabPane tab=\"英文\" key=\"en\">\n                        </TabPane>\n                    </Tabs>\n                        <RLForm ref={ form => this.form = form}\n                            labelCol={{ style: { width: 150, marginRight: 20, marginLeft: 30, textAlign:'right' } }}\n                            labelAlign='left'\n                            wrapperCol={\n                                { span: 24 }\n                            }\n                            onFinish={this.editConfirm}\n                            initialValues={this.state.chapterInfo}\n                            validateTrigger='onBlur'\n                        >   {\n                                this.state.language === 'zh' ? \n                                <RLFormItem label=\"章节标题\" name=\"title\" colon={false}\n                                    rules={[{\n                                        required: true,\n                                        message: '请输入章节标题'\n                                    }]}\n                                    >\n                                    <RLInput \n                                        placeholder=\"请输入内容\"\n                                        value={this.state.chapterInfo.title}\n                                        style={{width:360}}\n                                        onChange={(e)=>{\n                                            this.setState({\n                                                chapterInfo:{\n                                                    ...this.state.chapterInfo,\n                                                    title: e.target.value\n                                                }\n                                            })\n                                        }}\n                                    />\n                                </RLFormItem>:\n                                <RLFormItem label=\"章节标题\" name=\"en_title\" colon={false}\n                                    rules={[{\n                                        required: true,\n                                        message: '请输入章节标题'\n                                    }]}\n                                    >\n                                    <RLInput \n                                        placeholder=\"请输入内容\"\n                                        value={this.state.chapterInfo.en_title}\n                                        style={{width:360}}\n                                        onChange={(e)=>{\n                                            this.setState({\n                                                chapterInfo: {\n                                                    ...this.state.chapterInfo,\n                                                    en_title: e.target.value\n                                                }\n                                            })\n                                        }}\n                                    />\n                                </RLFormItem>\n\n                            }\n                            <RLFormItem label=\"章节封面\" name=\"chapters_thumb\" colon={false}\n                                rules={[{\n                                    required: true,\n                                    message: '请选择章节封面'\n                                }]}\n                                >\n                                <CmpUpload \n                                    aspect = { 4 / 3}\n                                    saveUrl={(fileurl)=>{\n                                        this.setState({\n                                            chapterInfo: {\n                                                ...this.state.chapterInfo,\n                                                chapters_thumb: fileurl\n                                            }\n                                        });\n                                        this.form.setFieldsValue({\n                                            chapters_thumb: fileurl\n                                        });\n                                    }}\n                                    src={this.state.chapterInfo.chapters_thumb}\n                                    imgStyle={{width:86,height:65}}\n                                    default={require('../../../../assets/images/default.png').default}\n                                />\n                                <div>只能上传jpg/png，大小不超过2M，图片比例4:3</div>\n                            </RLFormItem>\n                            <RLFormItem label={this.createLabel('视频/音频', true)} name=\"video_id\" colon={false}\n                                rules={[{\n                                    validator: ()=>{\n                                        if(!this.state.chapterInfo.video_id){\n                                            return Promise.reject('请选择音/视频');\n                                        }else{\n                                            return Promise.resolve();\n                                        }\n                                    }\n                                }]}>\n                                <div style={{display:'flex',flexDirection:'row'}}>\n                                    <RLInput \n                                        value={this.state.chapterInfo.video_title}\n                                        style={{width:360}}\n                                        disabled={true}\n                                    />\n                                    <RLButton label=\"选择音/视频\" \n                                        type=\"primary\"\n                                        style={{marginLeft:20}}\n                                        onClick={()=>{\n                                            this.setState({\n                                                showAddVideoModal: true\n                                            })\n                                        }}\n                                    />\n                                </div>\n                            </RLFormItem>\n                            <RLFormItem>\n                                <div style={{ display: 'flex', justifyContent: 'center' }}>\n                                    <RLButton type=\"default\" label='取消' width={80}\n                                        style={{ display: 'inline-block' }}\n                                        onClick={() => {\n                                            this.props.changePage('chapter_list',{\n                                                vodId: this.vodId,\n                                                chapterPage:this.chapterPage,\n                                                vodPage: this.vodPage\n                                            })\n                                        }} />\n                                    <RLButton type=\"primary\"\n                                        htmlType=\"submit\" label={this.chapterId ? '保存' : '添加'}\n                                        style={{ marginLeft: 40, display: 'inline-block' }}\n                                        loading={this.state.addLoading}\n                                        width={80}\n                                    />\n                                </div>\n                            </RLFormItem>\n                        </RLForm>\n                    \n                    {this.state.showAddVideoModal && <CmpAddVideo \n                        visible={this.state.showAddVideoModal}\n                        onCancel={()=>{\n                            this.setState({\n                                showAddVideoModal: false\n                            })\n                        }}\n                        onAdd={(videos)=>{\n                            this.setState({\n                                chapterInfo: {\n                                    ...this.state.chapterInfo,\n                                    video_id: videos[0]._id,\n                                    video_title: videos[0].originalname,\n                                    video_url:videos[0].url,\n                                    video_duration: videos[0].duration\n                                }\n                            });\n                            this.form.setFieldsValue({\n                                video_id: videos[0]._id\n                            });\n                        }}\n                    />}\n                </div>\n            </WindowContainer >\n        )\n    }\n\n}\nexport default connect((store, props) => {\n    return {\n        ...props,\n        roleList: store.roleManage.roleList,\n    }\n})(CmpChapterEdit)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/VODManage/components/VODManage/CmpChapterList.js",["1561","1562","1563","1564","1565","1566","1567","1568","1569","1570","1571","1572","1573","1574","1575","1576","1577"],"import { createRef } from 'react';\nimport BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport { RLInput, RLButton, RLSelect, RLTable, RLFilterTool, RLTooltip, RLDatePicker, RLModal, RLForm, RLFormItem, RLRadioGroup, RLTextarea } from '@components/index.js'\nimport actionVideo from '@actions/VODManage/actionVideoManage.js'\n// import '../../userList/UserList.less'\nimport interfaces from '@/api/interfaces'\nimport utils from '@/libs/utils.js'\nimport eventBus from '@/libs/EventBus.js'\nimport config from '@/config.js';\nimport { DatePicker, Input } from 'antd';\nimport actionVODManage from '../../../../store/actions/VODManage/actionVODManage';\nimport CmpVideoPlayer from '../videoManage/CmpVideoPlayer.js';\n\nclass CmpChapterList extends BaseCmp {\n    constructor(props) {\n        super(props);\n        //对于点播id\n        this.vodId = props.vodId;\n        this.vodPage = props.vodPage;\n\n        this.state = {\n            chapterListInfo: {\n                pageNum: 1,  // 总叶数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: props.chapterPage || 1,     // 当前第几页\n            },\n            getListLoading: true,       // 获取列表loading\n            showVideoPlayerModal: false,\n            videoLink: ''\n        }\n        this.columns = [\n            {\n                title: '序号',\n                width: '10%',\n                dataIndex: 'title',\n                key: 'title',\n                render: (text, record, index) => {\n                    return (<div>\n                        { (this.state.chapterListInfo.page - 1) * this.pageSize + index + 1 }\n                    </div>)\n                }\n            },\n            {\n                title: '章节标题',\n                dataIndex: 'title',\n                key: 'title',\n                width: '10%',\n                render: (text,record)=>{\n                    return <div>{record.title || record.en_title}</div>\n                }\n            },\n            {\n                title: '播放量',\n                dataIndex: 'play_num',\n                key: 'play_num',\n                width: '10%',\n            },\n            {\n                title: '点赞数',\n                dataIndex: 'favour_num',\n                key: 'favour_num',\n                width: '12%',\n            },\n            {\n                title: '收藏数',\n                dataIndex: 'collect_num',\n                key: 'collect_num',\n                width: '12%',\n            },\n            {\n                title: '创建时间',\n                dataIndex: 'created_at',\n                key: 'created_at',\n                width: '12%',\n            },\n            {\n                title: '创建者',\n                dataIndex: 'creator',\n                key: 'creator',\n                width: '12%',\n            },\n            {\n                title: <span style={{ paddingLeft: 6 }}>操作</span>,\n                key: 'option',\n                width: '16%',\n                render: (text, record) => (\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\n                        {\n                            <RLButton\n                                type='link'\n                                label='删除'\n                                onClick={(e) => {\n                                    e.stopPropagation()\n                                    this.delChapter(record);\n                                }}\n                                style={{color:'#8F1D22'}}\n                            />\n                        }\n                        {\n                            // interfaces.USER_EDIT &&\n                            // record.role_code !== 'admin' && \n                            // record.approval_status !== 3 &&\n                            <RLButton\n                                type='link'\n                                label='编辑'\n                                onClick={(e) => {\n                                    e.stopPropagation()\n                                    this.props.changePage('chapter_edit',{\n                                        vodId: this.vodId,\n                                        chapterId: record.id,\n                                        vodPage: this.vodPage,\n                                        chapterPage: this.state.chapterListInfo.page,\n                                        chapterInfo: {\n                                            title: record.title,\n                                            en_title: record.en_title,\n                                            chapters_thumb: record.chapters_thumb,\n                                            video_id: record.video_id,\n                                            video_title: record.video_title,\n                                            video_url: record.video_url\n                                        }\n                                    })\n                                }}\n                                style={{color:'#8F1D22'}}\n                            />\n                        }\n                        {\n                            // interfaces.USER_DELETE &&\n                            // record.role_code !== 'admin' &&\n                            (\n                                <RLButton\n                                    type='link' \n                                    label='用户记录'\n                                    onClick={(e) => {\n                                        e.stopPropagation()\n                                        this.props.changePage('user_list',{\n                                            vodId: this.vodId,\n                                            chapterId: record.id,\n                                            vodPage: this.vodPage,\n                                            chapterPage: this.state.chapterListInfo.page\n                                        })\n                                    }}\n                                    style={{color:'#8F1D22'}}\n                                />\n                            )\n                        }\n                        {\n                            // interfaces.USER_DELETE &&\n                            // record.role_code !== 'admin' &&\n                            (\n                                <RLButton\n                                    type='link' \n                                    label='预览'\n                                    onClick={(e) => {\n                                        e.stopPropagation();\n                                        this.setState({ \n                                            videoLink: record.video_url,\n                                            showVideoPlayerModal: true\n                                        })\n                                    }}\n                                    style={{color:'#8F1D22'}}\n                                />\n                            )\n                        }\n                    </div>\n                )\n            },\n        ]\n        this.getChapterList(); \n    }\n    componentDidMount() {\n        \n    }\n    componentWillUnmount() {\n       \n    }\n    // 删除用户\n    delChapter = (record) => {\n        this.showModal({\n            content: '确认删除后，该章节将被彻底删除，是否确认删除？',\n            title: '是否删除该章节？',\n            okText: '删除',\n            cancelText: '取消',\n            onOk: () => {\n                return this.chapterDelConfirm(record.id)\n            },\n            onCancel: () => { },\n            size: 'big'\n        })\n    }\n    \n    chapterDelConfirm = (users) => {\n\n        return actionVODManage.chapterDel(users).then(res => {\n            if (res.code === 200) {\n                this.showToast({ type: 'success', content: '删除成功' })\n                this.getChapterList();\n            } else {\n                this.showToast({ type: 'error', content: '删除失败' })\n            }\n        })\n    }\n\n    getChapterList({ page = this.state.chapterListInfo.page } = { page: this.state.chapterListInfo.page }) {\n        this.setState({\n            getListLoading: true\n        })\n        actionVODManage.getChapterList({\n            course_id: this.vodId,\n            page,\n            pagesize: this.pageSize\n        }).then(res => {\n            if (res.code === 200) {\n                if (res.date && res.data.list.length === 0 && page > 1) {\n                    this.getChapterList({ page: page - 1 })\n                } else {\n                    let newState = {\n                        chapterListInfo: {\n                            list: res.data.list,\n                            page,\n                            count: res.data.count,\n                            pageNum: Math.ceil(res.data.count / this.pageSize)\n                        }\n                    }\n                    this.setState(newState)\n                }\n            }\n        }).finally(() => {\n            this.setState({\n                getListLoading: false\n            })\n        })\n    }\n\n    getRightItems = ()=>{\n        return [      \n            <RLButton \n                label=\"创建章节\"\n                type=\"primary\"\n                onClick={()=>{\n                    this.props.changePage('chapter_edit',{\n                        vodId: this.vodId,\n                        chapterPage: this.state.chapterListInfo.page,\n                        vodPage: this.vodPage,\n                    })\n                }}\n                style={{marginLeft: 20}}\n                />\n        ]\n    }\n    onSelectChange = (selectedRowKeys, selectedRows) => {\n        this.setState({\n            selectedMemberKeys: selectedRowKeys,\n        })\n    }\n    pageChange = (page, pageSize) => {\n        this.getChapterList({ page })\n    }\n    rowClick = (e, user) => {\n        this.props.changePage('detail', {\n            userId: user.id,\n            corp_id: user.corp_id\n        })\n    }\n    pageTitle = () => {\n        return (\n            <div className=\"custom-page-title\">\n                <span>点播章节</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.changePage('vod_list',{\n                            vodPage: this.vodPage\n                        })\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n    render() {\n        return (\n            <WindowContainer title={this.pageTitle}>\n                <div className='content-user'>\n                    <RLFilterTool leftItems={[]} rightItems={this.getRightItems}/>\n                    <RLTable\n                        loading={this.state.getListLoading}\n                        dataSource={this.state.chapterListInfo.list}\n                        rowKey='uuid'\n                        columns={this.columns}\n                        // rowSelection={{\n                        //     type: 'checkbox',\n                        //     onChange: this.onSelectChange,\n                        //     getCheckboxProps: (record) => ({\n                        //         disabled: false\n                        //     })\n                        // }}\n                        paginationInfo={{\n                            total: this.state.chapterListInfo.count,\n                            pageSize: this.pageSize,\n                            onChange: this.pageChange,\n                            current: this.state.chapterListInfo.page\n                        }}\n                        rowClassName='rl-table-click-row'\n                    />                     \n                </div>\n               { this.state.showVideoPlayerModal && <CmpVideoPlayer \n                    visible={this.state.showVideoPlayerModal}\n                    src={this.state.videoLink} \n                    close={()=>{\n                        this.setState({\n                            showVideoPlayerModal: false\n                        })\n                    }} \n                />}\n            </WindowContainer>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props,\n        // roleList: store.roleManage.roleList,\n    }\n})(CmpChapterList)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/VODManage/components/VODManage/CmpCommentList.js",["1578","1579","1580","1581","1582","1583","1584","1585","1586","1587","1588","1589","1590","1591","1592","1593","1594"],"import { createRef } from 'react';\nimport BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport { RLInput, RLButton, RLSelect, RLTable, RLFilterTool, RLTooltip, RLDatePicker, RLModal, RLForm, RLFormItem, RLRadioGroup, RLTextarea, RLSwitch } from '@components/index.js'\nimport actionVideo from '@actions/VODManage/actionVideoManage.js'\n// import '../../userList/UserList.less'\nimport interfaces from '@/api/interfaces'\nimport utils from '@/libs/utils.js'\nimport eventBus from '@/libs/EventBus.js'\nimport config from '@/config.js';\nimport { DatePicker, Input } from 'antd';\nimport actionVODManage from '../../../../store/actions/VODManage/actionVODManage';\n\nclass CmpCommentList extends BaseCmp {\n    constructor(props) {\n        super(props);\n        this.vodId = props.vodId;\n        this.vodPage = props.vodPage;\n        this.state = {\n            commentListInfo: {\n                pageNum: 1,  // 总叶数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: props.commentPage || 1,     // 当前第几页\n            },\n            getListLoading: true,       // 获取列表loading\n        }\n        this.columns = [\n            {\n                title: '序号',\n                width: '10%',\n                key: 'title',\n                render: (text, record, index)=>{\n                    return (<div>\n                        { (this.state.commentListInfo.page - 1) * this.pageSize + index + 1 }\n                    </div>)\n                }\n            },\n            {\n                title: '评论内容',\n                dataIndex: 'content',\n                key: 'content',\n                width: '25%',\n            },\n            {\n                title: '隐藏/显示',\n                key: 'is_visible',\n                width: '10%',\n                render: (text, record,index) => {\n                    return (\n                        <div>\n                           <RLSwitch \n                                // checked={record.is_visible === 1}\n                                defaultChecked={record.is_visible === 1}\n                                onChange={(e)=>{\n                                    this.updateValue({\n                                        course_id: this.vodId,\n                                        comment_id: record.id,\n                                        is_visible: e ? 1 : 0,\n                                        type: 'visible'\n                                    });\n                                }}\n                                />\n                        </div>)\n                }\n            },\n            {\n                title: '评论时间',\n                dataIndex: 'created_at',\n                key: 'created_at',\n                width: '20%',\n            },\n            {\n                title: '评论者',\n                dataIndex: 'user_nickname',\n                key: 'user_nickname',\n                width: '10%',\n            },\n            {\n                title: <span style={{ paddingLeft: 6 }}>操作</span>,\n                key: 'option',\n                width: '40%',\n                render: (text, record) => (\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\n                        {\n                            <RLButton\n                                type='link'\n                                label='删除'\n                                onClick={(e) => {\n                                    e.stopPropagation()\n                                    this.delComment(record);\n                                }}\n                                style={{color:'#8F1D22'}}\n                            />\n                        }\n                        {\n                            // interfaces.USER_EDIT &&\n                            // record.role_code !== 'admin' && \n                            // record.approval_status !== 3 &&\n                            <RLButton\n                                type='link'\n                                label='查看'\n                                onClick={(e) => {\n                                    e.stopPropagation()\n                                    this.props.changePage('comment_edit',{\n                                        vodId: this.vodId,\n                                        vodPage: this.vodPage,\n                                        commentId: record.id,\n                                        commentPage: this.state.commentListInfo.page,\n                                        commentInfo: {\n                                            creator: record.user_nickname,\n                                            created_at: record.created_at,\n                                            content: record.content,\n                                            reply_content: record.reply && record.reply[0] && record.reply[0].content\n                                        }\n                                    });\n                                }}\n                                style={{color:'#8F1D22'}}\n                            />\n                        }\n                    </div>\n                )\n            },\n        ]\n        this.getCommentList(); \n    }\n    componentDidMount() {\n        \n    }\n    componentWillUnmount() {\n       \n    }\n    updateValue(data){\n        actionVODManage.editComment(data).then(res =>{\n            if(res.code === 200){\n                this.showToast({type:'success',content:'操作成功'});\n                this.refreshCommentList();\n            }else{\n                this.showToast({type:'error',content:'操作失败'});\n                this.refreshCommentList();\n            }  \n        }).catch( err=>{\n            this.refreshCommentList();\n        })\n    }\n    // 删除用户\n    delComment = (record) => {\n        let is_batch = !record ? true: false;\n        let ids = is_batch ? this.state.selectedMemberKeys :[record.id];\n        this.showModal({\n            content: '确认删除后，该评论将被彻底删除，是否确认删除？',\n            title: '是否删除该评论？',\n            okText: '删除',\n            cancelText: '取消',\n            onOk: () => {\n                return this.commentDelConfirm(ids)\n            },\n            onCancel: () => { },\n            size: 'big'\n        })\n    }\n    \n    commentDelConfirm = (users) => {\n\n        return actionVODManage.commentDel(users).then(res => {\n            if (res.code === 200) {\n                this.showToast({ type: 'success', content: '删除成功' })\n                this.getCommentList();\n            } else {\n                this.showToast({ type: 'error', content: '删除失败' })\n            }\n        })\n    }\n    refreshCommentList({ page = this.state.commentListInfo.page } = { page: this.state.commentListInfo.page }){\n        actionVODManage.getCommentList({\n            course_id: this.vodId,\n            page,\n            pagesize: this.pageSize\n        }).then(res => {\n            if (res.code === 200) {\n                if (res.date && res.data.list.length === 0 && page > 1) {\n                    this.getCommentList({ page: page - 1 })\n                } else {\n                    let newState = {\n                        commentListInfo: {\n                            list: res.data.list,\n                            page,\n                            count: res.data.count,\n                            pageNum: Math.ceil(res.data.count / this.pageSize)\n                        }\n                    }\n                    this.setState(newState)\n                }\n            }\n        })\n    }\n    getCommentList({ page = this.state.commentListInfo.page } = { page: this.state.commentListInfo.page }) {\n        this.setState({\n            getListLoading: true\n        })\n        actionVODManage.getCommentList({\n            course_id: this.vodId,\n            page,\n            pagesize: this.pageSize\n        }).then(res => {\n            if (res.code === 200) {\n                if (res.date && res.data.list.length === 0 && page > 1) {\n                    this.getCommentList({ page: page - 1 })\n                } else {\n                    let newState = {\n                        commentListInfo: {\n                            list: res.data.list,\n                            page,\n                            count: res.data.count,\n                            pageNum: Math.ceil(res.data.count / this.pageSize)\n                        }\n                    }\n                    this.setState(newState)\n                }\n            }\n        }).finally(() => {\n            this.setState({\n                getListLoading: false\n            })\n        })\n    }\n\n    getRightItems = () => {\n        return (\n            [\n                // <RLButton \n                //     label=\"返回\"\n                //     onClick={()=>{\n                //         this.props.changePage('vod_list',{\n                //             vodPage: this.vodPage\n                //         })\n                //     }}\n                // />,\n                <RLButton\n                    label='批量删除'\n                    type='primary'\n                    key='add'\n                    onClick={() => {\n                        this.delComment();\n                    }}\n                    style={{ marginLeft: 20 }}\n                />\n            ]\n        )\n    }\n    onSelectChange = (selectedRowKeys, selectedRows) => {\n        this.setState({\n            selectedMemberKeys: selectedRowKeys,\n        })\n    }\n    pageChange = (page, pageSize) => {\n        this.getCommentList({ page })\n    }\n\n    pageTitle = () => {\n        return (\n            <div className=\"custom-page-title\">\n                <span>点播评论</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.changePage('vod_list',{\n                            vodPage: this.vodPage\n                        })\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <WindowContainer title={this.pageTitle}>\n                <div className='content-user'>\n                    <RLFilterTool leftItems={[]} rightItems={this.getRightItems}/>\n                    <RLTable\n                        loading={this.state.getListLoading}\n                        dataSource={this.state.commentListInfo.list}\n                        rowKey='id'\n                        columns={this.columns}\n                        rowSelection={{\n                            type: 'checkbox',\n                            onChange: this.onSelectChange,\n                        }}\n                        paginationInfo={{\n                            total: this.state.commentListInfo.count,\n                            pageSize: this.pageSize,\n                            onChange: this.pageChange,\n                            current: this.state.commentListInfo.page\n                        }}\n                        rowClassName='rl-table-click-row'\n                    />                 \n                </div>\n            </WindowContainer>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props,\n        // roleList: store.roleManage.roleList,\n    }\n})(CmpCommentList)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/VODManage/components/VODManage/CmpPlayList.js",["1595","1596","1597","1598","1599","1600","1601","1602","1603","1604","1605","1606","1607","1608","1609","1610","1611"],"import { createRef } from 'react';\nimport BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport { RLInput, RLButton, RLSelect, RLTable, RLFilterTool, RLTooltip, RLDatePicker, RLModal, RLForm, RLFormItem, RLRadioGroup, RLTextarea } from '@components/index.js'\nimport actionVideo from '@actions/VODManage/actionVideoManage.js'\nimport interfaces from '@/api/interfaces'\nimport utils from '@/libs/utils.js'\nimport eventBus from '@/libs/EventBus.js'\nimport config from '@/config.js';\nimport { DatePicker, Input } from 'antd';\nimport actionVODManage from '../../../../store/actions/VODManage/actionVODManage';\n\nclass CmpPlayList extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.chapterId = props.chapterId;\n        this.chapterPage = props.chapterPage;\n        this.vodId = props.vodId;\n        this.vodPage = props.vodPage;\n        \n        this.state = {\n            playListInfo: {\n                pageNum: 1,  // 总叶数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: 1,     // 当前第几页\n            },\n            getListLoading: true,       // 获取列表loading\n        }\n        this.columns = [\n            {\n                title: '序号',\n                width: '10%',\n                key: 'id',\n                render: (text, record, index) => {\n                   return <div>{ (this.state.playListInfo.page - 1) * 20 + index + 1 }</div>\n                }\n            },\n            {\n                title: '用户姓名',\n                dataIndex: 'viewer',\n                key: 'viewer',\n                width: '10%',\n            },\n            {\n                title: '手机号',\n                dataIndex: 'mobile',\n                key: 'mobile',\n                width: '10%',\n            },\n            {\n                title: '邮箱',\n                dataIndex: 'email',\n                key: 'email',\n                width: '10%',\n            },\n            {\n                title: '机构名称',\n                dataIndex: 'company_name',\n                key: 'company_name',\n                width: '12%',\n            },\n        ]\n        this.getPlayList(); \n    }\n\n    componentDidMount() {\n        \n    }\n\n    componentWillUnmount() {\n       \n    }\n    \n    getPlayList({ page = this.state.playListInfo.page } = { page: this.state.playListInfo.page }) {\n        this.setState({\n            getListLoading: true\n        })\n        actionVODManage.getPlayList({\n            chapter_id: this.chapterId,\n            page,\n            pagesize: this.pageSize\n        }).then(res => {\n            if (res.code === 200) {\n                if (res.date && res.data.list.length === 0 && page > 1) {\n                    this.getPlayList({ page: page - 1 })\n                } else {\n                    let newState = {\n                        playListInfo: {\n                            list: res.data.list,\n                            page,\n                            count: res.data.count,\n                            pageNum: Math.ceil(res.data.count / this.pageSize)\n                        }\n                    }\n                    this.setState(newState)\n                }\n            }\n        }).finally(() => {\n            this.setState({\n                getListLoading: false\n            })\n        })\n    }\n\n    getRightItems = () => {\n        return [\n            <RLButton \n                label=\"返回\"\n                onClick={()=>{\n                    this.props.changePage('chapter_list',{\n                        vodId: this.vodId,\n                        vodPage: this.vodPage,\n                        chapterPage: this.chapterPage,\n                    })\n                }}\n                />\n        ]\n    }\n    onSelectChange = (selectedRowKeys, selectedRows) => {\n        this.setState({\n            selectedMemberKeys: selectedRowKeys,\n        })\n    }\n\n    pageChange = (page, pageSize) => {\n        this.getPlayList({ page })\n    }\n\n    render() {\n        return (\n            <WindowContainer title={this.pageTitle}>\n                <div className='content-user'>\n                    <RLFilterTool leftItems={[]} rightItems={this.getRightItems}/>\n                    <RLTable\n                        loading={this.state.getListLoading}\n                        dataSource={this.state.playListInfo.list}\n                        rowKey='uuid'\n                        columns={this.columns}\n                        // rowSelection={{\n                        //     type: 'checkbox',\n                        //     onChange: this.onSelectChange,\n                        //     getCheckboxProps: (record) => ({\n                        //         disabled: false\n                        //     })\n                        // }}\n                        paginationInfo={{\n                            total: this.state.playListInfo.count,\n                            pageSize: this.pageSize,\n                            onChange: this.pageChange,\n                            current: this.state.playListInfo.page\n                        }}\n                        rowClassName='rl-table-click-row'\n                    />\n                </div>\n            </WindowContainer>\n        )\n    }\n}\n\nexport default connect((store, props) => {\n    return {\n        ...props,\n    }\n})(CmpPlayList)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/VODManage/components/VODManage/CmpVODList.js",["1612","1613","1614","1615","1616","1617","1618","1619","1620","1621","1622","1623","1624","1625"],"import { createRef } from 'react';\nimport BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport { RLInput, RLButton, RLSelect, RLTable, RLFilterTool, RLTooltip, RLDatePicker, RLModal, RLForm, RLFormItem, RLRadioGroup, RLTextarea, RLSwitch } from '@components/index.js'\nimport actionVideo from '@actions/VODManage/actionVideoManage.js'\n// import '../../userList/UserList.less'\nimport interfaces from '@/api/interfaces'\nimport utils from '@/libs/utils.js'\nimport eventBus from '@/libs/EventBus.js'\nimport config from '@/config.js';\nimport { DatePicker, Input } from 'antd';\nimport actionVODManage from '../../../../store/actions/VODManage/actionVODManage';\n\nclass CmpVODList extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.state = {\n            searchParam : {  // 筛选用户列表项\n                title: '',\n                creator: '',\n                start_time: '',\n                end_time: ''\n            },\n            vodListInfo: {\n                pageNum: 1,  // 总叶数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: props.vodPage || 1,     // 当前第几页\n            },\n            getListLoading: true,       // 获取列表loading\n\n            start_date: null,\n            end_date: null\n        }\n        this.columns = [\n            {\n                title: '序号',\n                dataIndex: 'title',\n                key: 'title',\n                width: '5%',\n                render: (text, record, index) => {\n                    return (<div>\n                        { (this.state.vodListInfo.page - 1) * this.pageSize + index + 1 }\n                    </div>)\n                }\n            },\n            {\n                title: '点播标题',\n                dataIndex: 'title',\n                key: 'title',\n                width: '10%',\n                render: (text, record )=>{\n                    return <div>{record.title || record.en_title}</div>\n                }\n            },\n            {\n                title: '点播ID',\n                dataIndex: 'id',\n                key: 'id',\n                width: '10%'\n            },\n            {\n                title: '音/视频数量',\n                dataIndex: 'video_num',\n                key: 'video_num',\n                width: '10%',\n            },\n            {\n                title: '标签',\n                dataIndex: 'role_name',\n                key: 'role_name',\n                width: '20%',\n                render: (text, record,index) => {\n                    return (\n                        <div>\n                            <div style={{display:'flex',flexDirection:'row'}}>\n                                <div style={{width:120, textAlign:'right',marginRight:5}}>上架/下架</div>\n                                <RLSwitch \n                                    checked={record.is_show === 1}\n                                    defaultChecked={record.is_show === 1}\n                                    onChange={(e)=>{\n                                        //如果没有关联章节，不准上架\n                                        if(e && record.video_num <= 0){\n                                            this.showToast({type:'error',content:'检测到该点播下无章节，请先上传章节！'});\n                                            return;\n                                        } \n\n                                        actionVODManage.editVODAttr({\n                                            course_id: record.id,\n                                            is_show: e ? 1 : 0\n                                        }).then(res =>{\n                                            if(res.code === 200){\n                                                record.is_show = e ? 1 : 0;\n                                                this.forceUpdate();\n                                            }else{\n                                                this.showToast({type: 'error', content:'操作失败'});\n                                            }\n                                        }).catch(e =>{\n                                            this.showToast({type: 'error', content:'操作失败'});\n                                        })\n                                    }}/>\n                            </div>\n                            <div style={{display:'flex',flexDirection:'row',marginTop:5}}>\n                                <div style={{width:120, textAlign:'right',marginRight:5}}>评论区开启/关闭</div>\n                                <RLSwitch \n                                    checked={record.is_comment === 1}\n                                    defaultChecked={record.is_comment === 1}\n                                    onChange={(e)=>{\n\n                                        actionVODManage.editVODAttr({\n                                            course_id: record.id,\n                                            is_comment: e ? 1 : 0\n                                        }).then(res =>{\n                                            if(res.code === 200){\n                                                record.is_comment = e ? 1: 0;\n                                                this.forceUpdate();\n                                            }else{\n                                                this.showToast({type: 'error', content:'操作失败'});\n                                            }\n                                        }).catch(e =>{\n                                            this.showToast({type: 'error', content:'操作失败'});\n                                        });\n                                    }}/>\n                            </div>\n                        </div>)\n                }\n            },\n            {\n                title: '创建时间',\n                dataIndex: 'created_at',\n                key: 'created_at',\n                width: '12%',\n            },\n            {\n                title: '创建者',\n                dataIndex: 'creator',\n                key: 'creator',\n                width: '12%',\n            },\n            {\n                title: <span style={{ paddingLeft: 6 }}>操作</span>,\n                key: 'option',\n                width: '16%',\n                render: (text, record) => (\n                    <div style={{ display: 'flex', flexDirection: 'row', flexWrap:'wrap' }}>\n                        {\n                            interfaces.DEMAND_DELETE &&\n                            <RLButton\n                                type='link'\n                                label='删除'\n                                onClick={(e) => {\n                                    this.delVOD(record);\n                                }}\n                                style={{color:'#8F1D22'}}\n                            />\n                        }\n                        {\n                            interfaces.DEMAND_EDIT &&\n                            <RLButton\n                                type='link'\n                                label='编辑'\n                                onClick={(e) => {\n                                    e.stopPropagation()\n                                    this.props.changePage('vod_edit',{\n                                        vodId: record.id,\n                                        vodPage: this.state.vodListInfo.page\n                                    })\n                                }}\n                                style={{color:'#8F1D22'}}\n                            />\n                        }\n                        {\n                            interfaces.DEMAND_CHAPTER_LIST &&\n                            (\n                                <RLButton\n                                    type='link' \n                                    label='章节管理'\n                                    onClick={(e) => {\n                                        e.stopPropagation()\n                                        this.props.changePage('chapter_list', {\n                                            vodId: record.id,\n                                            vodPage: this.state.vodListInfo.page\n                                        })\n                                    }}\n                                    style={{color:'#8F1D22'}}\n                                />\n                            )\n                        }\n                        {\n                            interfaces.DEMAND_COMMENT_LIST &&\n                            (\n                                <RLButton\n                                    type='link' \n                                    label='评论管理'\n                                    onClick={(e) => {\n                                        e.stopPropagation()\n                                        this.props.changePage('comment_list', {\n                                            vodId: record.id,\n                                            vodPage: this.state.vodListInfo.page\n                                        })\n                                    }}\n                                    style={{color:'#8F1D22'}}\n                                />\n                            )\n                        }\n                        {\n                            interfaces.DEMAND_DOC_LIST &&\n                            (\n                                <RLButton\n                                    type='link' \n                                    label='资料管理'\n                                    onClick={(e) => {\n                                        e.stopPropagation();\n                                        this.props.changePage('res_list', {\n                                            vodId: record.id,\n                                            vodPage: this.state.vodListInfo.page\n                                        })\n                                    }}\n                                    style={{color:'#8F1D22'}}\n                                />\n                            )\n                        }\n                    </div>\n                )\n            },\n        ]\n        this.getVODList(); \n    }\n    componentDidMount() {\n        \n    }\n    componentWillUnmount() {\n       \n    }\n    // 删除用户\n    delVOD = (record) => {\n        this.showModal({\n            content: '确认删除后，该点播将被彻底删除，是否确认删除？',\n            title: '是否删除该点播？',\n            okText: '删除',\n            cancelText: '取消',\n            onOk: () => {\n                return this.VODDelConfirm(record.id)\n            },\n            onCancel: () => { },\n            size: 'big'\n        })\n    }\n    \n    VODDelConfirm = (id) => {\n\n        return actionVODManage.VODDel(id).then(res => {\n            if (res.code === 200) {\n                this.showToast({ type: 'success', content: '删除成功' })\n                this.getVODList();\n            } else {\n                this.showToast({ type: 'error', content: '删除失败' })\n            }\n        })\n    }\n\n    getVODList({ page = this.state.vodListInfo.page } = { page: this.state.vodListInfo.page }) {\n        this.setState({\n            getListLoading: true\n        })\n        actionVODManage.getVODList({\n            ...this.state.searchParam,\n            page,\n            pagesize: this.pageSize\n        }).then(res => {\n            if (res.code === 200) {\n                if (res.date && res.data.list.length === 0 && page > 1) {\n                    this.getVODList({ page: page - 1 })\n                } else {\n                    let newState = {\n                        vodListInfo: {\n                            list: res.data.list,\n                            page,\n                            count: res.data.count,\n                            pageNum: Math.ceil(res.data.count / this.pageSize)\n                        }\n                    }\n                    this.setState(newState)\n                }\n            }\n        }).finally(() => {\n            this.setState({\n                getListLoading: false\n            })\n        })\n    }\n\n    refreshVODList({ page = this.state.vodListInfo.page } = { page: this.state.vodListInfo.page }){\n        actionVODManage.getVODList({\n            ...this.state.searchParam,\n            page,\n            pagesize: this.pageSize\n        }).then(res => {\n            if (res.code === 200) {\n                if (res.date && res.data.list.length === 0 && page > 1) {\n                    this.refreshVODList({ page: page - 1 })\n                } else {\n                    let newState = {\n                        vodListInfo: {\n                            list: res.data.list,\n                            page,\n                            count: res.data.count,\n                            pageNum: Math.ceil(res.data.count / this.pageSize)\n                        }\n                    }\n                    this.setState(newState)\n                }\n            }\n        })\n    }\n\n    getLeftItems = () => {\n        return (\n            [\n                <div style={{display:'flex', flexDirection:'row', alignItems:'center'}}>\n                    <span style={{marginRight:5}}>从</span>\n                    <RLDatePicker placeholder=\"请选择日期\" \n                        allowClear \n                        ref = {c => this.startDateInput = c}\n                        picker=\"date\" \n                        style={{width:130, marginRight:5}}\n                        format = \"YYYY-MM-DD\"\n                        value={this.state.start_time}\n                        onChange={ (val, dateString)=> {\n                            this.setState({\n                                start_date: val,\n                                searchParam: {\n                                    ...this.state.searchParam,\n                                    start_time: dateString\n                                }\n                            })\n                        }}/>\n                    <span style={{marginRight:5}}>至</span>\n                    <RLDatePicker placeholder=\"请选择日期\" \n                        allowClear \n                        ref = {c => this.endDateInput = c}\n                        picker=\"date\" \n                        style={{width:130, marginRight:20}}\n                        format = \"YYYY-MM-DD\"\n                        value={this.state.end_time}\n                        onChange={(val, dateString)=>{\n                            this.setState({\n                                end_date: val,\n                                searchParam: {\n                                    ...this.state.searchParam,\n                                    end_time: dateString\n                                }\n                            })\n                        }}/>\n                </div>,\n                <RLInput\n                    ref={ c => this.valueInput = c }\n                    placeholder='请输入创建者名称'\n                    allowClear \n                    key='keyword'\n                    style={{ width: 180, marginRight: 20 }}\n                    value={this.state.searchParam.creator}\n                    onChange={(e) => {\n                        this.setState({\n                            searchParam: {\n                                ...this.state.searchParam,\n                                creator: e.target.value\n                            }\n                        })\n                    }}\n                />,\n                <RLInput\n                    ref={ c => this.valueInput = c }\n                    placeholder='请输入点播标题'\n                    allowClear \n                    key='keyword'\n                    style={{ width: 150, marginRight: 20 }}\n                    value={this.state.searchParam.title}\n                    onChange={(e) => {\n                        this.setState({\n                            searchParam: {\n                                ...this.state.searchParam,\n                                title: e.target.value\n                            }\n                        })\n                    }}\n                />\n            ]\n        )\n    }\n    getRightItems = ()=>{\n        return [\n            <RLButton label='搜索'\n                    type='primary'\n                    key='add'\n                    onClick={() => {\n                        this.getVODList();\n                    }}\n                />,\n\n                <RLButton label='重置'\n                    key='add'\n                    onClick={() => {\n                        this.setState({\n                            start_time: null,\n                            end_time: null,\n                            searchParam : {\n                                title: '',\n                                creator: '',\n                                start_time: '',\n                                end_time: ''\n                            }\n                        }, () => {\n                            this.getVODList();\n                        });\n                    }}\n                    style={{ marginLeft: 20}}/>,\n        ]\n    }\n\n    getRightSecondItems = () => {\n        return (\n            [\n                interfaces.DEMAND_ADD && <RLButton\n                    label='创建点播'\n                    type='primary'\n                    key='add'\n                    onClick={() => {\n                        this.props.changePage('vod_edit',{\n                            vodPage: this.state.vodListInfo.page\n                        })\n                    }}\n                    style={{ marginLeft: 20 }}\n                />\n            ]\n        )\n    }\n    updateValue(data){\n        actionVODManage.editVODAttr(data).then(res =>{\n            if(res.code === 200){\n                this.refreshVODList();\n            }else{\n                this.refreshVODList();\n                this.showToast({type: 'error', content:'操作失败'});\n            }\n        }).catch(e =>{\n            this.refreshVODList();\n            this.showToast({type: 'error', content:'操作失败'});\n        })\n    }\n    onSelectChange = (selectedRowKeys, selectedRows) => {\n        this.setState({\n            selectedMemberKeys: selectedRowKeys,\n        })\n    }\n\n    pageChange = (page, pageSize) => {\n        this.getVODList({ page })\n    }\n\n    rowClick = (e, user) => {\n        this.props.changePage('detail', {\n            userId: user.id,\n            corp_id: user.corp_id\n        })\n    }\n\n    render() {\n        return (\n            <WindowContainer title={this.pageTitle}>\n                <div className='content-user'>\n                    <RLFilterTool leftItems={this.getLeftItems} rightItems={this.getRightItems}/>\n                    <RLFilterTool leftItems={[]} rightItems={this.getRightSecondItems}/>\n                    <RLTable\n                        loading={this.state.getListLoading}\n                        dataSource={this.state.vodListInfo.list}\n                        rowKey='uuid'\n                        columns={this.columns}\n                        // rowSelection={{\n                        //     type: 'checkbox',\n                        //     onChange: this.onSelectChange,\n                        //     getCheckboxProps: (record) => ({\n                        //         disabled: false\n                        //     })\n                        // }}\n                        paginationInfo={{\n                            total: this.state.vodListInfo.count,\n                            pageSize: this.pageSize,\n                            onChange: this.pageChange,\n                            current: this.state.vodListInfo.page\n                        }}\n                        rowClassName='rl-table-click-row'\n                    />        \n                </div>\n            </WindowContainer>\n        )\n    }\n}\n\nexport default connect((store, props) => {\n    return {\n        ...props,\n        roleList: store.roleManage.roleList,\n    }\n})(CmpVODList)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/VODManage/components/VODManage/CmpResourceList.js",["1626","1627","1628","1629","1630","1631","1632"],"import { createRef } from 'react';\nimport BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport { RLInput, RLButton, RLSelect, RLTable, RLFilterTool, RLTooltip, RLDatePicker, RLModal, RLForm, RLFormItem, RLRadioGroup, RLTextarea, RLSwitch } from '@components/index.js'\nimport actionVideo from '@actions/VODManage/actionVideoManage.js'\n// import '../../userList/UserList.less'\nimport interfaces from '@/api/interfaces'\nimport eventBus from '@/libs/EventBus.js'\nimport actionVODManage from '../../../../store/actions/VODManage/actionVODManage';\n\nimport { Upload } from 'antd';\nclass CmpResourceList extends BaseCmp {\n    constructor(props) {\n        super(props);\n        this.vodId = props.vodId;\n        this.vodPage = props.vodPage;\n        this.state = {\n            resourceListInfo: {\n                pageNum: 1,  // 总叶数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: 1,     // 当前第几页\n            },\n            getListLoading: true,       // 获取列表loading\n\n            showResImportModal: false,\n            //修改资料\n            showResEditModal: false,\n            resInfo: {},\n\n            uploadFile: null,\n\n        }\n\n        this.columns = [\n            {\n                title: '序号',\n                width: '10%',\n                key: 'title',\n                render: (text, record, index) => {\n                    return (<div>\n                        { (this.state.resourceListInfo.page - 1) * this.pageSize + index + 1}\n                    </div>)\n                }\n            },\n            {\n                title: '资料名称',\n                dataIndex: 'title',\n                key: 'title',\n                width: '10%',\n            },\n            {\n                title: '是否可下载',\n                dataIndex: 'is_down',\n                key: 'is_down',\n                width: '10%',\n                render: (text, record, index) => {\n                    return (\n                        <div>\n                            <RLSwitch defaultChecked={record.is_can_down === 1}\n                                onChange={(e) => {\n                                    this.updateValue({\n                                        course_id: this.vodId,\n                                        doc_id: record.id,\n                                        id: record.id,\n                                        is_down: e ? 1 : 0,\n                                    });\n                                }}\n                            />\n                        </div>)\n                }\n            },\n            {\n                title: '下载次数',\n                dataIndex: 'down_num',\n                key: 'down_num',\n                width: '12%',\n            },\n            {\n                title: '上传时间',\n                dataIndex: 'created_at',\n                key: 'created_at',\n                width: '12%',\n            },\n            {\n                title: <span style={{ paddingLeft: 6 }}>操作</span>,\n                key: 'option',\n                width: '16%',\n                render: (text, record) => (\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\n                        {\n                            <RLButton\n                                type='link'\n                                label='删除'\n                                onClick={(e) => {\n                                    e.stopPropagation()\n                                    this.delResource(record)\n                                }}\n                                style={{ color: '#8F1D22' }}\n                            />\n                        }\n                        {\n                            // interfaces.USER_EDIT &&\n                            // record.role_code !== 'admin' && \n                            // record.approval_status !== 3 &&\n                            <RLButton\n                                type='link'\n                                label='编辑'\n                                onClick={(e) => {\n                                    e.stopPropagation()\n                                    this.setState({\n                                        resInfo: this.state.resourceListInfo.list.find(item => item.id === record.id),\n                                        showResEditModal: true\n                                    })\n                                }}\n                                style={{ color: '#8F1D22' }}\n                            />\n                        }\n                    </div>\n                )\n            },\n        ]\n        this.getResourceList();\n    }\n    componentDidMount() {\n        eventBus.addListener('vod_res_update', () => {\n            this.getResourceList();\n        })\n    }\n    componentWillUnmount() {\n        eventBus.removeListener('vod_res_update');\n    }\n    // 删除用户\n    delResource = (record) => {\n        this.showModal({\n            content: '确认删除后，该资料将被彻底删除，是否确认删除？',\n            title: '是否删除该资料？',\n            okText: '删除',\n            cancelText: '取消',\n            onOk: () => {\n                return this.resourceDelConfirm({ course_id: this.vodId, doc_id: record.doc_id })\n            },\n            onCancel: () => { },\n            size: 'big'\n        })\n    }\n\n    resourceDelConfirm = (data) => {\n\n        return actionVODManage.resourceDel(data).then(res => {\n            if (res.code === 200) {\n                this.showToast({ type: 'success', content: '删除成功' })\n                this.getResourceList();\n            } else {\n                this.showToast({ type: 'error', content: '删除失败' })\n            }\n        })\n    }\n\n    getResourceList({ page = this.state.resourceListInfo.page } = { page: this.state.resourceListInfo.page }) {\n        this.setState({\n            getListLoading: true\n        })\n        actionVODManage.getResourceList({\n            course_id: this.vodId,\n            page,\n            pagesize: this.pageSize\n        }).then(res => {\n            if (res.code === 200) {\n                if (res.date && res.data.list.length === 0 && page > 1) {\n                    this.getResourceList({ page: page - 1 })\n                } else {\n                    let newState = {\n                        resourceListInfo: {\n                            list: res.data.list,\n                            page,\n                            count: res.data.count,\n                            pageNum: Math.ceil(res.data.count / this.pageSize)\n                        }\n                    }\n                    this.setState(newState)\n                }\n            }\n        }).finally(() => {\n            this.setState({\n                getListLoading: false\n            })\n        })\n    }\n\n    updateValue(data) {\n        actionVODManage.resourceEdit(data).then(res => {\n            if (res.code === 200) {\n                this.showToast({ type: 'success', content: '操作成功' });\n                this.getResourceList();\n            } else {\n                this.showToast({ type: 'error', content: '操作失败' });\n                this.getResourceList();\n            }\n        }).catch(err => {\n            this.getResourceList();\n        })\n    }\n\n    getRightItems = () => {\n        return (\n            [\n                interfaces.USER_ADD && <RLButton\n                    label='添加资料'\n                    type='primary'\n                    key='add'\n                    onClick={() => {\n                        this.setState({\n                            showResImportModal: true\n                        })\n                    }}\n                    style={{ marginLeft: 20 }}\n                    disabled={this.props.uploading}\n                />\n            ]\n        )\n    }\n\n    onSelectChange = (selectedRowKeys, selectedRows) => {\n        this.setState({\n            selectedMemberKeys: selectedRowKeys,\n        })\n    }\n\n    pageChange = (page, pageSize) => {\n        this.getResourceList({ page })\n    }\n\n    rowClick = (e, user) => {\n        this.props.changePage('detail', {\n            userId: user.id,\n        })\n    }\n    editConfirm = (values) => {\n        console.log(values);\n        let data = {\n            course_id: this.vodId,\n            id: this.state.resInfo.id,\n            doc_id: this.state.resInfo.doc_id,\n            title: values.title\n        };\n        actionVODManage.resourceEdit(data).then(res => {\n            if (res.code === 200) {\n                this.getResourceList();\n                this.showToast({ type: 'success', content: '编辑成功' });\n                this.setState({\n                    showResEditModal: false\n                });\n            }\n        }).catch(err => {\n            this.showToast({ type: 'error', content: '编辑失败' });\n            this.setState({\n                showResEditModal: false\n            })\n        })\n    }\n    pageTitle = () => {\n        return (\n            <div className=\"custom-page-title\">\n                <span>点播资料</span>\n                <RLButton\n                    className=\"custom-page-title-btn\"\n                    type=\"default\"\n                    onClick={() => {\n                        this.props.changePage('vod_list', {\n                            vodPage: this.vodPage,\n                        });\n                    }}\n                    label='返回'\n                />\n            </div>\n        )\n    }\n    render() {\n        return (\n            <WindowContainer title={this.pageTitle}>\n                <div className='content-user'>\n                    <RLFilterTool leftItems={[]} rightItems={this.getRightItems} />\n                    <RLTable\n                        loading={this.state.getListLoading}\n                        dataSource={this.state.resourceListInfo.list}\n                        rowKey='uuid'\n                        columns={this.columns}\n                        // rowSelection={{\n                        //     type: 'checkbox',\n                        //     onChange: this.onSelectChange,\n                        //     getCheckboxProps: (record) => ({\n                        //         disabled: false\n                        //     })\n                        // }}\n                        paginationInfo={{\n                            total: this.state.resourceListInfo.count,\n                            pageSize: this.pageSize,\n                            onChange: this.pageChange,\n                            current: this.state.resourceListInfo.page\n                        }}\n                        rowClassName='rl-table-click-row'\n                    />\n\n\n                    {this.state.showResImportModal && <RLModal\n                        title=\"添加资料\"\n                        closable={true}\n                        onCancel={() => {\n                            this.setState({\n                                showResImportModal: false\n                            })\n                        }}\n                        footer={null}\n                        visible={this.state.showResImportModal}\n                    >\n                        <div className=\"videoinput\">\n                            <RLForm onFinish={this.batchApprove} validateTrigger='onBlur' initialValues={{ status: 1 }}>\n                                <RLFormItem label=\"上传资料\" name=\"file\" colon={false}>\n                                    <div style={{ display: 'flex', flexDirection: 'row' }}>\n                                        <RLInput style={{ width: 200 }}\n                                            placeholder=\"请选择上传pdf文件\"\n                                            value={this.state.uploadFile && this.state.uploadFile.name} disabled={true}\n                                        />\n                                        <Upload\n                                            accept=\"application/pdf\"\n                                            multiple={false}\n                                            showUploadList={false}\n                                            beforeUpload={(file) => {\n                                                this.setState({\n                                                    uploadFile: file\n                                                })\n                                                return false;\n                                            }}>\n                                            <RLButton label=\"选择资料\"\n                                                style={{ marginLeft: 20 }} />\n                                        </Upload>\n                                    </div>\n                                </RLFormItem>\n                                <RLFormItem>\n                                    <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'center', marginTop: 20 }}>\n                                        <RLButton label=\"取消\"\n                                            onClick={() => {\n                                                this.setState({\n                                                    showResImportModal: false\n                                                })\n                                            }}\n                                            style={{ marginRight: 40 }} />\n                                        <RLButton label=\"开始上传\"\n                                            className=\"\"\n                                            type=\"primary\"\n                                            htmlType=\"submit\"\n                                            onClick={e => {\n                                                e.stopPropagation()\n                                                const file = this.state.uploadFile\n                                                if (!file) {\n                                                    this.showToast('请先选择资料')\n                                                    return\n                                                }\n                                                if (!file.type.includes('pdf')) {\n                                                    this.showToast('请选择pdf文件上传')\n                                                    return\n                                                }\n                                                eventBus.emit('upload-video', this.state.uploadFile, {\n                                                    mimetype: 'text/pdf',\n                                                    dtype: 3,\n                                                    dtranscode: false,\n                                                    type: 'vod',\n                                                    course_id: this.vodId,\n                                                    is_down: 1\n                                                });\n                                                this.setState({\n                                                    showResImportModal: false,\n                                                    uploadFile: null\n                                                });\n                                            }} />\n                                    </div>\n                                </RLFormItem>\n                            </RLForm>\n                        </div>\n                    </RLModal>}\n\n                    {this.state.showResEditModal && <RLModal\n                        title=\"修改名称\"\n                        visible={this.state.showResEditModal}\n                        onCancel={() => {\n                            this.setState({\n                                showResEditModal: false\n                            })\n                        }}\n                        footer={null}\n                    >\n                        <RLForm\n                            initialValues={this.state.resInfo}\n                            onFinish={this.editConfirm}\n                        >\n                            <RLFormItem label=\"资料名称\" name=\"title\" colon={false}>\n                                <RLInput defaultValue={this.state.resInfo.title} />\n                            </RLFormItem>\n                            <RLFormItem>\n                                <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'center', marginTop: 40 }}>\n                                    <RLButton label=\"取消\"\n                                        onClick={() => {\n                                            this.setState({\n                                                showResEditModal: false\n                                            })\n                                        }}\n                                    />\n                                    <RLButton label=\"确定\"\n                                        type=\"primary\"\n                                        htmlType=\"submit\"\n                                        style={{ marginLeft: 20 }}\n                                    />\n                                </div>\n                            </RLFormItem>\n                        </RLForm>\n                    </RLModal>}\n                </div>\n            </WindowContainer>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props,\n        uploading: store.storeCommon.uploading,\n    }\n})(CmpResourceList)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/VODManage/components/videoManage/CmpVideoList.js",["1633","1634","1635","1636","1637","1638","1639","1640","1641","1642","1643"],"import { createRef } from 'react';\nimport BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport { RLInput, RLButton, RLSelect, RLTable, RLFilterTool, RLTooltip, RLDatePicker, RLModal, RLForm, RLFormItem, RLRadioGroup, RLTextarea } from '@components/index.js'\nimport actionVideo from '@actions/VODManage/actionVideoManage.js'\n// import '../../userList/UserList.less'\nimport interfaces from '@/api/interfaces'\nimport utils from '@/libs/utils.js'\nimport eventBus from '@/libs/EventBus.js'\nimport config from '@/config.js';\nimport { DatePicker, Input } from 'antd';\nimport actionVideoManage from '../../../../store/actions/VODManage/actionVideoManage';\nimport { Upload } from 'antd';\nimport moment from 'moment';\nimport CmpVideoUploadModal from './CmpVideoUpload.js';\nimport CmpVideoPlayer from './CmpVideoPlayer.js';\nimport CmpUpload from '@/pages/common/CmpUpload.js';\n\nclass CmpVideoList extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.state = {\n            searchParam : {  // 筛选用户列表项\n                // status: null,\n                // keyword: null,\n                type: null,\n                value: '',\n            },\n            videoListInfo: {\n                pageNum: 1,  // 总叶数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: 1,     // 当前第几页\n            },\n\n            selectedMemberKeys: [],  // 选中的用户\n            getListLoading: true,       // 获取列表loading\n\n            videoLink: '', \n\n            showVideoAddModal: false,\n\n            //修改名称弹框\n            showVideoEditModal: false,\n            selectedRecord: {},\n\n            showPreviewModal: false,\n\n            showLinkModal: false,\n        }\n        this.columns = [\n            {\n                title: '视频基本信息',\n                width: '25%',\n                key: 'basic',\n                render: (text, record, index)=>{\n                    return  (<div style={{}}> \n                        <div> \n                            <span>名称:</span>\n                            <span style={{marginLeft: 5}}>{record.originalname}</span>\n                        </div>\n                        <div>\n                            <span>ID:</span>\n                            <span style={{marginLeft: 5}}>{record._id}</span>\n                        </div>\n                        <div>\n                            <span>时长:</span>\n                            <span style={{marginLeft: 5}}>{this.parseDuration(record.duration)}</span>\n                        </div>\n                    </div>)\n                }\n            },\n            {\n                title: '视频大小',\n                dataIndex: 'size',\n                key: 'size',\n                width: '15%',\n                render: (size, record) => {\n                    return (<div>\n                        {this.parseSize(record.size)}\n                    </div>)\n                }\n            },\n            {\n                title: '上传时间',\n                dataIndex: 'createAt',\n                key: 'createAt',\n                width: '15%',\n                render: (text, record) => {\n                    return (<div>\n                        {this.parseCreateTime(record.createAt)}\n                    </div>)\n                }\n            },\n            {\n                title: '转码状态',\n                key: 'status',\n                width: '10%',\n                render: (text, record) => {\n                    return (<div>\n                        {\n                            record.status === 'finished' ? <span>转码完成</span> : \n                                <>\n                                {\n                                    record.status === 'trans&chunk' || record.status === 'waiting' ? <span>转码中</span>:<span>转码失败</span>\n                                }\n                                </>\n                        }\n                    </div>)\n                }\n            },\n            {\n                title: '上传者',\n                dataIndex: 'creator',\n                key: 'creator',\n                width: '15%'\n            },\n            {\n                title: <span style={{ paddingLeft: 6 }}>操作</span>,\n                key: 'option',\n                width: '20%',\n                render: (text, record) => (\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\n                        {\n                            interfaces.VIDEO_DELETE && \n                            <RLButton\n                                type='link'\n                                label='删除'\n                                onClick={(e) => {\n                                    e.stopPropagation()\n                                    this.delVideo(record);\n                                }}\n                                style={{color:'#8F1D22'}}\n                            />\n                        }\n                        {\n                            interfaces.VIDEO_EDIT &&\n                            <RLButton\n                                type='link'\n                                label='修改名称'\n                                onClick={(e) => {\n                                    e.stopPropagation()\n                                    this.setState({\n                                        selectedRecord: record,\n                                        showVideoEditModal: true\n                                    })\n                                }}\n                                style={{color:'#8F1D22'}}\n                            />\n                        }\n                        {\n                            record.status === \"finished\" && \n                            interfaces.VIDEO_GET_URL &&\n                            (\n                                <RLButton\n                                    type='link' label='预览'\n                                    onClick={(e) => {\n                                        e.stopPropagation();\n                                        actionVideoManage.getVideoUrl(record._id).then(res => {\n                                            // if(res.code === 200){\n                                                this.setState({\n                                                    videoLink: res.movies[0].ossurl,\n                                                    showPreviewModal: true,\n                                                });         \n                                            // }\n                                        });\n                                        // this.setState({\n                                        //     videoLink: record.url,\n                                        //     showPreviewModal: true,\n                                        // })\n                                    }}\n                                    style={{color:'#8F1D22'}}\n                                />\n                            )\n                        }\n                        {\n                            record.status === \"finished\" &&\n                            interfaces.VIDEO_PREVIEW &&\n                            (\n                                <RLButton\n                                    type='link'\n                                    label='获取链接'\n                                    onClick={(e) => {\n                                        e.stopPropagation();\n                                        actionVideoManage.getVideoUrl(record._id).then(res => {\n                                            // if(res.code === 200){\n                                                this.setState({\n                                                    videoLink: res.movies[0].ossurl,\n                                                    showLinkModal: true,\n                                                });         \n                                            // }\n                                        });\n                                        // this.setState({\n                                        //     videoLink: record.url,\n                                        //     showLinkModal: true\n                                        // })\n                                    }}\n                                    style={{color:'#8F1D22'}}\n                                />\n                            )\n                        }\n                    </div>\n                )\n            },\n        ]\n        this.getVideoList(); \n    }\n    parseDuration(duration){\n        let time = Number.parseInt(duration);\n        if(time.toString() === 'NaN'){\n            return '';\n        }\n        if(time > -1){\n            var hour = Math.floor(time/3600);\n            var min = Math.floor(time/60) % 60;\n            var sec = time % 60;\n            if(hour < 10) {\n                time = '0'+ hour + \":\";\n            } else {\n                time = hour + \":\";\n            }\n\n            if(min < 10){\n                time += \"0\";\n            }\n            time += min + \":\";\n\n            if(sec < 10){\n                time += \"0\";\n            }\n            time += sec;\n        }\n        return time;\n    }\n    parseSize(size){\n        let filesize = Number.parseFloat(size);\n        if( filesize.toString() === 'NaN'){\n            return '';\n        }\n        let unit;\n        let units = [ 'B', 'K', 'M', 'G', 'TB' ];\n        while ( (unit = units.shift()) && filesize > 1024 ) {\n            filesize = filesize / 1024;\n        }\n        return (unit === 'B' ? filesize : filesize.toFixed(2)) + unit;\n    }\n    parseCreateTime(createdAt){\n        let time = moment(createdAt).format('YYYY-MM-DD HH:mm:ss');\n        return time;\n    }\n    componentDidMount() {\n        eventBus.addListener('video_res_update', ()=>{\n            this.getVideoList();\n        });\n        this.timer = setInterval(() => {\n            this.refreshVideoList();\n        }, 180000);\n    }\n    componentWillUnmount() {\n        clearInterval(this.timer);\n    }\n    // 删除视频\n    delVideo = (record) => {\n        this.showModal({\n            content: '确认删除后，视频将不可恢复。',\n            title: '确定删除该视频?',\n            okText: '删除',\n            cancelText: '取消',\n            onOk: () => {\n                return this.videoDelConfirm(record)\n            },\n            onCancel: () => { },\n            size: 'big'\n        })\n    }\n    getVideoUrl(){\n        // actionVideoManage.\n    }\n    videoDelConfirm = (record) => {\n        let data = {\n            id: record._id,\n            originalname: record.originalname,\n        };\n        return actionVideoManage.videoDel(data).then(res => {\n            if (res.code === 200) {\n                this.showToast({ type: 'success', content: '删除成功' });\n                this.getVideoList();\n            } else {\n                this.showToast({ type: 'error', content: '删除失败' })\n            }\n        })\n    }\n\n    getVideoList({ page = this.state.videoListInfo.page } = { page: this.state.videoListInfo.page }) {\n        this.setState({\n            getListLoading: true\n        })\n        let data = {\n            page,\n            counts: this.pageSize\n        };\n        if(this.state.searchParam.type){\n            data[this.state.searchParam.type] = this.state.searchParam.value;\n        }\n        actionVideoManage.getVideoList(data).then(res => {\n            if(res.code === 200){\n                if( res.movies && res.movies.length === 0 && page > 1){\n                    this.getVideoList({ page: page - 1 })\n                }else{\n                    this.setState({\n                        videoListInfo: {\n                            list: res.data.movies,\n                            page,\n                            count: res.data.counts,\n                            pageNum: Math.ceil(res.data.counts / this.pageSize)\n                        },\n                        getListLoading: false\n\n                    })\n                }\n            }\n        }).finally(() => {\n            this.setState({\n                getListLoading: false\n            })\n        })\n    }\n    refreshVideoList({ page } = { page: this.state.videoListInfo.page }) {\n        actionVideoManage.getVideoList({\n            keyword: this.state.searchParam.value || '',\n            page,\n            counts: this.pageSize\n        }).then(res => {\n            if(res.code === 200){\n                this.setState({\n                    videoListInfo: {\n                        list: res.data.movies,\n                        page,\n                        count: res.data.counts,\n                        pageNum: Math.ceil(res.data.counts / this.pageSize)\n                    }\n                })\n            }\n        }).finally(() => {\n        })\n    }\n    videoEdit = (values) => {\n        console.log(values)\n        let data = {\n            // name: values.title,\n            id: this.state.selectedRecord._id,\n            originalname: values.title\n        }\n        actionVideoManage.videoEdit(data).then(res =>{\n            if(res.code === 200){\n                this.showToast({type:'success',content:'修改成功'});\n                this.setState({\n                    showVideoEditModal: false\n                })\n                this.getVideoList();\n            }\n        }).catch(err => {\n            console.log(err);\n        })\n    }\n\n\n    setLogo(values){\n        console.log(values)\n    }\n    \n    getLeftItems = () => {\n        return (\n            [\n                <RLSelect\n                    ref = {c => this.keywordInput = c}\n                    allowClear \n                    options={[{label: '视频ID', value: 'ids'},{label: '视频名称', value: 'keyword'}]}\n                    style={{ width: 140, marginRight: 20 }}\n                    placeholder='请选择'\n                    value={this.state.searchParam.type}\n                    onChange={(val) => {\n                        this.setState({\n                            searchParam: {\n                                ...this.state.searchParam,\n                                type: val \n                            }\n                        })\n                    }}\n                    key='type'\n                />,\n                <RLInput\n                    ref={ c => this.valueInput = c }\n                    placeholder='请输入'\n                    allowClear \n                    key='keyword'\n                    style={{ width: 150, marginRight: 20 }}\n                    value={this.state.searchParam.value}\n                    onChange={(e) => {\n                        this.setState({\n                            searchParam: {\n                                ...this.state.searchParam,\n                                value: e.target.value\n                            }\n                        })\n                    }}\n                />,\n    \n                <RLButton label='搜索'\n                    type='primary'\n                    key='add'\n                    onClick={() => {\n                        this.getVideoList({page: 1});\n                    }}\n                    style={{ marginRight: 20 }}\n                />,\n\n                <RLButton label='重置'\n                    key='add'\n                    onClick={() => {\n                        this.setState({\n                            start_date: null,\n                            end_date: null,\n                            searchParam : {\n                                type: null,\n                                value: '',\n                            }\n                        }, () => {\n                            this.getVideoList({page: 1});\n                        });\n                    }}\n                    style={{ marginRight: 20 }}/>,\n                <RLButton/>\n            ]\n        )\n    }\n\n    getRightItems = () => {\n        return (\n            [\n                interfaces.VIDEO_ADD && <RLButton\n                    label='添加视频/音频'\n                    type='primary'\n                    key='add'\n                    onClick={() => {\n                        this.setState({\n                            showVideoAddModal: true\n                        });\n                    }}\n                    style={{ marginLeft: 20 }}\n                    disabled={this.props.uploading}\n                />,\n                <RLButton\n                    label=\"刷新\"\n                    key=\"batch_export\"\n                    onClick={() =>{\n                        this.getVideoList();\n                    }}\n                    style={{ marginLeft: 20 }}\n                />,\n            ]\n        )\n    }\n    onSelectChange = (selectedRowKeys, selectedRows) => {\n        this.setState({\n            selectedMemberKeys: selectedRowKeys,\n        })\n    }\n\n    pageChange = (page, pageSize) => {\n        this.getVideoList({ page })\n    }\n\n    render() {\n        return (\n            <WindowContainer title={this.pageTitle}>\n                <div className='content-user'>\n                    <RLFilterTool leftItems={this.getLeftItems} rightItems={[]}/>\n                    <RLFilterTool leftItems={[]} rightItems={this.getRightItems}/>\n                    <RLTable\n                        loading={this.state.getListLoading}\n                        dataSource={this.state.videoListInfo.list}\n                        rowKey='uuid'\n                        columns={this.columns}\n                        // rowSelection={{\n                        //     type: 'checkbox',\n                        //     onChange: this.onSelectChange,\n                        //     getCheckboxProps: (record) => ({\n                        //         disabled: false\n                        //     })\n                        // }}\n                        paginationInfo={{\n                            total: this.state.videoListInfo.count,\n                            // pageSize: this.pageSize,\n                            pageSize: this.pageSize,\n                            onChange: this.pageChange,\n                            current: this.state.videoListInfo.page\n                        }}\n                        rowClassName='rl-table-click-row'\n                    />\n\n                   { this.state.showPreviewModal &&  <CmpVideoPlayer\n                        visible={this.state.showPreviewModal}\n                        src={this.state.videoLink} \n                        close={()=>{\n                            this.setState({\n                                showPreviewModal: false\n                            })\n                        }} \n                    />}\n\n                   { this.state.showLinkModal && <RLModal \n                        title = \"显示链接\"\n                        visible={this.state.showLinkModal}\n                        footer={null}\n                        onCancel={()=>{ \n                            this.setState({\n                                showLinkModal: false\n                            })\n                        }}>\n                        <div style={{display:'flex', flexDirection:'row',alignItems:'center'}}>\n                           <div style={{width: '70%'}}>{this.state.videoLink}</div>\n                           <RLButton label=\"复制链接\" \n                                type=\"primary\"\n                                onClick={()=>{\n                                    //复制链接到剪贴板\n                                    utils.copy(this.state.videoLink);\n                                    this.showToast({type:'success', content: '链接已复制到剪贴板'});\n                                    this.setState({\n                                        showLinkModal: false\n                                    })\n                                }}\n                                style={{marginLeft: 10}}\n                            />\n                        </div>\n                    </RLModal>}\n\n                   { this.state.showVideoAddModal && <CmpVideoUploadModal\n                        title=\"添加音/视频\"\n                        accept=\"video/mp4,video/x-msvideo,video/webm,video/quicktime,audio/mpeg,audio/x-ms-wma,audio/flac,audio/aac,audio/wav\"\n                        visible={this.state.showVideoAddModal}\n                        onCancel={()=>{\n                            this.setState({\n                                showVideoAddModal: false\n                            })\n                        }}\n                    /> }\n\n                   { this.state.showVideoEditModal &&  <RLModal\n                        title=\"编辑视频/音频\"\n                        visible={this.state.showVideoEditModal}\n                        footer={null}\n                        onCancel={()=>{\n                            this.setState({\n                                showVideoEditModal: false\n                            })\n                        }}\n                        >\n                        <RLForm onFinish={this.videoEdit}\n                            initialValues={this.state.selectedRecord}>\n                            <RLFormItem label=\"视频/音频标题\"\n                                colon={false}\n                                name=\"title\">\n                                <RLInput  defaultValue={this.state.selectedRecord.originalname}/>\n                            </RLFormItem>\n                            <RLFormItem>\n                                <div style={{display:'flex',flexDirection:'row',justifyContent:'center',marginTop: 20}}>\n                                    <RLButton label=\"取消\" \n                                        type=\"normal\"\n                                        onClick={()=>{\n                                            this.setState({ \n                                                showVideoEditModal: false\n                                            })\n                                        }}\n                                        style={{marginRight: 40}}/>\n                                    <RLButton label=\"确定\"\n                                        htmlType=\"submit\"\n                                        type=\"primary\"/>\n                                </div>\n                            </RLFormItem>\n                        </RLForm>\n                    </RLModal>}\n                </div>\n            </WindowContainer>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props,\n        uploading: store.storeCommon.uploading,\n    }\n})(CmpVideoList)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/userManage/actionRoleManage.js",["1644"],"import { getData } from '@/libs/utils.js'\nimport store from '@/store/index.js'\nimport actionTypes from '@/store/actionTypes.js'\nimport config from '@/config.js'\nimport interfaces from '@/api/interfaces'\n\n\nconst actionRoleManage = {\n    /**\n     * 获取角色列表\n     * 下选框列表\n    */\n    getAllRoles() {\n        return getData({ method: 'get', url: interfaces.ALLROLES }).then(res => {\n            console.log('roleList---res:', res)\n            if (res.code === 200) {\n                store.dispatch({\n                    type: actionTypes.ALL_ROLES_CHANGE,\n                    data: res.data\n                });\n            }\n            return res\n        })\n    },\n    /**\n     * 删除用户\n     * \n    */\n    delUser({ }) {\n    },\n\n    /**\n     * 分页获取角色列表\n     * \n    */\n    getRoleList({ page = 1, pagesize = config.pageSize }) {\n        return getData({ method: 'get', url: interfaces.ROLE_LIST, data: { page, pagesize } })\n    },\n\n    // 更换角色\n    changeRole({ role_code, users }) {\n        return getData({ method: 'post', url: interfaces.ROLE_CHANGE, data: { role_code, users } })\n    },\n\n    getSystemAuth(){\n        return getData({method: 'post', url: interfaces.GET_SYSTEM_AUTH })\n    },\n\n    addRole(data){\n        return getData({method:'post', url: interfaces.ROLE_ADD, data: data})\n    },\n\n    deleteRole(data){\n        return getData({method:'post',url: interfaces.ROLE_DELETE, data: data})\n    },\n    editRole(data){\n        return getData({method:'post', url: interfaces.ROLE_EDIT, data: data})\n    },\n}\nexport default actionRoleManage","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/unauthedUser/UnauthedList.js",["1645"],"import BaseCmp from '@components/BaseCmp.js'\nimport { Radio } from 'antd';\nimport { connect } from 'react-redux'\nimport {\n    RLSelect, RLInput, RLButton, RLModal, RLForm, RLFormItem, RLTable, RLFilterTool, RLTooltip, RLTextarea, RLDatePicker, RLRadioGroup\n} from '@components/index.js'\nimport locale from 'antd/es/date-picker/locale/zh_CN'\n\nimport actionUnauthedUserList from '@actions/userManage/actionUnauthedUserList.js'\nimport interfaces from '@/api/interfaces'\n\nimport './UnauthedList.less'\n\nclass UnauthedList extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.state = {\n            searchParam: {\n                type: 1,   // type 1 待认证列表 2 我已处理列表\n                start_time: '',\n                end_time: '',\n                keyword: null,   // 选择 姓名或手机号\n                value: '',   // 姓名或手机号 值\n            },\n            unauthedListInfo: {\n                pageNum: 1,  // 总页数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: props.page || 1,     // 当前第几页\n            },\n            start_date: null,  // moment对象\n            end_date: null,\n            showModal: false,  // 弹框\n            approval_status: null, // 用户认证\n            remark: '',   // 认证详情\n            selectedMemberKeys: [],  // 选中的用户id数组\n            getListLoading: true,    // 获取列表loading\n        }\n\n        // table 字段\n        this.columns = [\n            {\n                title: '序号',\n                dataIndex: 'uuid',\n                key: 'uuid',\n                width: '8%',\n                render: (text, record, index) => {\n                    return <div>{index + 1}</div>\n                }\n            },\n            {\n                title: '姓名',\n                // dataIndex: 'nickname',\n                key: 'nickname',\n                width: '14%',\n                render: (text, record) => {\n                    return <RLTooltip placement=\"bottomLeft\" title={record.nickname}>\n                        <div className='line-clamp-noColor'>\n                            {record.nickname}\n                        </div>\n                    </RLTooltip>\n                }\n            },\n            {\n                title: '手机号',\n                key: 'mobile',\n                width: '14%',\n                render: (text, record) => {\n                    return <RLTooltip placement=\"bottomLeft\" title={record.mobile}>\n                        <div className='line-clamp-noColor'>\n                            {record.mobile}\n                        </div>\n                    </RLTooltip>\n                }\n            },\n            {\n                title: '邮箱',\n                key: 'email',\n                width: '14%',\n                render: (text, record) => {\n                    return <RLTooltip placement=\"bottomLeft\" title={record.email}>\n                        <div className='line-clamp-noColor'>\n                            {record.email}\n                        </div>\n                    </RLTooltip>\n                }\n            },\n            {\n                title: '机构名称',\n                dataIndex: 'company_name',\n                key: 'company_name',\n                width: '18%',\n                render: (text, record) => {\n                    return <RLTooltip placement=\"bottomLeft\" title={record.company_name}>\n                        <div className='line-clamp-noColor'>\n                            {record.company_name}\n                        </div>\n                    </RLTooltip>\n                }\n            },\n            {\n                title: '提交时间',\n                dataIndex: 'apply_time',\n                key: 'apply_time',\n                width: '14%'\n            },\n            {\n                title: <span style={{ paddingLeft: 6 }}>操作</span>,\n                key: 'option',\n                width: '16%',\n                render: (text, record) => (\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\n                        {\n                            <RLButton\n                                type='link'\n                                label='查看'\n                                onClick={(e) => {\n                                    this.rowClick(e, record)\n                                }}\n                            />\n                        }\n                        {\n                            interfaces.USER_APPROVE && <RLButton\n                                type='link'\n                                label='认证'\n                                onClick={(e) => {\n                                    this.approve(e, record)\n                                }}\n                            />\n                        }\n                    </div>\n                )\n            },\n        ]\n\n        // 选择框\n        this.memberOptions = [\n            { keyword: 'nickname', label: '姓名' },\n            { keyword: 'mobile', label: '手机号' }\n        ]\n    }\n    componentWillMount() {\n        this.getUnauthedList()\n    }\n    // 待认证用户列表\n    getUnauthedList({ page = this.state.unauthedListInfo.page } = { page: this.state.unauthedListInfo.page }) {\n        this.setState({\n            getListLoading: true\n        })\n        actionUnauthedUserList.getUserUnauthedList({\n            ...this.state.searchParam,\n            page,\n            pagesize: this.pageSize\n        }).then(res => {\n            if (res.code === 200) {\n                if (res.data.list.length === 0 && page > 1) {\n                    this.getUnauthedList({ page: page - 1 })\n                } else {\n                    let newState = {\n                        unauthedListInfo: {\n                            list: res.data.list,\n                            page,\n                            count: res.data.count,\n                            pageNum: Math.ceil(res.data.count / this.pageSize)\n                        }\n                    }\n                    this.setState(newState)\n                }\n            }\n        }).finally(() => {\n            this.setState({\n                getListLoading: false\n            })\n        })\n    }\n\n    getLeftItems = () => {\n        const { keyword, value } = this.state.searchParam\n        const { start_date, end_date } = this.state\n        return ([\n            <div className=\"newDateArea\">\n                <p>从</p>\n                <RLDatePicker\n                    allowClear\n                    onChange={(date, dateString) => {\n                        this.setState({\n                            start_date: date,\n                            searchParam: {\n                                ...this.state.searchParam,\n                                start_time: dateString\n                            }\n                        })\n                    }}\n                    disabledDate={this.startDisabledDate}\n                    locale={locale}\n                    style={{ width: 160 }}\n                    inputReadOnly={true}\n                    format=\"YYYY-MM-DD\"\n                    placeholder='请选择日期'\n                    value={start_date}\n                />\n                <p>至</p>\n                <RLDatePicker\n                    allowClear\n                    onChange={(date, dateString) => {\n                        this.setState({\n                            end_date: date,\n                            searchParam: {\n                                ...this.state.searchParam,\n                                end_time: dateString\n                            }\n                        })\n                    }}\n                    disabledDate={this.startDisabledDate}\n                    locale={locale}\n                    style={{ width: 160, marginRight: 20 }}\n                    inputReadOnly={true}\n                    format=\"YYYY-MM-DD\"\n                    placeholder='请选择日期'\n                    value={end_date}\n                />\n            </div>,\n            <RLSelect\n                options={this.memberOptions}\n                style={{ width: 150, marginRight: 12 }}\n                key='keyword'\n                placeholder='请选择'\n                valuekey='keyword'\n                labelkey='label'\n                value={keyword}\n                onChange={(val) => {\n                    this.setState({\n                        searchParam: {\n                            ...this.state.searchParam,\n                            keyword: val\n                        }\n                    })\n                }}\n            />,\n            <RLInput placeholder='请输入姓名或手机号'\n                // allowClear afterFix='SearchOutlined'\n                style={{ width: 200 }}\n                key='value'\n                value={value}\n                onChange={(e) => {\n                    this.setState({\n                        searchParam: {\n                            ...this.state.searchParam,\n                            value: e.target.value\n                        }\n                    })\n                }}\n                // afterFixClick={() => {\n                //     this.getUnauthedList()\n                // }}\n            />\n        ])\n    }\n    getRightItems = () => {\n        return ([\n            <RLButton\n                label='搜索'\n                type=\"primary\"\n                key='search'\n                onClick={() => {\n                    this.getUnauthedList()\n                }}\n                style={{ marginLeft: 20, marginRight: 20 }}\n            />,\n            <RLButton\n                label='重置'\n                type='default'\n                key='reset'\n                onClick={() => {\n                    this.setState({\n                        start_date: null,\n                        end_date: null,\n                        searchParam: {\n                            keyword: '',\n                            start_time: '',\n                            end_time: ''\n                        }\n                    })\n                }}\n            />\n        ])\n    }\n    // 列表操作按钮\n    listOperate = () => {\n        return ([\n            interfaces.USER_APPROVE && <RLButton\n                label='批量认证'\n                type=\"primary\"\n                key='batchapprove'\n                onClick={() => {\n                    this.setState({\n                        showModal: true\n                    })\n                }}\n                style={{ marginRight: 20 }}\n                disabled={this.state.selectedMemberKeys.length <= 0}\n            />,\n            <RLButton\n                label='刷新' type='default'\n                key='refresh'\n                onClick={() => {\n                    this.getUnauthedList()\n                }}\n            />\n        ])\n    }\n\n    // 批量认证 方法\n    batchApprove = (values) => {\n        let { selectedMemberKeys: users } = this.state\n        let { approval_status: status, remark } =values;\n        actionUnauthedUserList.approvedOperate({\n            users,\n            status,\n            remark\n        }).then(res => {\n            if (res.code === 200) {\n                this.setState({\n                    showModal: false\n                }, () => {\n                    this.getUnauthedList()\n                })\n                this.showToast({ type: 'success', content: '认证成功' })\n            }\n        })\n    }\n    onSelectChange = (selectedRowKeys, selectedRows) => {\n        console.log('onSelectChange', selectedRowKeys)\n        this.setState({\n            selectedMemberKeys: selectedRowKeys\n        })\n    }\n    pageChange = (page, pageSize) => {\n        console.log('翻页了', page, pageSize)\n        this.getUnauthedList({ page })\n    }\n    // 查看\n    rowClick = (e, record) => {\n        console.log('点击行----record:', record)\n        this.props.changePage('detail', {\n            uuid: record.uuid,\n            approvalId: record.approval_id,\n            tabKey: 'unauthed',\n            page: this.state.unauthedListInfo.page\n        })\n    }\n    // 认证\n    approve = (e, record) => {\n        this.props.changePage('approval', {\n            uuid: record.uuid,\n            tabKey: 'unauthed',\n            page: this.state.unauthedListInfo.page\n        })\n    }\n\n    render() {\n        return (\n            <div className='unauthed-user-content'>\n                <RLFilterTool leftItems={this.getLeftItems} rightItems={this.getRightItems} />\n                <RLFilterTool rightItems={this.listOperate} />\n                <RLTable\n                    loading={this.state.getListLoading}\n                    dataSource={this.state.unauthedListInfo.list}\n                    rowKey='uuid'\n                    columns={this.columns}\n                    rowSelection={{\n                        type: 'checkbox',\n                        onChange: this.onSelectChange,\n                    }}\n                    paginationInfo={{\n                        total: this.state.unauthedListInfo.count,\n                        pageSize: this.pageSize,\n                        onChange: this.pageChange,\n                        current: this.state.unauthedListInfo.page\n                    }}\n                />\n                <RLModal\n                    title='批量认证'\n                    className='modal-approval'\n                    maskClosable={false}\n                    visible={this.state.showModal}\n                    footer={null}\n                    onCancel={() => {\n                        this.setState({\n                            showModal: false\n                        })\n                    }}\n                >\n                    <div style={{ paddingLeft: 20, paddingRight: 20 }}>\n                        <RLForm \n                            validateTrigger='onBlur'\n                            initialValues={{approval_status: 1}}\n                            onFinish={this.batchApprove}>\n                            <RLFormItem\n                                colon={false}\n                                label=\"用户认证\"\n                                name='approval_status'\n                                rules={[{\n                                    required: true,\n                                    message: '请选择是否同意'\n                                }]}\n                            >\n                                <RLRadioGroup\n                                    items={[\n                                        { value: 1, label: '同意' },\n                                        { value: 2, label: '拒绝' },\n                                    ]} />\n                            </RLFormItem>\n                            <RLFormItem\n                                colon={false}\n                                label=\"认证详情\"\n                                name='remark'\n                            >\n                                <RLTextarea rows={4} />\n                            </RLFormItem>\n                            <RLFormItem>\n                            <div className='modal-btnContainer'>\n                                <RLButton label='取消'\n                                    onClick={() => {\n                                        this.setState({\n                                            showModal: false\n                                        })\n                                    }}\n                                />\n                                <RLButton label='确定' type='primary'\n                                    style={{ marginLeft: 50 }}\n                                    htmlType=\"submit\"\n                                />\n                            </div>\n                    </RLFormItem>\n                        </RLForm>\n                    </div>\n                </RLModal>\n            </div>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props\n    }\n})(UnauthedList)\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/userManage/actionUnauthedUserList.js",["1646","1647"],"import { getData } from '@/libs/utils.js'\nimport store from '@/store/index.js'\nimport actionTypes from '@/store/actionTypes.js'\nimport interfaces from '@/api/interfaces'\n\nconst actionUnauthedUserList = {\n    // 用户认证列表\n    // type 1 待认证列表 2 我已处理列表\n    getUserUnauthedList({ type, start_time, end_time, keyword, value, operate_status, pagesize, page }) {\n        return getData({\n            method: 'get',\n            url: interfaces.APPROVE_LIST,\n            data: {\n                type,\n                start_time,\n                end_time,\n                keyword: keyword || '',\n                value,\n                operate_status: operate_status || '',\n                pagesize,\n                page\n            }\n        })\n    },\n    // 用户认证-认证操作\n    approvedOperate({ users = [], status, remark = '' }) {\n        return getData({\n            method: 'post',\n            url: interfaces.USER_APPROVE,\n            data: {\n                users,\n                status,\n                remark\n            }\n        })\n    },\n    // 用户认证-认证详情\n    approvedDetail(data) {\n        return getData({\n            method: 'post',\n            url: interfaces.APPROVE_DETAIL,\n            data\n        })\n    }\n}\nexport default actionUnauthedUserList\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/userFieldsSetting/RegisterField.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/userFieldsSetting/CertificationField.js",[],"/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/unauthedUser/ProcessedList.js",["1648","1649"],"import BaseCmp from '@components/BaseCmp.js'\nimport { connect } from 'react-redux'\nimport {\n    RLInput, RLButton, RLSelect, RLTable, RLFilterTool, RLTooltip, RLDatePicker\n} from '@components/index'\nimport locale from 'antd/es/date-picker/locale/zh_CN'\n\nimport actionUnauthedUserList from '@actions/userManage/actionUnauthedUserList.js'\n\nimport interfaces from '@/api/interfaces'\nimport utils from '@/libs/utils.js'\n\nimport './UnauthedList.less'\n\nclass ProcessedList extends BaseCmp {\n    constructor(props) {\n        super(props)\n        this.state = {\n            // ‘我已处理’ 筛选条件\n            searchParam: {\n                type: 2,       // type 1 待认证列表 2 我已处理列表\n                keyword: null,   // 选择 姓名或手机号\n                value: '',   // 姓名或手机号 值\n                operate_status: null, // 认证状态\n                start_time: '', // 开始时间\n                end_time: '' //结束时间\n            },\n            processedList: {\n                pageNum: 1,  // 总页数\n                count: 0,    // 总条数\n                list: [],    // 数据数组\n                page: props.page || 1      // 当前第几页\n            },\n            start_date: null,  // moment对象\n            end_date: null,\n            selectedMemberKeys: [],  // 选中的用户\n            getListLoading: true,    // 获取列表loading\n        }\n\n        // table 字段\n        this.columns = [\n            {\n                title: '序号',\n                dataIndex: 'uuid',\n                key: 'uuid',\n                width: '8%',\n                render: (text, record, index) => {\n                    return <div>{index + 1}</div>\n                }\n            },\n            {\n                title: '申请人',\n                // dataIndex: 'nickname',\n                key: 'nickname',\n                width: '10%',\n                render: (text, record) => {\n                    return <RLTooltip placement=\"bottomLeft\" title={record.nickname}>\n                        <div className='line-clamp-noColor'>\n                            {record.nickname}\n                        </div>\n                    </RLTooltip>\n                }\n            },\n            {\n                title: '手机号',\n                key: 'mobile',\n                width: '10%',\n                render: (text, record) => {\n                    return <RLTooltip placement=\"bottomLeft\" title={record.mobile}>\n                        <div className='line-clamp-noColor'>\n                            {record.mobile}\n                        </div>\n                    </RLTooltip>\n                }\n            },\n            {\n                title: '邮箱',\n                key: 'email',\n                width: '14%',\n                render: (text, record) => {\n                    return <RLTooltip placement=\"bottomLeft\" title={record.email}>\n                        <div className='line-clamp-noColor'>\n                            {record.email}\n                        </div>\n                    </RLTooltip>\n                }\n            },\n            {\n                title: '机构名称',\n                dataIndex: 'company_name',\n                key: 'company_name',\n                width: '14%',\n                render: (text, record) => {\n                    return <RLTooltip placement=\"bottomLeft\" title={record.company_name}>\n                        <div className='line-clamp-noColor'>\n                            {record.company_name}\n                        </div>\n                    </RLTooltip>\n                }\n            },\n            {\n                title: '申请时间',\n                dataIndex: 'apply_time',\n                key: 'apply_time',\n                width: '12%'\n            },\n            {\n                title: '认证时间',\n                dataIndex: 'approval_time',\n                key: 'approval_time',\n                width: '12%'\n            },\n            {\n                title: '认证状态',\n                dataIndex: 'operate_status_desc',\n                key: 'operate_status_desc',\n                width: '10%'\n            },\n            {\n                title: <span style={{ paddingLeft: 6 }}>操作</span>,\n                key: 'option',\n                width: '16%',\n                render: (text, record) => (\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\n                        {\n                            <RLButton\n                                type='link'\n                                label='查看'\n                                onClick={(e) => {\n                                    this.rowClick(e, record)\n                                }}\n                            />\n                        }\n                    </div>\n                )\n            }\n        ]\n\n        // 选择框\n        this.memberOptions = [\n            { keyword: 'nickname', label: '姓名' },\n            { keyword: 'mobile', label: '手机号' }\n        ]\n\n        // 认证状态\n        this.approveStatusOptions = [\n            { id: 1, label: '已同意' },\n            { id: 2, label: '已拒绝' }\n        ]\n    }\n    componentWillMount() {\n        this.getProcessedList()\n    }\n    // ‘我已处理’列表\n    getProcessedList({ page = this.state.processedList.page } = { page: this.state.processedList.page }) {\n        this.setState({\n            getListLoading: true\n        })\n        actionUnauthedUserList.getUserUnauthedList({\n            ...this.state.searchParam,\n            page,\n            pagesize: this.pageSize\n        }).then(res => {\n            if (res.code === 200) {\n                if (res.data.list.length === 0 && page > 1) {\n                    this.getProcessedList({ page: page - 1 })\n                } else {\n                    let newState = {\n                        processedList: {\n                            list: res.data.list,\n                            page,\n                            count: res.data.count,\n                            pageNum: Math.ceil(res.data.count / this.pageSize)\n                        }\n                    }\n                    this.setState(newState)\n                }\n            }\n        }).finally(() => {\n            this.setState({\n                getListLoading: false\n            })\n        })\n    }\n\n    getLeftItems = () => {\n        const { keyword, value, operate_status } = this.state.searchParam\n        const { start_date, end_date } = this.state\n        return ([\n            <div className=\"newDateArea\">\n                <p>从</p>\n                <RLDatePicker\n                    allowClear\n                    onChange={(date, dateString) => {\n                        this.setState({\n                            start_date: date,\n                            searchParam: {\n                                ...this.state.searchParam,\n                                start_time: dateString\n                            }\n                        })\n                    }}\n                    disabledDate={this.startDisabledDate}\n                    locale={locale}\n                    style={{ width: 160 }}\n                    inputReadOnly={true}\n                    format=\"YYYY-MM-DD\"\n                    placeholder='请选择日期'\n                    value={start_date}\n                />\n                <p>至</p>\n                <RLDatePicker\n                    allowClear\n                    onChange={(date, dateString) => {\n                        this.setState({\n                            end_date: date,\n                            searchParam: {\n                                ...this.state.searchParam,\n                                end_time: dateString\n                            }\n                        })\n                    }}\n                    disabledDate={this.startDisabledDate}\n                    locale={locale}\n                    style={{ width: 160, marginRight: 20 }}\n                    inputReadOnly={true}\n                    format=\"YYYY-MM-DD\"\n                    placeholder='请选择日期'\n                    value={end_date}\n                />\n            </div>,\n            <RLSelect\n                options={this.memberOptions}\n                style={{ width: 150, marginRight: 12 }}\n                key='keyword'\n                placeholder='请选择'\n                valuekey='keyword'\n                labelkey='label'\n                value={keyword}\n                onChange={(val) => {\n                    this.setState({\n                        searchParam: {\n                            ...this.state.searchParam,\n                            keyword: val\n                        }\n                    })\n                }}\n            />,\n            <RLInput placeholder='请输入姓名或手机号'\n                // allowClear afterFix='SearchOutlined'\n                style={{ width: 200, marginRight: 20 }}\n                key='value'\n                value={value}\n                onChange={(e) => {\n                    this.setState({\n                        searchParam: {\n                            ...this.state.searchParam,\n                            value: e.target.value\n                        }\n                    })\n                }}\n                // afterFixClick={() => {\n                //     this.getProcessedList()\n                // }}\n            />,\n            <RLSelect\n                allowClear\n                options={this.approveStatusOptions}\n                style={{ width: 150 }}\n                key='operate_status'\n                placeholder='认证状态'\n                valuekey='id'\n                labelkey='label'\n                value={operate_status}\n                onChange={(val) => {\n                    this.setState({\n                        searchParam: {\n                            ...this.state.searchParam,\n                            operate_status: val\n                        }\n                    })\n                }}\n            />\n        ])\n    }\n    getRightItems = () => {\n        return ([\n            <RLButton\n                label='搜索'\n                type='primary'\n                key='search'\n                onClick={() => {\n                    this.getProcessedList({ type: 2 })\n                }}\n                style={{ marginLeft: 20, marginRight: 20 }}\n            />,\n            <RLButton\n                label='重置'\n                type='default'\n                key='reset'\n                onClick={() => {\n                    this.setState({\n                        start_date: null,\n                        end_date: null,\n                        searchParam: {\n                            keyword: '',\n                            operate_status: null,\n                            start_time: '',\n                            end_time: ''\n                        }\n                    })\n                }}\n            />\n        ])\n    }\n    onSelectChange = (selectedRowKeys, selectedRows) => {\n        console.log(selectedRowKeys, selectedRows)\n        this.setState({\n            selectedMemberKeys: selectedRowKeys\n        })\n    }\n    pageChange = (page, pageSize) => {\n        console.log('翻页了', page, pageSize)\n        this.getProcessedList({ page })\n    }\n    rowClick = (e, record) => {\n        console.log('点击行----record:', record)\n        this.props.changePage('detail', {\n            uuid: record.uuid,\n            approvalId: record.approval_id,\n            tabKey: 'processed',\n            page: this.state.processedList.page\n        })\n    }\n    render() {\n        return (\n            <div className='content-user'>\n                <RLFilterTool leftItems={this.getLeftItems} rightItems={this.getRightItems} />\n                <RLTable\n                    loading={this.state.getListLoading}\n                    dataSource={this.state.processedList.list}\n                    rowKey='uuid'\n                    columns={this.columns}\n                    rowSelection={{\n                        type: 'checkbox',\n                        onChange: this.onSelectChange\n                    }}\n                    paginationInfo={{\n                        total: this.state.processedList.count,\n                        pageSize: this.pageSize,\n                        onChange: this.pageChange,\n                        current: this.state.processedList.page\n                    }}\n                    // onRow={(record) => {\n                    //     return {\n                    //         onClick: (e) => {\n                    //             this.rowClick(e, record)\n                    //         }\n                    //     }\n                    // }}\n                    rowClassName='rl-table-click-row'\n                />\n            </div>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props\n    }\n})(ProcessedList)\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/userManage/components/authorityManage/CmpAuthTree.js",["1650","1651","1652","1653","1654","1655","1656","1657","1658","1659","1660","1661","1662","1663","1664","1665","1666","1667","1668","1669","1670","1671"],"import { createRef } from 'react';\nimport BaseCmp from '@components/BaseCmp.js'\nimport WindowContainer from '@components/WindowContainer.js'\nimport { connect } from 'react-redux'\nimport { RLInput, RLButton, RLSelect, RLTable, RLFilterTool, RLTooltip, RLDatePicker, RLModal, RLForm, RLFormItem, RLRadioGroup, RLCheckbox } from '@components/index.js'\nimport actionUserList from '@actions/userManage/actionUserList.js'\nimport actionRoleManage from '@actions/userManage/actionRoleManage.js'\n// import '../../userList/UserList.less'\nimport interfaces from '@/api/interfaces'\nimport utils from '@/libs/utils.js'\nimport eventBus from '@/libs/EventBus.js'\nimport { DatePicker, Input } from 'antd';\n\nimport './CmpAuthTree.less';\n\nexport default class CpmAuthTree extends BaseCmp{\n    constructor(props){\n        super(props);\n        this.state = {\n            checkedList: this.props.checkedList || []\n        }\n    }\n    componentWillReceiveProps = (nextProps) => {\n        this.setState({\n          checkedList: nextProps.checkedList\n        });   \n    }\n    isChecked(id){\n        if(!this.props.checkedList) return false;\n        let item = this.state.checkedList.find(item => item === id)\n        return item ? true : false\n    }\n    getCheckedList(){\n        return this.state.checkedList\n    }\n    render(){\n        return (\n            <div className=\"auth-tree\">\n                {\n                    this.props.treeData.map(item => {\n                        return <div className=\"auth-tree-container\" >\n                                    <div className=\"auth-tree-title\">{item.name}</div>\n                                    {\n                                        item.children && item.children.map( item => {\n                                            return <div className=\"auth-tree-secend-container\">\n                                                        <div className=\"auth-tree-second-level\">\n                                                            <RLCheckbox \n                                                                label={item.name}\n                                                                checked={this.isChecked(item.id)}\n                                                                // disabled={this.props.readOnly}\n                                                                onChange={(e) => {\n                                                                    if(this.props.readOnly) return;\n                                                                    if(e.target.checked){\n                                                                        if( !this.state.checkedList.includes(item.id)){\n                                                                            this.state.checkedList.push(item.id);\n                                                                            this.setState({\n                                                                                checkedList: this.state.checkedList\n                                                                            });\n                                                                        }\n                                                                    }else{\n                                                                        let index = this.state.checkedList.findIndex( i => i === item.id );\n                                                                        if(index >= 0){\n                                                                            this.state.checkedList.splice(index, 1);\n                                                                            this.setState({\n                                                                                checkedList: this.state.checkedList\n                                                                            });\n                                                                        }\n                                                                        item.children && item.children.map( item => {\n                                                                            let index = this.state.checkedList.findIndex( i => i === item.id );\n                                                                            if(index >= 0){\n                                                                                this.state.checkedList.splice(index, 1);\n                                                                                this.setState({\n                                                                                    checkedList: this.state.checkedList\n                                                                                });\n                                                                            }\n                                                                        })\n                                                                    }\n                                                                }}\n                                                                />\n                                                        </div>\n                                                        <div className=\"auth-tree-third-level\">\n                                                            {\n                                                                item.children && item.children.map( item => {\n                                                                    return <RLCheckbox \n                                                                                label={item.name}\n                                                                                checked={this.isChecked(item.id)}\n                                                                                // disabled={this.props.readOnly}\n                                                                                style={{color:'black'}}\n                                                                                onChange={(e)=>{\n                                                                                    if(this.props.readOnly) return;\n                                                                                    if(e.target.checked){\n                                                                                        if( !this.state.checkedList.includes(item.id)){\n                                                                                            this.state.checkedList.push(item.id);\n                                                                                            if(!this.state.checkedList.includes(item.pid)){\n                                                                                                this.state.checkedList.push(item.pid);\n                                                                                            }\n                                                                                            this.setState({\n                                                                                                checkedList: this.state.checkedList\n                                                                                            })\n                                                                                        }\n                                                                                    }else{\n                                                                                        let index = this.state.checkedList.findIndex( i => i === item.id );\n                                                                                        if(index >= 0){\n                                                                                            this.state.checkedList.splice(index, 1);\n                                                                                            this.setState({\n                                                                                                checkedList: this.state.checkedList\n                                                                                            });\n                                                                                        }\n                                                                                    }\n                                                                                }}\n                                                                                />\n                                                                })\n                                                            }\n                                                        </div>\n                                            </div>\n                                        })\n                                    }\n                        </div>\n                    })\n                }\n            </div>\n        )\n    }\n}","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/VODManage/components/videoManage/CmpVideoPlayer.js",["1672"],"import React, { createRef } from 'react';\nimport BaseCmp from '@components/BaseCmp.js';\nimport { RLButton, RLModal } from '@components/index.js'\n\nimport videojs from 'video.js';\nimport 'videojs-contrib-hls';\n\nimport 'video.js/dist/video-js.css';\n\nimport videozhCN from 'video.js/dist/lang/zh-CN.json';\n\nimport './CmpVideoPlayer.less';\n\nvideojs.addLanguage('zh-CN', videozhCN);\n\nexport default class VideoPlayer extends BaseCmp {\n    constructor(props){\n        super(props);\n        this.state = {};\n        this.video = createRef();\n        this.totalTime = 0;\n    }\n\n    componentDidMount() {\n        //播放器配置项\n\n        this.config = {\n            autoPlay: true,\n            language: 'zh-CN',\n            controls: true,\n            preload: 'auto',\n            userActions: {\n                hotkeys: false\n            },\n            bigPlayButton: true,\n            textTrackDisplay: false,\n            posterImage: true,\n            errorDisplay: false,\n            controlBar: {\n                children:{\n                    playToggle: true,\n                    volumePanel: {\n                        inline: false\n                    }, \n                    currentTimeDisplay: true,\n                    progressControl: true,\n                    durationDisplay:true,\n                    fullscreenToggle: true\n                },\n            },\n            hls: {\n                withCredentials: true,\n                overrideNative: true\n            },\n            html5: {\n                nativeAudioTracks: false,\n                nativeVideoTracks: false,\n            }\n        };\n\n        this.player = videojs(this.video, this.config, \n            \n            function onPlayerReady(){\n                \n                console.log('-----player is ready------')\n                // this.play();\n                this.on('error', () => {\n                    console.log('---------播放出错----------');\n                });\n                this.on('ended', () => {\n                    console.log('-----------播放结束-----------');\n                });\n\n                this.on('timeupdate', () => {\n                    // let currentTime = Math.floor(this.currentTime());\n                    // console.log('-----------播放时间----------', currentTime)\n                    // if (currentTime > 0 && currentTime > this.totalTime && (currentTime % 5 === 0)) {\n                    //     //每隔5秒，向服务器提交播放时间(秒)\n                    //     console.log('-----------播放时间----------', currentTime);\n                    // }\n                    // this.totalTime = currentTime;\n                });\n\n            },\n        );\n    }\n    componentWillUnmount() {\n        if(this.player){\n            this.player.dispose();\n        }\n    }\n    render(){\n        return (\n            <RLModal \n                className=\"video-player\"\n                title=\"视频预览\"\n                onCancel={this.props.close}\n                footer={null}\n                forceRender={true}\n                visible={this.props.visible}\n            >\n                <div style={{display:'flex',flexDirection:'row', justifyContent:'center',alignItems:'center'}}>\n                    <div style={{width:560,height:315}}>\n                        <video \n                            id=\"myVideo\"\n                            ref={node => this.video = node} \n                            className=\"video-js vjs-default-skin vjs-big-play-centered\"\n                            controls\n                            preload=\"auto\"\n                            playsInline\n                            style={{width:'100%',height:'100%'}}\n                        >\n                            <source src={this.props.src } type=\"application/x-mpegURL\"/>\n                        </video>\n                    </div>\n                </div>\n            </RLModal>\n        )\n    }\n}","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/VODManage/components/videoManage/CmpVideoUpload.js",["1673","1674","1675","1676","1677","1678","1679"],"import { createRef } from 'react';\nimport BaseCmp from '@components/BaseCmp.js';\nimport { RLInput, RLButton, RLSelect, RLTable, RLFilterTool, RLTooltip, RLDatePicker, RLModal, RLForm, RLFormItem, RLRadioGroup, RLTextarea } from '@components/index.js'\n\nimport eventBus from '@/libs/EventBus.js'\nimport { Upload } from 'antd';\nimport ImgCrop from '@/pages/common/ImgCropper.js';\n\nimport actionVideoManage from '../../../../store/actions/VODManage/actionVideoManage';\nimport { connect } from 'react-redux';\nclass VideoUpload extends BaseCmp {\n    constructor(props){\n        super(props);\n        this.state = {\n            uploadFile: null,\n            watermark: null,\n            watermarkUrl: ''\n        };\n        this.form = createRef();\n    }\n\n    componentDidMount() {\n\n    }\n    \n    upload = () => {\n        let isVideo = /\\.(mp4|avi|mkv|flv|rmvb|mov|wmv)$/.test(this.state.uploadFile.name);\n        if(this.state.watermark){\n            let formData = new FormData();\n            formData.append('img', this.state.watermark)\n            actionVideoManage.uploadWatermark(formData).then(res =>{\n        \n                eventBus.emit('upload-video', this.state.uploadFile, {\n                    type: 'video',\n                    dtype: isVideo ? 0: 1, \n                    dtranscode: true,\n                    dwatermark: this.state.watermark ? true : false\n                });\n                this.props.onCancel(); \n            }).catch(err =>{\n                eventBus.emit('upload-video', this.state.uploadFile, {\n                    type: 'video',\n                    dtype: isVideo ? 0: 1, \n                    dtranscode: true,\n                    dwatermark: this.state.watermark ? true : false\n                });\n                this.props.onCancel();\n                this.showToast({type:'error',content: '水印上传失败'});\n            })\n        }else{\n            eventBus.emit('upload-video', this.state.uploadFile, {\n                type: 'video',\n                dtype: isVideo ? 0: 1, \n                dtranscode: true,\n                dwatermark: this.state.watermark ? true : false\n            });\n            this.props.onCancel();\n        }\n    }\n    render(){\n        return (\n            <RLModal \n                title={this.props.title}\n                closable={true}\n                onCancel={this.props.onCancel}\n                footer={null}\n                visible={this.props.visible}>\n                <div className=\"videoinput\">\n                    <RLForm \n                        ref={this.form}\n                        labelCol={{ style: { width: 80, marginRight: 20, textAlign:'right' } }}\n                        labelAlign='left'\n                        validateTrigger='onBlur'\n                        onFinish={this.upload}\n                    >\n                        <RLFormItem label=\"视频/音频\" name=\"file\" colon={false}\n                            rules={[{\n                                required: true,\n                                message: '请选择上传视频'\n                            }]}>\n                            <div style={{display:'flex', flexDirection:'row'}}>\n                                <RLInput style={{width: 220}} value={this.state.uploadFile && this.state.uploadFile.name}/>\n                                <Upload \n                                    accept={this.props.accept}\n                                    multiple={false}\n                                    showUploadList={false}\n                                    beforeUpload={(file)=>{\n                                        this.setState({\n                                            uploadFile: file\n                                        })\n                                        this.form.current.setFieldsValue({'file':file})\n                                        return false;\n                                    }}>\n                                    <RLButton label=\"选择文件\" \n                                        type=\"primary\"\n                                        style={{marginLeft: 20}}/>\n                                </Upload>\n                            </div>\n                            <div>支持mp4、avi、mkv、mov、flv、rmvb、mp3、wav、wma、ape、flac、aac</div>\n                        </RLFormItem>\n                        <RLFormItem label=\"水印\" name=\"watermark\" colon={false}>\n                            <div style={{display:'flex', flexDirection:'row'}}>\n                                <ImgCrop \n                                    aspect = {15/7}\n                                    beforeCrop={()=>{\n                                        return true;\n                                    }}\n                                    resizeWidth={150}\n                                    resizeHeight={70}\n                                    >  \n                                    <Upload \n                                        accept=\"image/*\"\n                                        multiple={false}\n                                        showUploadList={false}\n                                        resizeWidth={150}\n                                        resizeHeight={70}\n                                        customRequest={( { file } )=>{\n                                            this.setState({\n                                                watermark: file,\n                                                watermarkUrl: window.URL.createObjectURL(file)\n                                            })\n                                            return false;\n                                        }}>\n                                            <img src={this.state.watermarkUrl || require('@/assets/images/default.png').default} style={{width: 150, height: 70, cursor:'pointer'}} alt=''/>\n                                    </Upload>\n                                </ImgCrop> \n                            </div>\n                            <div>只能上传jpg/png,大小不超过2M</div>\n                        </RLFormItem>\n                        <RLFormItem>\n                            <div style={{display:'flex',flexDirection:'row',justifyContent:'center',marginTop: 20}}>\n                                <RLButton label=\"取消\" \n                                    onClick={this.props.onCancel}\n                                    style={{marginRight: 40}}/>\n                                <RLButton label=\"开始上传\"\n                                    className=\"\"\n                                    type=\"primary\"\n                                    htmlType=\"submit\"\n                                />\n                            </div>\n                        </RLFormItem>\n                    </RLForm>\n                </div>\n            </RLModal>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props,\n        // userInfo: store.personalInfo.userInfo,   \n    }\n})(VideoUpload)","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/VODManage/components/VODManage/CmpAddVideo.js",["1680"],"import BaseCmp from '@components/BaseCmp.js'\nimport { RLFilterTool, LargeModal, RLButton, RLInput, RLSelect, RLTable } from '@components/index.js'\nimport { connect } from 'react-redux';\nimport actionVideoManage from '@actions/VODManage/actionVideoManage.js';\nimport { Select } from 'antd';\n\nconst { Option } = Select;\n\nclass CmpAddVideo extends BaseCmp {\n    constructor(props) {\n        super(props)\n        let select = [];\n        let selectList = [];\n       \n        this.state = {\n            listLoading: false,\n            group: [],\n            searchParam: {\n                keyword: 'id',\n                value: '',\n            },\n            videoListInfo: {  // 列表信息\n                pageNum: 1,  // 总叶数\n                count: 1,    // 总条数\n                list: [],    // 数据数组\n                page: 1,     // 当前第几页\n            },\n            allSelect: [...select],                                              //所有选择ID集合\n            allSelectList: [...selectList],                                           //所有选择列表集合\n        }\n        this.selectedRows = [];\n    }\n    componentDidMount() {\n        this.getVideoList()\n    }\n    getLeftItems = () => {\n        return [\n            <div className=\"newSelectArea\">\n                <RLSelect\n                    options={[{\n                        label: '视频ID',\n                        value: 'id'\n                    }, {\n                        label: '视频名称',\n                        value: 'title'\n                    }]}\n                    style={{ width: 120, marginLeft: 30, marginRight: 10 }}\n                    placeholder='请选择'\n                    value={this.state.searchParam.keyword}\n                    onChange={(e) => {\n                        this.setState({\n                            selectOption: e,\n                            searchParam: {\n                                ...this.state.searchParam,\n                                keyword: e\n                            }\n                        })\n                    }}\n                />\n                <RLInput\n                    placeholder='请输入内容'\n                    value={this.state.searchParam.value}\n                    onChange={(e) => {\n                        this.setState({\n                            searchParam: {\n                                ...this.state.searchParam,\n                                value: e.target.value\n                            }\n                        })\n                    }}\n                />\n            </div>\n        ]\n    }\n    getRightItems = () => {\n        return (\n            [\n                <RLButton\n                    label='搜索'\n                    type='primary'\n                    onClick={this.getAllUser}\n                    style={{ marginRight: 20 }}\n                />,\n                <RLButton\n                    label='重置'\n                    type='default'\n                    onClick={this.reset}\n                    style={{ marginRight: 20 }}\n                />\n            ]\n        )\n    }\n    reset = () => {\n        this.setState({\n            searchParam: {\n                ...this.state.searchParam,\n                keyword: 'id',\n                value: ''\n            }\n        })\n    }\n    getVideoList = ({ page } = { page: this.state.videoListInfo.page }) => {\n        this.setState({\n            listLoading: true\n        })\n        actionVideoManage.getVideoList({\n            keyword: this.state.searchParam.value,\n            page,\n            counts: 10,\n        }).then(res => {\n            if(!res) return;\n            this.setState({\n                videoListInfo: {\n                    list: res.data.movies,\n                    page,\n                    count: res.data.counts,\n                    pageNum: Math.ceil(res.data.counts / 10)\n                }\n            });\n        }).finally(() => {\n            this.setState({\n                listLoading: false,\n            })\n        })\n    }\n\n    getColumns = () => {\n        let columns = [{\n            title: '视频ID',\n            dataIndex: '_id',\n            key: '_id',\n            width: '20%',\n        }, {\n            title: '视频名称',\n            dataIndex: 'originalname',\n            key: 'originalname',\n            width: '30%',\n        }, {\n            title: '视频大小',\n            dataIndex: 'size',\n            key: 'size',\n            width: '20%',\n            render: (index, record)=>{\n                return <div>{this.parseSize(record.size)}</div>\n            }\n        }, {\n            title: '视频时长',\n            dataIndex: 'duration',\n            key: 'duration',\n            width: '30%',\n            render: (index, record)=>{\n                return <div>{this.parseDuration(record.duration)}</div>\n            }\n        }]\n        return columns\n    }\n    pageChange = (page) => {\n        this.getVideoList({ page })\n    }\n    addAction = () => {\n      \n        if(this.selectedRows.length === 0){\n            this.showToast({type:'error',content:'请选择音视频'});\n            return;\n        }\n        this.props.onAdd && this.props.onAdd(this.selectedRows);\n        this.props.onCancel();\n    }\n    parseSize(size){\n        let filesize = Number.parseFloat(size);\n        if( filesize.toString() === 'NaN'){\n            return '';\n        }\n        let unit;\n        let units = [ 'B', 'K', 'M', 'G', 'TB' ];\n        while ( (unit = units.shift()) && filesize > 1024 ) {\n            filesize = filesize / 1024;\n        }\n        return (unit === 'B' ? filesize : filesize.toFixed(2)) + unit;\n    }\n    parseDuration(duration){\n        let time = Number.parseInt(duration);\n        if(time.toString() === 'NaN'){\n            return '';\n        }\n        if(time > -1){\n            var hour = Math.floor(time/3600);\n            var min = Math.floor(time/60) % 60;\n            var sec = time % 60;\n            if(hour < 10) {\n                time = '0'+ hour + \":\";\n            } else {\n                time = hour + \":\";\n            }\n\n            if(min < 10){\n                time += \"0\";\n            }\n            time += min + \":\";\n\n            if(sec < 10){\n                time += \"0\";\n            }\n            time += sec;\n        }\n        return time;\n    }\n    render() {\n        return (\n            <LargeModal\n                visible={this.props.visible}\n                title='选择视频/音频'\n                width={1000}\n                style={{ height: 580 }}\n                wrapClassName='newAddUser'\n                onCancel={() => {\n                    this.props.onCancel()\n                }}\n            >\n                <div style={{height:450}}>\n                    <RLFilterTool leftItems={this.getLeftItems} rightItems={this.getRightItems} />\n                    <RLTable\n                        loading={this.state.listLoading}\n                        dataSource={this.state.videoListInfo.list}\n                        wrapClassName='newAddUser'\n                        rowKey='_id'\n                        columns={this.getColumns()}\n                        scroll={{ y: 265 }}\n                        paginationInfo={{\n                            total: this.state.videoListInfo.count,\n                            pageSize: 10,\n                            onChange: this.pageChange,\n                            current: this.state.videoListInfo.page\n                        }}\n                        rowSelection={{\n                            type: 'radio',\n                            slectedRowKeys: '_id',\n                            onChange: (selectedRowKeys, selectedRows)=>{\n                                this.selectedRows = selectedRows;\n                            },\n                            getCheckboxProps: (record) => ({\n                                disabled: record.status !== 'finished'\n                            })  \n                        }}\n                        rowClassName='rl-table-click-row'\n                    />\n                    <div className='btn-container' style={{\n                        display: 'flex',\n                        justifyContent: 'center',\n                        marginTop: 10\n                    }}>\n                        <RLButton label='取消' type='default' height={28}\n                            style={{ marginRight: 20 }}\n                            onClick={() => {\n                                this.props.onCancel()\n                            }}\n                        />\n                        <RLButton\n                            label='添加'\n                            type='primary'\n                            height={28}\n                            onClick={this.addAction}\n                        />\n                    </div>\n                </div>\n            </LargeModal>\n        )\n    }\n}\nexport default connect((store, props) => {\n    return {\n        ...props\n    }\n})(CmpAddVideo);","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/roomDevice/actionAdvertiseManage.js",["1681","1682"],"import { getData } from '@/libs/utils.js'\nimport store from '@/store/index.js'\nimport actionTypes from '@/store/actionTypes.js'\nimport interfaces from '@/api/interfaces'\nconst actionAdvertiseManage = {\n    // 获取广告列表\n    getAdvertiseList({ page = 1, pagesize, status = '' }) {\n        return getData({\n            method: 'get',\n            url: interfaces.ADVER_LIST,\n            data: { page, pagesize, status }\n        })\n    },\n    // 获取广告详情\n    getAdvertiseDetail(advert_id) {\n        return getData({\n            method: 'get',\n            url: interfaces.ADVER_DETAIL,\n            data: { advert_id }\n        })\n    },\n    // 添加广告\n    advertiseAdd({ title, status, image, interval }) {\n        return getData({\n            method: 'post',\n            url: interfaces.ADVER_ADD,\n            data: { title, status, image, interval }\n        })\n    },\n    // 编辑广告\n    advertiseEdit({ advert_id, title, status, image, interval }) {\n        return getData({\n            method: 'post',\n            url: interfaces.ADVER_EDIT,\n            data: { advert_id, title, status, image, interval }\n        })\n    },\n    // 广告上下线\n    advertiseStatus({ advert_id, status }) {\n        return getData({\n            method: 'post',\n            url: interfaces.ADVER_STATUS,\n            data: { advert_id, status }\n        })\n    },\n    // 删除广告\n    advertiseDelete(advert_id) {\n        return getData({\n            method: 'post',\n            url: interfaces.ADVER_DELETE,\n            data: { advert_id }\n        })\n    },\n    // 广告图片上传\n    advertiseImgUpload(file) {\n        return getData({\n            method: 'post',\n            url: interfaces.ADVER_IMG_UPLOAD,\n            data: file\n        })\n    },\n}\nexport default actionAdvertiseManage","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/roomDevice/actionDeviceManage.js",["1683","1684"],"import { getData } from '@/libs/utils.js'\nimport store from '@/store/index.js'\nimport actionTypes from '@/store/actionTypes.js'\nimport interfaces from '@/api/interfaces'\nconst deviceManage = {\n    // 获取设备列表\n    getDeviceList(data) {\n        console.log('getDeviceList:')\n        return getData({\n            method: 'get',\n            url: interfaces.DEVICE_LIST,\n            data\n        })\n    },\n    // 获取设备信息\n    getDeviceDetail(device_id) {\n        return getData({\n            method: 'get',\n            url: interfaces.DEVICE_DETAIL,\n            data: { device_id }\n        })\n    },\n    // 添加设备\n    deviceAdd(params) {\n        return getData({\n            method: 'post',\n            url: interfaces.DEVICE_ADD,\n            data: params\n        })\n    },\n    // 删除设备\n    deviceDelete(params) {\n        return getData({\n            method: 'get',\n            url: interfaces.DEVICE_DELETE,\n            data: params\n        })\n    },\n    // 重启设备\n    deviceRestart(params) {\n        return getData({\n            method: 'get',\n            url: interfaces.DEVICE_RESTART,\n            data: params\n        })\n    },\n    // 添加设备\n    deviceEdit(params) {\n        return getData({\n            method: 'post',\n            url: interfaces.DEVICE_EDIT,\n            data: params\n        })\n    },\n    // 获取设备下会议列表\n    deviceMeetingList({ type = 1, room = '', page = 1, pagesize = 20 }) {\n        return getData({\n            method: 'get',\n            url: interfaces.DEVICE_MEETING_LIST,\n            data: { type, room, page, pagesize }\n        })\n    },\n    // 网络诊断\n    deviceNetCheck({ sn, url }) {\n        return getData({\n            method: 'get',\n            url: interfaces.DEVICE_NET_CHECK,\n            data: { sn, url }\n        })\n    },\n    // 获取设备日志列表\n    getDeviceLog({ sn, page, pagesize }) {\n        return getData({\n            method: 'get',\n            url: interfaces.DEVICE_LOG_LIST,\n            data: { sn, page, pagesize }\n        })\n    },\n    // 提交日志\n    logSubmit(sn) {\n        return getData({\n            method: 'get',\n            url: interfaces.DEVICE_LOG_SUBMIT,\n            data: { sn }\n        })\n    },\n    // 设备绑定广告\n    bindAdvertise({ advert_id, dstr }) {\n        return getData({\n            method: 'get',\n            url: interfaces.DEVICE_BIND_ADVER,\n            data: { advert_id, dstr }\n        })\n    },\n    // 设备解除绑定广告\n    unbindAdvertise(sn) {\n        return getData({\n            method: 'get',\n            url: interfaces.DEVICE_UNBIND_ADVER,\n            data: { sn }\n        })\n    }\n}\nexport default deviceManage","/Users/fengjiqiang/practice/react-queationnaire-demo/src/store/actions/userManage/actionUserFieldsSetting.js",["1685"],"import { getData } from '@/libs/utils.js'\nimport store from '@/store/index.js'\nimport interfaces from '@/api/interfaces'\n\nconst actionUserFieldsSetting = {\n    // 字段设置-获取\n    // type register 注册字段 certification 认证字段\n    getUserFieldsSetting({ type, page, pagesize }) {\n        return getData({\n            method: 'POST',\n            url: interfaces.FIELD_SETTING_LIST,\n            data: {\n                type,\n                page,\n                pagesize\n            }\n        })\n    },\n    // 字段设置- 更新\n    // type register 注册字段 certification 认证字段\n    updateUserFieldsSetting({ uuid, value, type }) {\n        return getData({\n            method: 'POST',\n            url: interfaces.FIELD_SET,\n            data: {\n                uuid,\n                value,\n                type\n            }\n        })\n    }\n}\nexport default actionUserFieldsSetting\n","/Users/fengjiqiang/practice/react-queationnaire-demo/src/pages/marketingTool/components/Questionnaire/components/QuestionnaireEditor.js",["1686","1687"],"import React from 'react';\nimport BaseCmp from '@components/BaseCmp.js'\nimport { connect } from 'react-redux'\nimport {\n  RLInput, RLSwitch, RLSelect\n} from '@components/index.js'\nimport { uuid } from '@/libs/utils.js'\n\nimport './QuestionnaireEditor.less'\n\n\nclass QuestionnaireEditor extends BaseCmp {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editor: {\n        ...this.props.editor\n      },\n      hover: false,\n    }\n\n    this.options = [\n      { value: 'radio', label: '单选' },\n      { value: 'checkbox', label: '多选' },\n      { value: 'rate', label: '评分' },\n      { value: 'textarea', label: '问答' },\n      { value: 'matrixrate', label: '矩阵评分' },\n      { value: 'dropdown', label: '下拉选择框' },\n      { value: 'input', label: '填空' },\n      { value: 'datepicker', label: '日期' }\n    ]\n  }\n\n  // componentWillReceiveProps(nextProps) {\n  //   if (nextProps.editor.editorShake !== this.props.editor.editorShake) {\n  //     this.setState({\n  //       editor: {\n  //         ...this.state.editor,\n  //         editorShake: nextProps.editor.editorShake,\n  //       },\n  //     });\n  //   } else {\n  //     this.setState({\n  //       editor: {\n  //         ...this.state.editor,\n  //         ...nextProps.editor,\n  //       },\n  //     });\n  //   };\n  // }\n\n  // 新增选项\n  createOption = () => {\n    if (this.props.editor.options.length > 4) {\n      this.showToast('最多设置5个选项')\n      return\n    }\n    this.props.handleEdit({\n      ...this.props.editor,\n      options: [...this.props.editor.options,'']\n    },this.props.index)\n  }\n  // 删除选项\n  deleteOption = (index) => {\n    let options = [...this.props.editor.options]\n    // let options = [...this.state.editor.options]\n    options.splice(index, 1)\n    this.props.handleEdit({\n      ...this.props.editor,\n      options\n    },this.props.index)\n  }\n  //删除\n  cancel = () => {\n    const { index, handleCancel } = this.props;\n    if (handleCancel) {\n      handleCancel(index);\n    }\n  }\n\n  // generateData(){\n  //   switch(this.state.editor.type){\n  //     case 'input':\n  //     case 'datepicker':\n  //     case 'textarea':\n  //       if(!this.state.editor.title.trim()){\n  //         message.info(`请将问题${this.props.index + 1}标题填写完整`);\n  //         return false;\n  //       }\n  //       break;\n  //     case 'radio':\n  //     case 'dropdown':\n  //     case 'checkbox':\n  //       if(!this.state.editor.title.trim()){\n  //         message.info(`请将问题${this.props.index + 1}标题填写完整`);\n  //         return false;\n  //       }\n  //       for(let option of this.state.editor.options){\n  //         if(!option.trim()){\n  //           message.info(`请将问题${this.props.index + 1}标题填写完整`);\n  //           return false;\n  //         }\n  //       }\n  //       break;\n  //     case 'rate':\n  //       if(!this.state.editor.title.trim()){\n  //         message.info(`请将问题${this.props.index + 1}标题填写完整`);\n  //         return false;\n  //       }\n  //       for(let option of this.state.editor.options){\n  //         if(!option.title.trim() || !option.score.trim()){\n  //           message.info(`请将问题${this.props.index + 1}选项及对应分数填写完整`);\n  //           return false;\n  //         }\n  //       }\n  //       break;\n  //     case 'matrixrate':\n  //       if(!this.state.editor.title.trim()){\n  //         this.setState({\n  //           errorMsg: '请填写标题'\n  //         })\n  //         return false;\n  //       }\n  //       if(!this.state.editor.title.trim()){\n  //         message.info(`请将问题${this.props.index + 1}行标题填写完整`);\n  //         return false;\n  //       }\n  //       for(let option of this.state.editor.options){\n  //         if(!option.title.trim() || !option.score.trim()){\n  //           message.info(`请将问题${this.props.index + 1}选项及对应分数填写完整`);\n  //           return false;\n  //         }\n  //       }\n  //       break;\n  //     default:\n  //       break;\n  //   }\n\n  //   return {\n  //     type: this.state.editor.type,\n  //     title: this.state.editor.title,\n  //     required: this.state.editor.required,\n  //     options: this.state.editor.options\n  //   }\n  // }\n\n  switchType = (type) => {\n    const { handleEdit } = this.props;\n    if(type === this.props.editor.type){\n      return;\n    }\n    switch (type){\n      case 'radio':\n      case 'checkbox':\n      case 'dropdown':\n      handleEdit({\n          ...this.props.editor,\n          type: type,\n          title: '',\n          options: ['','']\n      }, this.props.index);\n        break;\n      case 'input':\n      case 'datepicker':\n      case 'textarea':\n       handleEdit({\n          ...this.props.editor,\n          type: type,\n          title: '',\n        }, this.props.index);\n        break;\n      case 'rate':\n       handleEdit({\n          ...this.props.editor,\n          type: type,\n          title: '',\n          options: [{title:'',score:''},{title:'',score:''}]\n        }, this.props.index);\n        break;\n      case 'matrixrate':\n        handleEdit({\n            ...this.props.editor,\n            type: type,\n            title: '',\n            rows: ['', ''],\n            options: [{title:'',score:''},{title:'',score:''}]\n        }, this.props.index);\n        break;\n      default:\n        break; \n    }\n  }\n\n  render() {\n    // const { editor, hover } = this.state;\n\n    // const { title, required, options, rowTitle } = this.props.editor;\n    let {\n      type,\n      title,\n      required,\n      options,\n      rowTitle,\n      rows\n    } = this.props.editor;\n\n    /*\n     *\n     * 以下元素为编辑状态下的元素\n     *\n     */\n    //编辑状态下的题目\n    const ediTitleEl = (\n      <div className=\"editor-row-title\">\n        <span style={{ fontSize: 14, fontWeight: 400, color: '#333333', width: 60, textAlign: 'right' }}>标题</span>\n        <RLInput\n          placeholder='请输入标题（50个字以内）'\n          value={title}\n          id={'title'}\n          maxLength={50}\n          style={{ width: 520, marginLeft: 20 }}\n          onChange={(e) => {\n            this.props.handleEdit({\n              ...this.props.editor,\n              title: e.target.value\n            }, this.props.index)\n          }}\n        />\n      </div>\n    );\n    //编辑状态下的选项框(radio,checkbox,dropdown)\n    const optionsArr = options.map((option, index) => {\n      return (\n        <div className=\"editor-row-option\" key={index}>\n          <span style={{ width: 60, textAlign: 'right' }}>选项{index+1}</span>\n          <RLInput\n            placeholder='请输入选项（30个字以内）'\n            value={option}\n            id={'options'}\n            maxLength={30}\n            style={{ width: 520, marginLeft: 20 }}\n            onChange={(e) => {\n              this.props.editor.options[index] = e.target.value;\n              this.props.handleEdit({\n                ...this.props.editor\n              }, this.props.index)\n            }}\n          />\n          {\n            index === options.length - 1 && <img\n              alt=''\n              src={require('../../../../../assets/images/questionnaire/increase.png').default}\n              className=\"question-increase\"\n              onClick={() => {\n                this.createOption()\n              }}\n            />\n          }\n          {\n            options.length > 2 && <img\n              alt=''\n              src={require('../../../../../assets/images/questionnaire/decrease.png').default}\n              className=\"question-decrease\"\n              onClick={() => {\n                this.deleteOption(index)\n              }}\n            />\n          }\n        </div>\n      )\n    })\n\n    // 矩阵评分matrixrate 行标题\n    const rowsTitle = rows.map((row, index) => {\n      return (\n        <div className=\"editor-row-option\" key={index}>\n          <span style={{ fontSize: 14, fontWeight: 400, color: '#333333', width: 60, textAlign: 'right' }}>行标题{index+1}</span>\n          <RLInput\n            placeholder='请输入行标题（30个字以内）'\n            value={row}\n            id={'options'}\n            maxLength={30}\n            style={{ width: 520, marginLeft: 20 }}\n            onChange={(e) => {\n              this.props.editor.rows[index] = e.target.value;\n              this.props.handleEdit({\n                ...this.props.editor\n              }, this.props.index)\n            }}\n          />\n          {\n            index === rows.length - 1 && <img\n              alt=''\n              src={require('../../../../../assets/images/questionnaire/increase.png').default}\n              className=\"question-increase\"\n              onClick={() => {\n                if (this.props.editor.rows.length > 4) {\n                  this.showToast('最多设置5个行标题')\n                  return\n                }\n                this.props.handleEdit({\n                  ...this.props.editor,\n                  rows: [...this.props.editor.rows,'']\n                },this.props.index)\n              }}\n            />\n          }\n          {\n            rows.length > 2 && <img\n              alt=''\n              src={require('../../../../../assets/images/questionnaire/decrease.png').default}\n              className=\"question-decrease\"\n              onClick={() => {\n                let rows = [...this.props.editor.rows]\n                rows.splice(index, 1)\n                this.props.handleEdit({\n                  ...this.props.editor,\n                  rows\n                },this.props.index)\n              }}\n            />\n          }\n        </div>\n      )\n    })\n\n    // 编辑状态下的选项框(rate)\n    const optionsRate = options.map((option, index) => {\n      return (\n        <div className=\"editor-row-option\" key={index}>\n          <span style={{ width: 60, textAlign: 'right' }}>选项{index+1}</span>\n          <RLInput\n            placeholder='请输入选项（30个字以内）'\n            value={option.title}\n            id={'options'}\n            maxLength={30}\n            style={{ width: 300, marginLeft: 20, marginRight: 50 }}\n            onChange={(e) => {\n              this.props.editor.options[index].title = e.target.value;\n              this.props.handleEdit({\n                ...this.props.editor\n              }, this.props.index)\n            }}\n          />\n          <span>分数</span>\n          <RLInput\n            placeholder='请设置分数'\n            id={'value'}\n            value={option.score}\n            style={{ width: 120, marginLeft: 20 }}\n            type='number'\n            onChange={(e) => {\n              this.props.editor.options[index].score = e.target.value;\n              this.props.handleEdit({\n                ...this.props.editor\n              }, this.props.index)\n            }}\n          />\n          {\n            index === options.length - 1 && <img\n              alt=''\n              src={require('../../../../../assets/images/questionnaire/increase.png').default}\n              className=\"question-increase\"\n              onClick={() => {\n                if (this.props.editor.options.length > 4) {\n                  this.showToast('最多设置5个选项')\n                  return\n                }\n                this.props.handleEdit({\n                  ...this.props.editor,\n                  options: [...this.props.editor.options,{title:'',score:''}]\n                },this.props.index)\n              }}\n            />\n          }\n          {\n            options.length > 2 && <img\n              alt=''\n              src={require('../../../../../assets/images/questionnaire/decrease.png').default}\n              className=\"question-decrease\"\n              onClick={() => {\n                let options = [...this.props.editor.options]\n                // let options = [...this.state.editor.options]\n                options.splice(index, 1)\n                this.props.handleEdit({\n                  ...this.props.editor,\n                  options\n                },this.props.index)\n              }}\n            />\n          }\n        </div>\n      )\n    })\n\n    return (\n      <div className=\"questionnair-item\">\n          <div className=\"questionnair-editor\">\n            <div className=\"questionnair-editor-inner\">\n              {/* 问题类型选择 是否必填 删除按钮 */}\n              <div className=\"editor-type\">\n                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                <span style={{ width: 60, fontSize: 14, fontWeight: 400, color: '#333333', textAlign: 'right' }}>问题{this.props.index + 1}</span>\n                  <RLSelect\n                    options={this.options}\n                    style={{ width: 200, marginLeft: 20, marginRight: 12 }}\n                    value={type}\n                    onChange={this.switchType}\n                  />\n                  <span style={{ marginRight: 5 }}>设为必填</span>\n                  <RLSwitch\n                    defaultChecked={required}\n                    onChange={value => {\n                      this.props.handleEdit({\n                        ...this.props.editor,\n                        required: value\n                      },this.props.index)\n                    }}\n                  />\n                </div>\n                <div\n                  className=\"question-remove\"\n                  onClick={() => {\n                    if (this.props.isStatusEdit) {\n                      this.showModal({\n                        content: '确认删除后，若有已收集的数据也将被删除，是否确认删除？',\n                        title: '是否删除该问题？',\n                        okText: '确定',\n                        cancelText: '取消',\n                        onOk: () => {\n                          this.cancel()\n                        },\n                        onCancel: () => { },\n                        size: 'big'\n                      })\n                    } else {\n                      this.cancel()\n                    }\n                  }}\n                >\n                  <img\n                    alt=''\n                    src={require('../../../../../assets/images/questionnaire/delete.png').default}\n                    style={{ width: 16, height: 16, marginRight: 4 }}\n                  />\n                  <span style={{ fontSize: 14 }}>删除</span>\n                </div>\n              </div>\n\n              {ediTitleEl}\n              {['radio', 'dropdown', 'checkbox'].includes(type) && <div>\n                {optionsArr}\n              </div>}\n              {['rate'].includes(type) && <div>\n                {optionsRate}\n              </div>}\n              {\n                type === 'matrixrate' && <div>\n                  {rowsTitle}\n                  {optionsRate}\n                </div>\n              }\n            </div>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default connect((store, props) => {\n  return {\n    ...props\n  }\n})(QuestionnaireEditor)\n",{"ruleId":"1688","severity":1,"message":"1689","line":10,"column":22,"nodeType":"1690","messageId":"1691","endLine":10,"endColumn":35},{"ruleId":"1688","severity":1,"message":"1692","line":49,"column":10,"nodeType":"1690","messageId":"1691","endLine":49,"endColumn":17},{"ruleId":"1693","replacedBy":"1694"},{"ruleId":"1695","replacedBy":"1696"},{"ruleId":"1697","severity":1,"message":"1698","line":9,"column":1,"nodeType":"1699","messageId":"1700","endLine":43,"endColumn":2},{"ruleId":"1701","severity":1,"message":"1702","line":13,"column":36,"nodeType":"1703","messageId":"1700","endLine":13,"endColumn":38},{"ruleId":"1701","severity":1,"message":"1702","line":39,"column":60,"nodeType":"1703","messageId":"1700","endLine":39,"endColumn":62},{"ruleId":"1688","severity":1,"message":"1704","line":13,"column":7,"nodeType":"1690","messageId":"1691","endLine":13,"endColumn":16},{"ruleId":"1688","severity":1,"message":"1705","line":10,"column":8,"nodeType":"1690","messageId":"1691","endLine":10,"endColumn":23},{"ruleId":"1688","severity":1,"message":"1706","line":25,"column":9,"nodeType":"1690","messageId":"1691","endLine":25,"endColumn":23},{"ruleId":"1688","severity":1,"message":"1707","line":6,"column":8,"nodeType":"1690","messageId":"1691","endLine":6,"endColumn":21},{"ruleId":"1688","severity":1,"message":"1708","line":9,"column":8,"nodeType":"1690","messageId":"1691","endLine":9,"endColumn":18},{"ruleId":"1688","severity":1,"message":"1709","line":9,"column":22,"nodeType":"1690","messageId":"1691","endLine":9,"endColumn":36},{"ruleId":"1688","severity":1,"message":"1710","line":9,"column":38,"nodeType":"1690","messageId":"1691","endLine":9,"endColumn":52},{"ruleId":"1688","severity":1,"message":"1711","line":2,"column":8,"nodeType":"1690","messageId":"1691","endLine":2,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1712","line":11,"column":10,"nodeType":"1690","messageId":"1691","endLine":11,"endColumn":24},{"ruleId":"1688","severity":1,"message":"1713","line":27,"column":9,"nodeType":"1690","messageId":"1691","endLine":27,"endColumn":14},{"ruleId":"1714","severity":1,"message":"1715","line":3,"column":38,"nodeType":"1716","messageId":"1717","endLine":3,"endColumn":50},{"ruleId":"1688","severity":1,"message":"1718","line":3,"column":8,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1719","line":5,"column":8,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":15},{"ruleId":"1688","severity":1,"message":"1720","line":6,"column":8,"nodeType":"1690","messageId":"1691","endLine":6,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1721","line":9,"column":8,"nodeType":"1690","messageId":"1691","endLine":9,"endColumn":18},{"ruleId":"1688","severity":1,"message":"1707","line":11,"column":8,"nodeType":"1690","messageId":"1691","endLine":11,"endColumn":21},{"ruleId":"1688","severity":1,"message":"1722","line":13,"column":10,"nodeType":"1690","messageId":"1691","endLine":13,"endColumn":26},{"ruleId":"1688","severity":1,"message":"1723","line":1,"column":8,"nodeType":"1690","messageId":"1691","endLine":1,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1711","line":2,"column":8,"nodeType":"1690","messageId":"1691","endLine":2,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1718","line":3,"column":8,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1724","line":5,"column":8,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":14},{"ruleId":"1688","severity":1,"message":"1724","line":8,"column":8,"nodeType":"1690","messageId":"1691","endLine":8,"endColumn":14},{"ruleId":"1725","severity":1,"message":"1726","line":27,"column":13,"nodeType":"1727","messageId":"1728","endLine":27,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1729","line":4,"column":26,"nodeType":"1690","messageId":"1691","endLine":4,"endColumn":32},{"ruleId":"1688","severity":1,"message":"1711","line":2,"column":8,"nodeType":"1690","messageId":"1691","endLine":2,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1718","line":3,"column":8,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1724","line":5,"column":8,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":14},{"ruleId":"1688","severity":1,"message":"1711","line":2,"column":8,"nodeType":"1690","messageId":"1691","endLine":2,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1718","line":3,"column":8,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1724","line":5,"column":8,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":14},{"ruleId":"1688","severity":1,"message":"1730","line":12,"column":25,"nodeType":"1690","messageId":"1691","endLine":12,"endColumn":37},{"ruleId":"1688","severity":1,"message":"1731","line":12,"column":39,"nodeType":"1690","messageId":"1691","endLine":12,"endColumn":54},{"ruleId":"1688","severity":1,"message":"1732","line":7,"column":8,"nodeType":"1690","messageId":"1691","endLine":7,"endColumn":15},{"ruleId":"1688","severity":1,"message":"1733","line":2,"column":10,"nodeType":"1690","messageId":"1691","endLine":2,"endColumn":21},{"ruleId":"1688","severity":1,"message":"1734","line":3,"column":10,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":17},{"ruleId":"1688","severity":1,"message":"1735","line":3,"column":19,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":31},{"ruleId":"1688","severity":1,"message":"1736","line":3,"column":33,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":41},{"ruleId":"1688","severity":1,"message":"1737","line":3,"column":43,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":50},{"ruleId":"1688","severity":1,"message":"1708","line":5,"column":8,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":18},{"ruleId":"1688","severity":1,"message":"1710","line":5,"column":38,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":52},{"ruleId":"1688","severity":1,"message":"1738","line":37,"column":8,"nodeType":"1690","messageId":"1691","endLine":37,"endColumn":23},{"ruleId":"1688","severity":1,"message":"1739","line":38,"column":8,"nodeType":"1690","messageId":"1691","endLine":38,"endColumn":19},{"ruleId":"1740","severity":1,"message":"1741","line":1,"column":1,"nodeType":"1742","endLine":26,"endColumn":2},{"ruleId":"1688","severity":1,"message":"1711","line":2,"column":8,"nodeType":"1690","messageId":"1691","endLine":2,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1719","line":3,"column":8,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":15},{"ruleId":"1688","severity":1,"message":"1718","line":4,"column":8,"nodeType":"1690","messageId":"1691","endLine":4,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1743","line":16,"column":35,"nodeType":"1690","messageId":"1691","endLine":16,"endColumn":48},{"ruleId":"1701","severity":1,"message":"1744","line":305,"column":26,"nodeType":"1703","messageId":"1700","endLine":305,"endColumn":28},{"ruleId":"1688","severity":1,"message":"1745","line":5,"column":5,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":10},{"ruleId":"1688","severity":1,"message":"1746","line":75,"column":22,"nodeType":"1690","messageId":"1691","endLine":75,"endColumn":33},{"ruleId":"1688","severity":1,"message":"1747","line":77,"column":13,"nodeType":"1690","messageId":"1691","endLine":77,"endColumn":26},{"ruleId":"1688","severity":1,"message":"1748","line":93,"column":13,"nodeType":"1690","messageId":"1691","endLine":93,"endColumn":26},{"ruleId":"1701","severity":1,"message":"1702","line":115,"column":38,"nodeType":"1703","messageId":"1700","endLine":115,"endColumn":40},{"ruleId":"1701","severity":1,"message":"1702","line":161,"column":44,"nodeType":"1703","messageId":"1700","endLine":161,"endColumn":46},{"ruleId":"1701","severity":1,"message":"1702","line":163,"column":51,"nodeType":"1703","messageId":"1700","endLine":163,"endColumn":53},{"ruleId":"1701","severity":1,"message":"1702","line":165,"column":51,"nodeType":"1703","messageId":"1700","endLine":165,"endColumn":53},{"ruleId":"1701","severity":1,"message":"1702","line":167,"column":51,"nodeType":"1703","messageId":"1700","endLine":167,"endColumn":53},{"ruleId":"1701","severity":1,"message":"1702","line":177,"column":44,"nodeType":"1703","messageId":"1700","endLine":177,"endColumn":46},{"ruleId":"1701","severity":1,"message":"1702","line":179,"column":51,"nodeType":"1703","messageId":"1700","endLine":179,"endColumn":53},{"ruleId":"1701","severity":1,"message":"1702","line":181,"column":51,"nodeType":"1703","messageId":"1700","endLine":181,"endColumn":53},{"ruleId":"1701","severity":1,"message":"1702","line":183,"column":51,"nodeType":"1703","messageId":"1700","endLine":183,"endColumn":53},{"ruleId":"1688","severity":1,"message":"1743","line":5,"column":10,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":23},{"ruleId":"1701","severity":1,"message":"1702","line":85,"column":43,"nodeType":"1703","messageId":"1700","endLine":85,"endColumn":45},{"ruleId":"1701","severity":1,"message":"1702","line":87,"column":50,"nodeType":"1703","messageId":"1700","endLine":87,"endColumn":52},{"ruleId":"1701","severity":1,"message":"1702","line":89,"column":50,"nodeType":"1703","messageId":"1700","endLine":89,"endColumn":52},{"ruleId":"1701","severity":1,"message":"1702","line":91,"column":50,"nodeType":"1703","messageId":"1700","endLine":91,"endColumn":52},{"ruleId":"1701","severity":1,"message":"1702","line":189,"column":26,"nodeType":"1703","messageId":"1700","endLine":189,"endColumn":28},{"ruleId":"1688","severity":1,"message":"1743","line":5,"column":26,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":39},{"ruleId":"1701","severity":1,"message":"1702","line":84,"column":43,"nodeType":"1703","messageId":"1700","endLine":84,"endColumn":45},{"ruleId":"1701","severity":1,"message":"1702","line":86,"column":50,"nodeType":"1703","messageId":"1700","endLine":86,"endColumn":52},{"ruleId":"1701","severity":1,"message":"1702","line":88,"column":50,"nodeType":"1703","messageId":"1700","endLine":88,"endColumn":52},{"ruleId":"1701","severity":1,"message":"1702","line":90,"column":50,"nodeType":"1703","messageId":"1700","endLine":90,"endColumn":52},{"ruleId":"1688","severity":1,"message":"1749","line":19,"column":10,"nodeType":"1690","messageId":"1691","endLine":19,"endColumn":24},{"ruleId":"1701","severity":1,"message":"1702","line":316,"column":48,"nodeType":"1703","messageId":"1700","endLine":316,"endColumn":50},{"ruleId":"1701","severity":1,"message":"1702","line":318,"column":55,"nodeType":"1703","messageId":"1700","endLine":318,"endColumn":57},{"ruleId":"1701","severity":1,"message":"1702","line":320,"column":55,"nodeType":"1703","messageId":"1700","endLine":320,"endColumn":57},{"ruleId":"1701","severity":1,"message":"1702","line":322,"column":55,"nodeType":"1703","messageId":"1700","endLine":322,"endColumn":57},{"ruleId":"1701","severity":1,"message":"1702","line":9,"column":41,"nodeType":"1703","messageId":"1700","endLine":9,"endColumn":43},{"ruleId":"1701","severity":1,"message":"1702","line":36,"column":26,"nodeType":"1703","messageId":"1700","endLine":36,"endColumn":28},{"ruleId":"1688","severity":1,"message":"1750","line":3,"column":8,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":15},{"ruleId":"1688","severity":1,"message":"1751","line":1,"column":17,"nodeType":"1690","messageId":"1691","endLine":1,"endColumn":25},{"ruleId":"1688","severity":1,"message":"1752","line":1,"column":27,"nodeType":"1690","messageId":"1691","endLine":1,"endColumn":38},{"ruleId":"1688","severity":1,"message":"1753","line":1,"column":40,"nodeType":"1690","messageId":"1691","endLine":1,"endColumn":47},{"ruleId":"1688","severity":1,"message":"1754","line":1,"column":49,"nodeType":"1690","messageId":"1691","endLine":1,"endColumn":55},{"ruleId":"1688","severity":1,"message":"1755","line":1,"column":57,"nodeType":"1690","messageId":"1691","endLine":1,"endColumn":67},{"ruleId":"1688","severity":1,"message":"1756","line":3,"column":8,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":22},{"ruleId":"1688","severity":1,"message":"1757","line":10,"column":7,"nodeType":"1690","messageId":"1691","endLine":10,"endColumn":18},{"ruleId":"1701","severity":1,"message":"1702","line":122,"column":30,"nodeType":"1703","messageId":"1700","endLine":122,"endColumn":32},{"ruleId":"1701","severity":1,"message":"1702","line":137,"column":30,"nodeType":"1703","messageId":"1700","endLine":137,"endColumn":32},{"ruleId":"1701","severity":1,"message":"1702","line":141,"column":30,"nodeType":"1703","messageId":"1700","endLine":141,"endColumn":32},{"ruleId":"1701","severity":1,"message":"1702","line":125,"column":30,"nodeType":"1703","messageId":"1700","endLine":125,"endColumn":32},{"ruleId":"1701","severity":1,"message":"1702","line":140,"column":30,"nodeType":"1703","messageId":"1700","endLine":140,"endColumn":32},{"ruleId":"1701","severity":1,"message":"1702","line":208,"column":75,"nodeType":"1703","messageId":"1700","endLine":208,"endColumn":77},{"ruleId":"1688","severity":1,"message":"1758","line":3,"column":10,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":15},{"ruleId":"1688","severity":1,"message":"1759","line":2,"column":55,"nodeType":"1690","messageId":"1691","endLine":2,"endColumn":63},{"ruleId":"1688","severity":1,"message":"1760","line":4,"column":8,"nodeType":"1690","messageId":"1691","endLine":4,"endColumn":21},{"ruleId":"1688","severity":1,"message":"1761","line":9,"column":9,"nodeType":"1690","messageId":"1691","endLine":9,"endColumn":15},{"ruleId":"1701","severity":1,"message":"1702","line":346,"column":42,"nodeType":"1703","messageId":"1700","endLine":346,"endColumn":44},{"ruleId":"1701","severity":1,"message":"1744","line":350,"column":30,"nodeType":"1703","messageId":"1700","endLine":350,"endColumn":32},{"ruleId":"1688","severity":1,"message":"1724","line":4,"column":8,"nodeType":"1690","messageId":"1691","endLine":4,"endColumn":14},{"ruleId":"1701","severity":1,"message":"1702","line":171,"column":26,"nodeType":"1703","messageId":"1700","endLine":171,"endColumn":28},{"ruleId":"1762","severity":1,"message":"1763","line":277,"column":80,"nodeType":"1764","messageId":"1765","endLine":277,"endColumn":122},{"ruleId":"1701","severity":1,"message":"1702","line":277,"column":100,"nodeType":"1703","messageId":"1700","endLine":277,"endColumn":102},{"ruleId":"1762","severity":1,"message":"1763","line":278,"column":74,"nodeType":"1764","messageId":"1765","endLine":278,"endColumn":116},{"ruleId":"1701","severity":1,"message":"1702","line":278,"column":94,"nodeType":"1703","messageId":"1700","endLine":278,"endColumn":96},{"ruleId":"1762","severity":1,"message":"1763","line":279,"column":76,"nodeType":"1764","messageId":"1765","endLine":279,"endColumn":121},{"ruleId":"1701","severity":1,"message":"1702","line":279,"column":99,"nodeType":"1703","messageId":"1700","endLine":279,"endColumn":101},{"ruleId":"1701","severity":1,"message":"1702","line":280,"column":52,"nodeType":"1703","messageId":"1700","endLine":280,"endColumn":54},{"ruleId":"1701","severity":1,"message":"1702","line":285,"column":80,"nodeType":"1703","messageId":"1700","endLine":285,"endColumn":82},{"ruleId":"1701","severity":1,"message":"1702","line":287,"column":93,"nodeType":"1703","messageId":"1700","endLine":287,"endColumn":95},{"ruleId":"1701","severity":1,"message":"1702","line":312,"column":56,"nodeType":"1703","messageId":"1700","endLine":312,"endColumn":58},{"ruleId":"1701","severity":1,"message":"1702","line":312,"column":87,"nodeType":"1703","messageId":"1700","endLine":312,"endColumn":89},{"ruleId":"1688","severity":1,"message":"1711","line":2,"column":8,"nodeType":"1690","messageId":"1691","endLine":2,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1724","line":4,"column":8,"nodeType":"1690","messageId":"1691","endLine":4,"endColumn":14},{"ruleId":"1688","severity":1,"message":"1759","line":14,"column":55,"nodeType":"1690","messageId":"1691","endLine":14,"endColumn":63},{"ruleId":"1688","severity":1,"message":"1761","line":20,"column":9,"nodeType":"1690","messageId":"1691","endLine":20,"endColumn":15},{"ruleId":"1762","severity":1,"message":"1763","line":206,"column":80,"nodeType":"1764","messageId":"1765","endLine":206,"endColumn":122},{"ruleId":"1701","severity":1,"message":"1702","line":206,"column":100,"nodeType":"1703","messageId":"1700","endLine":206,"endColumn":102},{"ruleId":"1762","severity":1,"message":"1763","line":207,"column":74,"nodeType":"1764","messageId":"1765","endLine":207,"endColumn":116},{"ruleId":"1701","severity":1,"message":"1702","line":207,"column":94,"nodeType":"1703","messageId":"1700","endLine":207,"endColumn":96},{"ruleId":"1762","severity":1,"message":"1763","line":208,"column":76,"nodeType":"1764","messageId":"1765","endLine":208,"endColumn":121},{"ruleId":"1701","severity":1,"message":"1702","line":208,"column":99,"nodeType":"1703","messageId":"1700","endLine":208,"endColumn":101},{"ruleId":"1701","severity":1,"message":"1702","line":209,"column":52,"nodeType":"1703","messageId":"1700","endLine":209,"endColumn":54},{"ruleId":"1701","severity":1,"message":"1702","line":214,"column":80,"nodeType":"1703","messageId":"1700","endLine":214,"endColumn":82},{"ruleId":"1701","severity":1,"message":"1702","line":216,"column":93,"nodeType":"1703","messageId":"1700","endLine":216,"endColumn":95},{"ruleId":"1688","severity":1,"message":"1749","line":28,"column":10,"nodeType":"1690","messageId":"1691","endLine":28,"endColumn":24},{"ruleId":"1701","severity":1,"message":"1702","line":118,"column":45,"nodeType":"1703","messageId":"1700","endLine":118,"endColumn":47},{"ruleId":"1701","severity":1,"message":"1702","line":294,"column":68,"nodeType":"1703","messageId":"1700","endLine":294,"endColumn":70},{"ruleId":"1701","severity":1,"message":"1702","line":589,"column":50,"nodeType":"1703","messageId":"1700","endLine":589,"endColumn":52},{"ruleId":"1701","severity":1,"message":"1702","line":593,"column":54,"nodeType":"1703","messageId":"1700","endLine":593,"endColumn":56},{"ruleId":"1701","severity":1,"message":"1702","line":833,"column":80,"nodeType":"1703","messageId":"1700","endLine":833,"endColumn":82},{"ruleId":"1701","severity":1,"message":"1702","line":1005,"column":90,"nodeType":"1703","messageId":"1700","endLine":1005,"endColumn":92},{"ruleId":"1701","severity":1,"message":"1702","line":1008,"column":98,"nodeType":"1703","messageId":"1700","endLine":1008,"endColumn":100},{"ruleId":"1701","severity":1,"message":"1702","line":1063,"column":110,"nodeType":"1703","messageId":"1700","endLine":1063,"endColumn":112},{"ruleId":"1701","severity":1,"message":"1702","line":1111,"column":106,"nodeType":"1703","messageId":"1700","endLine":1111,"endColumn":108},{"ruleId":"1701","severity":1,"message":"1744","line":1250,"column":58,"nodeType":"1703","messageId":"1700","endLine":1250,"endColumn":60},{"ruleId":"1701","severity":1,"message":"1744","line":1250,"column":75,"nodeType":"1703","messageId":"1700","endLine":1250,"endColumn":77},{"ruleId":"1701","severity":1,"message":"1744","line":1250,"column":93,"nodeType":"1703","messageId":"1700","endLine":1250,"endColumn":95},{"ruleId":"1701","severity":1,"message":"1744","line":1250,"column":110,"nodeType":"1703","messageId":"1700","endLine":1250,"endColumn":112},{"ruleId":"1701","severity":1,"message":"1744","line":1250,"column":128,"nodeType":"1703","messageId":"1700","endLine":1250,"endColumn":130},{"ruleId":"1701","severity":1,"message":"1744","line":1250,"column":145,"nodeType":"1703","messageId":"1700","endLine":1250,"endColumn":147},{"ruleId":"1701","severity":1,"message":"1744","line":1250,"column":163,"nodeType":"1703","messageId":"1700","endLine":1250,"endColumn":165},{"ruleId":"1688","severity":1,"message":"1766","line":5,"column":8,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":29},{"ruleId":"1701","severity":1,"message":"1744","line":281,"column":46,"nodeType":"1703","messageId":"1700","endLine":281,"endColumn":48},{"ruleId":"1701","severity":1,"message":"1744","line":281,"column":63,"nodeType":"1703","messageId":"1700","endLine":281,"endColumn":65},{"ruleId":"1701","severity":1,"message":"1744","line":281,"column":81,"nodeType":"1703","messageId":"1700","endLine":281,"endColumn":83},{"ruleId":"1701","severity":1,"message":"1744","line":281,"column":98,"nodeType":"1703","messageId":"1700","endLine":281,"endColumn":100},{"ruleId":"1701","severity":1,"message":"1744","line":281,"column":116,"nodeType":"1703","messageId":"1700","endLine":281,"endColumn":118},{"ruleId":"1701","severity":1,"message":"1744","line":281,"column":133,"nodeType":"1703","messageId":"1700","endLine":281,"endColumn":135},{"ruleId":"1701","severity":1,"message":"1744","line":281,"column":151,"nodeType":"1703","messageId":"1700","endLine":281,"endColumn":153},{"ruleId":"1701","severity":1,"message":"1702","line":56,"column":41,"nodeType":"1703","messageId":"1700","endLine":56,"endColumn":43},{"ruleId":"1701","severity":1,"message":"1702","line":58,"column":48,"nodeType":"1703","messageId":"1700","endLine":58,"endColumn":50},{"ruleId":"1701","severity":1,"message":"1702","line":60,"column":48,"nodeType":"1703","messageId":"1700","endLine":60,"endColumn":50},{"ruleId":"1701","severity":1,"message":"1702","line":65,"column":43,"nodeType":"1703","messageId":"1700","endLine":65,"endColumn":45},{"ruleId":"1701","severity":1,"message":"1702","line":67,"column":50,"nodeType":"1703","messageId":"1700","endLine":67,"endColumn":52},{"ruleId":"1701","severity":1,"message":"1702","line":69,"column":50,"nodeType":"1703","messageId":"1700","endLine":69,"endColumn":52},{"ruleId":"1701","severity":1,"message":"1702","line":81,"column":61,"nodeType":"1703","messageId":"1700","endLine":81,"endColumn":63},{"ruleId":"1701","severity":1,"message":"1702","line":86,"column":57,"nodeType":"1703","messageId":"1700","endLine":86,"endColumn":59},{"ruleId":"1688","severity":1,"message":"1748","line":144,"column":13,"nodeType":"1690","messageId":"1691","endLine":144,"endColumn":26},{"ruleId":"1701","severity":1,"message":"1744","line":166,"column":84,"nodeType":"1703","messageId":"1700","endLine":166,"endColumn":86},{"ruleId":"1701","severity":1,"message":"1744","line":167,"column":60,"nodeType":"1703","messageId":"1700","endLine":167,"endColumn":62},{"ruleId":"1688","severity":1,"message":"1749","line":25,"column":10,"nodeType":"1690","messageId":"1691","endLine":25,"endColumn":24},{"ruleId":"1701","severity":1,"message":"1702","line":112,"column":37,"nodeType":"1703","messageId":"1700","endLine":112,"endColumn":39},{"ruleId":"1701","severity":1,"message":"1702","line":533,"column":46,"nodeType":"1703","messageId":"1700","endLine":533,"endColumn":48},{"ruleId":"1701","severity":1,"message":"1702","line":537,"column":46,"nodeType":"1703","messageId":"1700","endLine":537,"endColumn":48},{"ruleId":"1701","severity":1,"message":"1702","line":777,"column":62,"nodeType":"1703","messageId":"1700","endLine":777,"endColumn":64},{"ruleId":"1701","severity":1,"message":"1702","line":894,"column":66,"nodeType":"1703","messageId":"1700","endLine":894,"endColumn":68},{"ruleId":"1701","severity":1,"message":"1702","line":897,"column":68,"nodeType":"1703","messageId":"1700","endLine":897,"endColumn":70},{"ruleId":"1701","severity":1,"message":"1702","line":952,"column":80,"nodeType":"1703","messageId":"1700","endLine":952,"endColumn":82},{"ruleId":"1701","severity":1,"message":"1744","line":1102,"column":34,"nodeType":"1703","messageId":"1700","endLine":1102,"endColumn":36},{"ruleId":"1701","severity":1,"message":"1744","line":1102,"column":51,"nodeType":"1703","messageId":"1700","endLine":1102,"endColumn":53},{"ruleId":"1701","severity":1,"message":"1744","line":1102,"column":69,"nodeType":"1703","messageId":"1700","endLine":1102,"endColumn":71},{"ruleId":"1701","severity":1,"message":"1744","line":1102,"column":86,"nodeType":"1703","messageId":"1700","endLine":1102,"endColumn":88},{"ruleId":"1701","severity":1,"message":"1744","line":1102,"column":104,"nodeType":"1703","messageId":"1700","endLine":1102,"endColumn":106},{"ruleId":"1701","severity":1,"message":"1744","line":1102,"column":121,"nodeType":"1703","messageId":"1700","endLine":1102,"endColumn":123},{"ruleId":"1701","severity":1,"message":"1744","line":1102,"column":139,"nodeType":"1703","messageId":"1700","endLine":1102,"endColumn":141},{"ruleId":"1701","severity":1,"message":"1702","line":56,"column":41,"nodeType":"1703","messageId":"1700","endLine":56,"endColumn":43},{"ruleId":"1701","severity":1,"message":"1702","line":58,"column":48,"nodeType":"1703","messageId":"1700","endLine":58,"endColumn":50},{"ruleId":"1701","severity":1,"message":"1702","line":60,"column":48,"nodeType":"1703","messageId":"1700","endLine":60,"endColumn":50},{"ruleId":"1701","severity":1,"message":"1702","line":65,"column":43,"nodeType":"1703","messageId":"1700","endLine":65,"endColumn":45},{"ruleId":"1701","severity":1,"message":"1702","line":67,"column":50,"nodeType":"1703","messageId":"1700","endLine":67,"endColumn":52},{"ruleId":"1701","severity":1,"message":"1702","line":69,"column":50,"nodeType":"1703","messageId":"1700","endLine":69,"endColumn":52},{"ruleId":"1701","severity":1,"message":"1702","line":81,"column":61,"nodeType":"1703","messageId":"1700","endLine":81,"endColumn":63},{"ruleId":"1701","severity":1,"message":"1702","line":87,"column":57,"nodeType":"1703","messageId":"1700","endLine":87,"endColumn":59},{"ruleId":"1701","severity":1,"message":"1702","line":89,"column":57,"nodeType":"1703","messageId":"1700","endLine":89,"endColumn":59},{"ruleId":"1688","severity":1,"message":"1748","line":144,"column":13,"nodeType":"1690","messageId":"1691","endLine":144,"endColumn":26},{"ruleId":"1701","severity":1,"message":"1744","line":166,"column":84,"nodeType":"1703","messageId":"1700","endLine":166,"endColumn":86},{"ruleId":"1701","severity":1,"message":"1744","line":167,"column":60,"nodeType":"1703","messageId":"1700","endLine":167,"endColumn":62},{"ruleId":"1688","severity":1,"message":"1767","line":1,"column":10,"nodeType":"1690","messageId":"1691","endLine":1,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1755","line":1,"column":21,"nodeType":"1690","messageId":"1691","endLine":1,"endColumn":31},{"ruleId":"1688","severity":1,"message":"1768","line":3,"column":10,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":27},{"ruleId":"1688","severity":1,"message":"1729","line":4,"column":16,"nodeType":"1690","messageId":"1691","endLine":4,"endColumn":22},{"ruleId":"1688","severity":1,"message":"1769","line":4,"column":24,"nodeType":"1690","messageId":"1691","endLine":4,"endColumn":31},{"ruleId":"1688","severity":1,"message":"1770","line":8,"column":9,"nodeType":"1690","messageId":"1691","endLine":8,"endColumn":16},{"ruleId":"1688","severity":1,"message":"1771","line":2,"column":10,"nodeType":"1690","messageId":"1691","endLine":2,"endColumn":18},{"ruleId":"1688","severity":1,"message":"1709","line":3,"column":22,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":36},{"ruleId":"1688","severity":1,"message":"1710","line":3,"column":38,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":52},{"ruleId":"1701","severity":1,"message":"1702","line":43,"column":37,"nodeType":"1703","messageId":"1700","endLine":43,"endColumn":39},{"ruleId":"1701","severity":1,"message":"1702","line":47,"column":44,"nodeType":"1703","messageId":"1700","endLine":47,"endColumn":46},{"ruleId":"1701","severity":1,"message":"1702","line":51,"column":44,"nodeType":"1703","messageId":"1700","endLine":51,"endColumn":46},{"ruleId":"1701","severity":1,"message":"1702","line":73,"column":30,"nodeType":"1703","messageId":"1700","endLine":73,"endColumn":32},{"ruleId":"1701","severity":1,"message":"1702","line":91,"column":30,"nodeType":"1703","messageId":"1700","endLine":91,"endColumn":32},{"ruleId":"1701","severity":1,"message":"1702","line":127,"column":30,"nodeType":"1703","messageId":"1700","endLine":127,"endColumn":32},{"ruleId":"1701","severity":1,"message":"1702","line":125,"column":30,"nodeType":"1703","messageId":"1700","endLine":125,"endColumn":32},{"ruleId":"1701","severity":1,"message":"1702","line":142,"column":30,"nodeType":"1703","messageId":"1700","endLine":142,"endColumn":32},{"ruleId":"1772","severity":1,"message":"1773","line":39,"column":29,"nodeType":"1774","endLine":39,"endColumn":83},{"ruleId":"1772","severity":1,"message":"1773","line":44,"column":85,"nodeType":"1774","endLine":44,"endColumn":171},{"ruleId":"1772","severity":1,"message":"1773","line":45,"column":92,"nodeType":"1774","endLine":45,"endColumn":193},{"ruleId":"1701","severity":1,"message":"1744","line":78,"column":51,"nodeType":"1703","messageId":"1700","endLine":78,"endColumn":53},{"ruleId":"1701","severity":1,"message":"1702","line":88,"column":50,"nodeType":"1703","messageId":"1700","endLine":88,"endColumn":52},{"ruleId":"1701","severity":1,"message":"1702","line":124,"column":49,"nodeType":"1703","messageId":"1700","endLine":124,"endColumn":51},{"ruleId":"1701","severity":1,"message":"1702","line":125,"column":49,"nodeType":"1703","messageId":"1700","endLine":125,"endColumn":51},{"ruleId":"1701","severity":1,"message":"1702","line":126,"column":49,"nodeType":"1703","messageId":"1700","endLine":126,"endColumn":51},{"ruleId":"1701","severity":1,"message":"1702","line":131,"column":49,"nodeType":"1703","messageId":"1700","endLine":131,"endColumn":51},{"ruleId":"1701","severity":1,"message":"1702","line":131,"column":73,"nodeType":"1703","messageId":"1700","endLine":131,"endColumn":75},{"ruleId":"1701","severity":1,"message":"1702","line":163,"column":45,"nodeType":"1703","messageId":"1700","endLine":163,"endColumn":47},{"ruleId":"1701","severity":1,"message":"1702","line":165,"column":52,"nodeType":"1703","messageId":"1700","endLine":165,"endColumn":54},{"ruleId":"1701","severity":1,"message":"1702","line":167,"column":52,"nodeType":"1703","messageId":"1700","endLine":167,"endColumn":54},{"ruleId":"1701","severity":1,"message":"1702","line":174,"column":29,"nodeType":"1703","messageId":"1700","endLine":174,"endColumn":31},{"ruleId":"1701","severity":1,"message":"1702","line":175,"column":24,"nodeType":"1703","messageId":"1700","endLine":175,"endColumn":26},{"ruleId":"1701","severity":1,"message":"1702","line":191,"column":31,"nodeType":"1703","messageId":"1700","endLine":191,"endColumn":33},{"ruleId":"1701","severity":1,"message":"1702","line":201,"column":33,"nodeType":"1703","messageId":"1700","endLine":201,"endColumn":35},{"ruleId":"1701","severity":1,"message":"1702","line":447,"column":45,"nodeType":"1703","messageId":"1700","endLine":447,"endColumn":47},{"ruleId":"1701","severity":1,"message":"1702","line":449,"column":52,"nodeType":"1703","messageId":"1700","endLine":449,"endColumn":54},{"ruleId":"1701","severity":1,"message":"1702","line":451,"column":52,"nodeType":"1703","messageId":"1700","endLine":451,"endColumn":54},{"ruleId":"1701","severity":1,"message":"1744","line":498,"column":50,"nodeType":"1703","messageId":"1700","endLine":498,"endColumn":52},{"ruleId":"1701","severity":1,"message":"1702","line":154,"column":69,"nodeType":"1703","messageId":"1700","endLine":154,"endColumn":71},{"ruleId":"1701","severity":1,"message":"1702","line":164,"column":58,"nodeType":"1703","messageId":"1700","endLine":164,"endColumn":60},{"ruleId":"1701","severity":1,"message":"1702","line":193,"column":69,"nodeType":"1703","messageId":"1700","endLine":193,"endColumn":71},{"ruleId":"1701","severity":1,"message":"1702","line":203,"column":58,"nodeType":"1703","messageId":"1700","endLine":203,"endColumn":60},{"ruleId":"1701","severity":1,"message":"1702","line":309,"column":20,"nodeType":"1703","messageId":"1700","endLine":309,"endColumn":22},{"ruleId":"1701","severity":1,"message":"1702","line":336,"column":29,"nodeType":"1703","messageId":"1700","endLine":336,"endColumn":31},{"ruleId":"1701","severity":1,"message":"1702","line":374,"column":24,"nodeType":"1703","messageId":"1700","endLine":374,"endColumn":26},{"ruleId":"1701","severity":1,"message":"1702","line":401,"column":33,"nodeType":"1703","messageId":"1700","endLine":401,"endColumn":35},{"ruleId":"1762","severity":1,"message":"1763","line":857,"column":56,"nodeType":"1764","messageId":"1765","endLine":857,"endColumn":106},{"ruleId":"1701","severity":1,"message":"1702","line":857,"column":76,"nodeType":"1703","messageId":"1700","endLine":857,"endColumn":78},{"ruleId":"1762","severity":1,"message":"1763","line":858,"column":50,"nodeType":"1764","messageId":"1765","endLine":858,"endColumn":100},{"ruleId":"1701","severity":1,"message":"1702","line":858,"column":70,"nodeType":"1703","messageId":"1700","endLine":858,"endColumn":72},{"ruleId":"1762","severity":1,"message":"1763","line":859,"column":52,"nodeType":"1764","messageId":"1765","endLine":859,"endColumn":113},{"ruleId":"1701","severity":1,"message":"1702","line":859,"column":83,"nodeType":"1703","messageId":"1700","endLine":859,"endColumn":85},{"ruleId":"1701","severity":1,"message":"1744","line":79,"column":51,"nodeType":"1703","messageId":"1700","endLine":79,"endColumn":53},{"ruleId":"1701","severity":1,"message":"1702","line":89,"column":50,"nodeType":"1703","messageId":"1700","endLine":89,"endColumn":52},{"ruleId":"1701","severity":1,"message":"1702","line":125,"column":49,"nodeType":"1703","messageId":"1700","endLine":125,"endColumn":51},{"ruleId":"1701","severity":1,"message":"1702","line":126,"column":49,"nodeType":"1703","messageId":"1700","endLine":126,"endColumn":51},{"ruleId":"1701","severity":1,"message":"1702","line":127,"column":49,"nodeType":"1703","messageId":"1700","endLine":127,"endColumn":51},{"ruleId":"1701","severity":1,"message":"1702","line":132,"column":49,"nodeType":"1703","messageId":"1700","endLine":132,"endColumn":51},{"ruleId":"1701","severity":1,"message":"1702","line":132,"column":73,"nodeType":"1703","messageId":"1700","endLine":132,"endColumn":75},{"ruleId":"1701","severity":1,"message":"1702","line":164,"column":45,"nodeType":"1703","messageId":"1700","endLine":164,"endColumn":47},{"ruleId":"1701","severity":1,"message":"1702","line":166,"column":52,"nodeType":"1703","messageId":"1700","endLine":166,"endColumn":54},{"ruleId":"1701","severity":1,"message":"1702","line":168,"column":52,"nodeType":"1703","messageId":"1700","endLine":168,"endColumn":54},{"ruleId":"1701","severity":1,"message":"1702","line":175,"column":29,"nodeType":"1703","messageId":"1700","endLine":175,"endColumn":31},{"ruleId":"1701","severity":1,"message":"1702","line":176,"column":24,"nodeType":"1703","messageId":"1700","endLine":176,"endColumn":26},{"ruleId":"1701","severity":1,"message":"1702","line":192,"column":31,"nodeType":"1703","messageId":"1700","endLine":192,"endColumn":33},{"ruleId":"1701","severity":1,"message":"1702","line":202,"column":33,"nodeType":"1703","messageId":"1700","endLine":202,"endColumn":35},{"ruleId":"1701","severity":1,"message":"1702","line":448,"column":45,"nodeType":"1703","messageId":"1700","endLine":448,"endColumn":47},{"ruleId":"1701","severity":1,"message":"1702","line":450,"column":52,"nodeType":"1703","messageId":"1700","endLine":450,"endColumn":54},{"ruleId":"1701","severity":1,"message":"1702","line":452,"column":52,"nodeType":"1703","messageId":"1700","endLine":452,"endColumn":54},{"ruleId":"1701","severity":1,"message":"1744","line":499,"column":50,"nodeType":"1703","messageId":"1700","endLine":499,"endColumn":52},{"ruleId":"1688","severity":1,"message":"1711","line":2,"column":8,"nodeType":"1690","messageId":"1691","endLine":2,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1718","line":3,"column":8,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1724","line":5,"column":8,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":14},{"ruleId":"1688","severity":1,"message":"1734","line":5,"column":5,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":12},{"ruleId":"1688","severity":1,"message":"1775","line":5,"column":57,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":65},{"ruleId":"1688","severity":1,"message":"1776","line":7,"column":8,"nodeType":"1690","messageId":"1691","endLine":7,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1724","line":8,"column":8,"nodeType":"1690","messageId":"1691","endLine":8,"endColumn":14},{"ruleId":"1688","severity":1,"message":"1777","line":9,"column":25,"nodeType":"1690","messageId":"1691","endLine":9,"endColumn":37},{"ruleId":"1688","severity":1,"message":"1778","line":10,"column":8,"nodeType":"1690","messageId":"1691","endLine":10,"endColumn":14},{"ruleId":"1762","severity":1,"message":"1763","line":260,"column":56,"nodeType":"1764","messageId":"1765","endLine":260,"endColumn":98},{"ruleId":"1701","severity":1,"message":"1702","line":260,"column":76,"nodeType":"1703","messageId":"1700","endLine":260,"endColumn":78},{"ruleId":"1762","severity":1,"message":"1763","line":261,"column":50,"nodeType":"1764","messageId":"1765","endLine":261,"endColumn":92},{"ruleId":"1701","severity":1,"message":"1702","line":261,"column":70,"nodeType":"1703","messageId":"1700","endLine":261,"endColumn":72},{"ruleId":"1688","severity":1,"message":"1779","line":4,"column":20,"nodeType":"1690","messageId":"1691","endLine":4,"endColumn":29},{"ruleId":"1688","severity":1,"message":"1776","line":7,"column":8,"nodeType":"1690","messageId":"1691","endLine":7,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1724","line":8,"column":8,"nodeType":"1690","messageId":"1691","endLine":8,"endColumn":14},{"ruleId":"1688","severity":1,"message":"1780","line":12,"column":8,"nodeType":"1690","messageId":"1691","endLine":12,"endColumn":18},{"ruleId":"1688","severity":1,"message":"1781","line":14,"column":10,"nodeType":"1690","messageId":"1691","endLine":14,"endColumn":22},{"ruleId":"1772","severity":1,"message":"1773","line":189,"column":52,"nodeType":"1774","endLine":189,"endColumn":133},{"ruleId":"1772","severity":1,"message":"1773","line":311,"column":60,"nodeType":"1774","endLine":311,"endColumn":110},{"ruleId":"1782","severity":1,"message":"1783","line":346,"column":53,"nodeType":"1784","messageId":"1785","endLine":346,"endColumn":84},{"ruleId":"1782","severity":1,"message":"1783","line":351,"column":53,"nodeType":"1784","messageId":"1785","endLine":351,"endColumn":90},{"ruleId":"1782","severity":1,"message":"1783","line":369,"column":69,"nodeType":"1784","messageId":"1785","endLine":369,"endColumn":103},{"ruleId":"1688","severity":1,"message":"1786","line":1,"column":10,"nodeType":"1690","messageId":"1691","endLine":1,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1734","line":5,"column":10,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":17},{"ruleId":"1688","severity":1,"message":"1787","line":5,"column":73,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":85},{"ruleId":"1688","severity":1,"message":"1788","line":5,"column":87,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":94},{"ruleId":"1688","severity":1,"message":"1789","line":5,"column":96,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":102},{"ruleId":"1688","severity":1,"message":"1790","line":5,"column":104,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":114},{"ruleId":"1688","severity":1,"message":"1791","line":5,"column":116,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":128},{"ruleId":"1688","severity":1,"message":"1792","line":5,"column":130,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":140},{"ruleId":"1688","severity":1,"message":"1721","line":6,"column":8,"nodeType":"1690","messageId":"1691","endLine":6,"endColumn":18},{"ruleId":"1701","severity":1,"message":"1702","line":94,"column":65,"nodeType":"1703","messageId":"1700","endLine":94,"endColumn":67},{"ruleId":"1701","severity":1,"message":"1702","line":104,"column":54,"nodeType":"1703","messageId":"1700","endLine":104,"endColumn":56},{"ruleId":"1701","severity":1,"message":"1702","line":196,"column":20,"nodeType":"1703","messageId":"1700","endLine":196,"endColumn":22},{"ruleId":"1701","severity":1,"message":"1702","line":217,"column":29,"nodeType":"1703","messageId":"1700","endLine":217,"endColumn":31},{"ruleId":"1701","severity":1,"message":"1702","line":255,"column":24,"nodeType":"1703","messageId":"1700","endLine":255,"endColumn":26},{"ruleId":"1701","severity":1,"message":"1702","line":272,"column":33,"nodeType":"1703","messageId":"1700","endLine":272,"endColumn":35},{"ruleId":"1701","severity":1,"message":"1702","line":87,"column":65,"nodeType":"1703","messageId":"1700","endLine":87,"endColumn":67},{"ruleId":"1701","severity":1,"message":"1702","line":97,"column":54,"nodeType":"1703","messageId":"1700","endLine":97,"endColumn":56},{"ruleId":"1762","severity":1,"message":"1763","line":409,"column":56,"nodeType":"1764","messageId":"1765","endLine":409,"endColumn":106},{"ruleId":"1701","severity":1,"message":"1702","line":409,"column":76,"nodeType":"1703","messageId":"1700","endLine":409,"endColumn":78},{"ruleId":"1762","severity":1,"message":"1763","line":410,"column":50,"nodeType":"1764","messageId":"1765","endLine":410,"endColumn":100},{"ruleId":"1701","severity":1,"message":"1702","line":410,"column":70,"nodeType":"1703","messageId":"1700","endLine":410,"endColumn":72},{"ruleId":"1762","severity":1,"message":"1763","line":411,"column":52,"nodeType":"1764","messageId":"1765","endLine":411,"endColumn":113},{"ruleId":"1701","severity":1,"message":"1702","line":411,"column":83,"nodeType":"1703","messageId":"1700","endLine":411,"endColumn":85},{"ruleId":"1701","severity":1,"message":"1702","line":77,"column":65,"nodeType":"1703","messageId":"1700","endLine":77,"endColumn":67},{"ruleId":"1701","severity":1,"message":"1702","line":87,"column":54,"nodeType":"1703","messageId":"1700","endLine":87,"endColumn":56},{"ruleId":"1701","severity":1,"message":"1702","line":261,"column":24,"nodeType":"1703","messageId":"1700","endLine":261,"endColumn":26},{"ruleId":"1688","severity":1,"message":"1793","line":7,"column":41,"nodeType":"1690","messageId":"1691","endLine":7,"endColumn":49},{"ruleId":"1688","severity":1,"message":"1794","line":17,"column":8,"nodeType":"1690","messageId":"1691","endLine":17,"endColumn":21},{"ruleId":"1688","severity":1,"message":"1777","line":10,"column":25,"nodeType":"1690","messageId":"1691","endLine":10,"endColumn":37},{"ruleId":"1688","severity":1,"message":"1778","line":11,"column":8,"nodeType":"1690","messageId":"1691","endLine":11,"endColumn":14},{"ruleId":"1688","severity":1,"message":"1711","line":2,"column":8,"nodeType":"1690","messageId":"1691","endLine":2,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1795","line":1,"column":19,"nodeType":"1690","messageId":"1691","endLine":1,"endColumn":26},{"ruleId":"1688","severity":1,"message":"1711","line":2,"column":8,"nodeType":"1690","messageId":"1691","endLine":2,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1718","line":3,"column":8,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1724","line":5,"column":8,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":14},{"ruleId":"1688","severity":1,"message":"1796","line":6,"column":8,"nodeType":"1690","messageId":"1691","endLine":6,"endColumn":22},{"ruleId":"1688","severity":1,"message":"1797","line":5,"column":77,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":92},{"ruleId":"1688","severity":1,"message":"1737","line":5,"column":94,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":101},{"ruleId":"1688","severity":1,"message":"1788","line":5,"column":103,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":110},{"ruleId":"1688","severity":1,"message":"1775","line":5,"column":112,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":120},{"ruleId":"1688","severity":1,"message":"1759","line":5,"column":122,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":130},{"ruleId":"1688","severity":1,"message":"1794","line":18,"column":8,"nodeType":"1690","messageId":"1691","endLine":18,"endColumn":21},{"ruleId":"1798","severity":1,"message":"1799","line":305,"column":47,"nodeType":"1764","messageId":"1800","endLine":305,"endColumn":49},{"ruleId":"1688","severity":1,"message":"1777","line":10,"column":25,"nodeType":"1690","messageId":"1691","endLine":10,"endColumn":37},{"ruleId":"1688","severity":1,"message":"1778","line":11,"column":8,"nodeType":"1690","messageId":"1691","endLine":11,"endColumn":14},{"ruleId":"1688","severity":1,"message":"1734","line":5,"column":5,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":12},{"ruleId":"1688","severity":1,"message":"1775","line":5,"column":47,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":55},{"ruleId":"1688","severity":1,"message":"1788","line":5,"column":68,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":75},{"ruleId":"1688","severity":1,"message":"1776","line":7,"column":8,"nodeType":"1690","messageId":"1691","endLine":7,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1801","line":7,"column":17,"nodeType":"1690","messageId":"1691","endLine":7,"endColumn":28},{"ruleId":"1688","severity":1,"message":"1724","line":8,"column":8,"nodeType":"1690","messageId":"1691","endLine":8,"endColumn":14},{"ruleId":"1688","severity":1,"message":"1721","line":9,"column":8,"nodeType":"1690","messageId":"1691","endLine":9,"endColumn":18},{"ruleId":"1688","severity":1,"message":"1743","line":10,"column":20,"nodeType":"1690","messageId":"1691","endLine":10,"endColumn":33},{"ruleId":"1688","severity":1,"message":"1777","line":10,"column":35,"nodeType":"1690","messageId":"1691","endLine":10,"endColumn":47},{"ruleId":"1688","severity":1,"message":"1778","line":11,"column":8,"nodeType":"1690","messageId":"1691","endLine":11,"endColumn":14},{"ruleId":"1762","severity":1,"message":"1763","line":165,"column":56,"nodeType":"1764","messageId":"1765","endLine":165,"endColumn":98},{"ruleId":"1701","severity":1,"message":"1702","line":165,"column":76,"nodeType":"1703","messageId":"1700","endLine":165,"endColumn":78},{"ruleId":"1762","severity":1,"message":"1763","line":166,"column":50,"nodeType":"1764","messageId":"1765","endLine":166,"endColumn":92},{"ruleId":"1701","severity":1,"message":"1702","line":166,"column":70,"nodeType":"1703","messageId":"1700","endLine":166,"endColumn":72},{"ruleId":"1701","severity":1,"message":"1702","line":91,"column":26,"nodeType":"1703","messageId":"1700","endLine":91,"endColumn":28},{"ruleId":"1688","severity":1,"message":"1711","line":2,"column":8,"nodeType":"1690","messageId":"1691","endLine":2,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1718","line":3,"column":8,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1724","line":5,"column":8,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":14},{"ruleId":"1688","severity":1,"message":"1732","line":2,"column":8,"nodeType":"1690","messageId":"1691","endLine":2,"endColumn":15},{"ruleId":"1688","severity":1,"message":"1802","line":3,"column":8,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":23},{"ruleId":"1688","severity":1,"message":"1803","line":4,"column":10,"nodeType":"1690","messageId":"1691","endLine":4,"endColumn":17},{"ruleId":"1688","severity":1,"message":"1736","line":5,"column":10,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":18},{"ruleId":"1688","severity":1,"message":"1779","line":5,"column":20,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":29},{"ruleId":"1688","severity":1,"message":"1792","line":5,"column":31,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":41},{"ruleId":"1688","severity":1,"message":"1775","line":5,"column":43,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":51},{"ruleId":"1688","severity":1,"message":"1804","line":6,"column":8,"nodeType":"1690","messageId":"1691","endLine":6,"endColumn":22},{"ruleId":"1688","severity":1,"message":"1805","line":7,"column":8,"nodeType":"1690","messageId":"1691","endLine":7,"endColumn":20},{"ruleId":"1688","severity":1,"message":"1776","line":8,"column":8,"nodeType":"1690","messageId":"1691","endLine":8,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1724","line":9,"column":8,"nodeType":"1690","messageId":"1691","endLine":9,"endColumn":14},{"ruleId":"1772","severity":1,"message":"1773","line":26,"column":13,"nodeType":"1774","endLine":26,"endColumn":153},{"ruleId":"1772","severity":1,"message":"1773","line":32,"column":25,"nodeType":"1774","endLine":37,"endColumn":27},{"ruleId":"1772","severity":1,"message":"1773","line":38,"column":25,"nodeType":"1774","endLine":38,"endColumn":110},{"ruleId":"1688","severity":1,"message":"1806","line":7,"column":8,"nodeType":"1690","messageId":"1691","endLine":7,"endColumn":14},{"ruleId":"1688","severity":1,"message":"1767","line":1,"column":17,"nodeType":"1690","messageId":"1691","endLine":1,"endColumn":26},{"ruleId":"1807","severity":1,"message":"1808","line":364,"column":40,"nodeType":"1809","messageId":"1810","endLine":364,"endColumn":42},{"ruleId":"1807","severity":1,"message":"1808","line":364,"column":82,"nodeType":"1809","messageId":"1810","endLine":364,"endColumn":84},{"ruleId":"1807","severity":1,"message":"1808","line":388,"column":41,"nodeType":"1809","messageId":"1810","endLine":388,"endColumn":43},{"ruleId":"1807","severity":1,"message":"1808","line":388,"column":104,"nodeType":"1809","messageId":"1810","endLine":388,"endColumn":106},{"ruleId":"1688","severity":1,"message":"1767","line":1,"column":10,"nodeType":"1690","messageId":"1691","endLine":1,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1811","line":27,"column":13,"nodeType":"1690","messageId":"1691","endLine":27,"endColumn":16},{"ruleId":"1688","severity":1,"message":"1767","line":1,"column":17,"nodeType":"1690","messageId":"1691","endLine":1,"endColumn":26},{"ruleId":"1688","severity":1,"message":"1812","line":2,"column":41,"nodeType":"1690","messageId":"1691","endLine":2,"endColumn":46},{"ruleId":"1688","severity":1,"message":"1813","line":44,"column":13,"nodeType":"1690","messageId":"1691","endLine":44,"endColumn":18},{"ruleId":"1814","severity":1,"message":"1815","line":190,"column":50,"nodeType":"1816","messageId":"1817","endLine":190,"endColumn":51,"suggestions":"1818"},{"ruleId":"1814","severity":1,"message":"1819","line":190,"column":53,"nodeType":"1816","messageId":"1817","endLine":190,"endColumn":54,"suggestions":"1820"},{"ruleId":"1814","severity":1,"message":"1815","line":190,"column":88,"nodeType":"1816","messageId":"1817","endLine":190,"endColumn":89,"suggestions":"1821"},{"ruleId":"1814","severity":1,"message":"1819","line":190,"column":91,"nodeType":"1816","messageId":"1817","endLine":190,"endColumn":92,"suggestions":"1822"},{"ruleId":"1688","severity":1,"message":"1823","line":356,"column":17,"nodeType":"1690","messageId":"1691","endLine":356,"endColumn":24},{"ruleId":"1688","severity":1,"message":"1813","line":523,"column":13,"nodeType":"1690","messageId":"1691","endLine":523,"endColumn":18},{"ruleId":"1688","severity":1,"message":"1811","line":527,"column":13,"nodeType":"1690","messageId":"1691","endLine":527,"endColumn":16},{"ruleId":"1688","severity":1,"message":"1711","line":2,"column":8,"nodeType":"1690","messageId":"1691","endLine":2,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1718","line":3,"column":8,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1724","line":5,"column":8,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":14},{"ruleId":"1688","severity":1,"message":"1734","line":5,"column":5,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":12},{"ruleId":"1688","severity":1,"message":"1824","line":5,"column":24,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":38},{"ruleId":"1688","severity":1,"message":"1789","line":5,"column":40,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":46},{"ruleId":"1688","severity":1,"message":"1790","line":5,"column":48,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":58},{"ruleId":"1688","severity":1,"message":"1791","line":5,"column":60,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":72},{"ruleId":"1688","severity":1,"message":"1805","line":8,"column":8,"nodeType":"1690","messageId":"1691","endLine":8,"endColumn":20},{"ruleId":"1688","severity":1,"message":"1825","line":9,"column":8,"nodeType":"1690","messageId":"1691","endLine":9,"endColumn":18},{"ruleId":"1688","severity":1,"message":"1776","line":10,"column":8,"nodeType":"1690","messageId":"1691","endLine":10,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1721","line":11,"column":8,"nodeType":"1690","messageId":"1691","endLine":11,"endColumn":18},{"ruleId":"1772","severity":1,"message":"1773","line":94,"column":33,"nodeType":"1774","endLine":94,"endColumn":138},{"ruleId":"1772","severity":1,"message":"1773","line":104,"column":29,"nodeType":"1774","endLine":104,"endColumn":129},{"ruleId":"1772","severity":1,"message":"1773","line":187,"column":37,"nodeType":"1774","endLine":187,"endColumn":135},{"ruleId":"1772","severity":1,"message":"1773","line":203,"column":45,"nodeType":"1774","endLine":203,"endColumn":147},{"ruleId":"1688","severity":1,"message":"1826","line":3,"column":17,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":20},{"ruleId":"1827","severity":1,"message":"1828","line":64,"column":13,"nodeType":"1774","endLine":65,"endColumn":51},{"ruleId":"1827","severity":1,"message":"1828","line":67,"column":13,"nodeType":"1774","endLine":69,"endColumn":50},{"ruleId":"1827","severity":1,"message":"1828","line":71,"column":13,"nodeType":"1774","endLine":72,"endColumn":54},{"ruleId":"1827","severity":1,"message":"1828","line":76,"column":15,"nodeType":"1774","endLine":77,"endColumn":53},{"ruleId":"1827","severity":1,"message":"1828","line":78,"column":15,"nodeType":"1774","endLine":81,"endColumn":16},{"ruleId":"1827","severity":1,"message":"1828","line":85,"column":15,"nodeType":"1774","endLine":86,"endColumn":53},{"ruleId":"1827","severity":1,"message":"1828","line":88,"column":15,"nodeType":"1774","endLine":90,"endColumn":56},{"ruleId":"1688","severity":1,"message":"1823","line":105,"column":11,"nodeType":"1690","messageId":"1691","endLine":105,"endColumn":18},{"ruleId":"1688","severity":1,"message":"1767","line":2,"column":17,"nodeType":"1690","messageId":"1691","endLine":2,"endColumn":26},{"ruleId":"1688","severity":1,"message":"1826","line":3,"column":17,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":20},{"ruleId":"1688","severity":1,"message":"1769","line":3,"column":41,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":48},{"ruleId":"1688","severity":1,"message":"1829","line":5,"column":8,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":21},{"ruleId":"1827","severity":1,"message":"1828","line":61,"column":13,"nodeType":"1774","endLine":62,"endColumn":55},{"ruleId":"1827","severity":1,"message":"1828","line":63,"column":33,"nodeType":"1774","endLine":65,"endColumn":14},{"ruleId":"1688","severity":1,"message":"1830","line":19,"column":10,"nodeType":"1690","messageId":"1691","endLine":19,"endColumn":21},{"ruleId":"1688","severity":1,"message":"1831","line":4,"column":10,"nodeType":"1690","messageId":"1691","endLine":4,"endColumn":17},{"ruleId":"1688","severity":1,"message":"1767","line":1,"column":17,"nodeType":"1690","messageId":"1691","endLine":1,"endColumn":26},{"ruleId":"1688","severity":1,"message":"1769","line":2,"column":25,"nodeType":"1690","messageId":"1691","endLine":2,"endColumn":32},{"ruleId":"1782","severity":1,"message":"1783","line":81,"column":17,"nodeType":"1784","messageId":"1785","endLine":114,"endColumn":18},{"ruleId":"1688","severity":1,"message":"1711","line":2,"column":8,"nodeType":"1690","messageId":"1691","endLine":2,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1718","line":3,"column":8,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1724","line":5,"column":8,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":14},{"ruleId":"1693","replacedBy":"1832"},{"ruleId":"1695","replacedBy":"1833"},{"ruleId":"1688","severity":1,"message":"1734","line":4,"column":10,"nodeType":"1690","messageId":"1691","endLine":4,"endColumn":17},{"ruleId":"1688","severity":1,"message":"1834","line":5,"column":8,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":22},{"ruleId":"1688","severity":1,"message":"1835","line":8,"column":8,"nodeType":"1690","messageId":"1691","endLine":8,"endColumn":20},{"ruleId":"1688","severity":1,"message":"1803","line":2,"column":10,"nodeType":"1690","messageId":"1691","endLine":2,"endColumn":17},{"ruleId":"1688","severity":1,"message":"1836","line":5,"column":8,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":17},{"ruleId":"1688","severity":1,"message":"1758","line":9,"column":10,"nodeType":"1690","messageId":"1691","endLine":9,"endColumn":15},{"ruleId":"1688","severity":1,"message":"1803","line":2,"column":10,"nodeType":"1690","messageId":"1691","endLine":2,"endColumn":17},{"ruleId":"1688","severity":1,"message":"1758","line":9,"column":10,"nodeType":"1690","messageId":"1691","endLine":9,"endColumn":15},{"ruleId":"1688","severity":1,"message":"1802","line":2,"column":8,"nodeType":"1690","messageId":"1691","endLine":2,"endColumn":23},{"ruleId":"1688","severity":1,"message":"1734","line":5,"column":5,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":12},{"ruleId":"1688","severity":1,"message":"1736","line":5,"column":14,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":22},{"ruleId":"1688","severity":1,"message":"1824","line":5,"column":24,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":38},{"ruleId":"1688","severity":1,"message":"1789","line":5,"column":40,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":46},{"ruleId":"1688","severity":1,"message":"1790","line":5,"column":48,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":58},{"ruleId":"1688","severity":1,"message":"1791","line":5,"column":60,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":72},{"ruleId":"1688","severity":1,"message":"1834","line":8,"column":8,"nodeType":"1690","messageId":"1691","endLine":8,"endColumn":22},{"ruleId":"1688","severity":1,"message":"1805","line":9,"column":8,"nodeType":"1690","messageId":"1691","endLine":9,"endColumn":20},{"ruleId":"1688","severity":1,"message":"1776","line":10,"column":8,"nodeType":"1690","messageId":"1691","endLine":10,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1721","line":11,"column":8,"nodeType":"1690","messageId":"1691","endLine":11,"endColumn":18},{"ruleId":"1688","severity":1,"message":"1758","line":10,"column":10,"nodeType":"1690","messageId":"1691","endLine":10,"endColumn":15},{"ruleId":"1688","severity":1,"message":"1837","line":5,"column":10,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":20},{"ruleId":"1688","severity":1,"message":"1689","line":5,"column":22,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":35},{"ruleId":"1688","severity":1,"message":"1758","line":5,"column":37,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":42},{"ruleId":"1688","severity":1,"message":"1838","line":6,"column":10,"nodeType":"1690","messageId":"1691","endLine":6,"endColumn":17},{"ruleId":"1688","severity":1,"message":"1831","line":6,"column":19,"nodeType":"1690","messageId":"1691","endLine":6,"endColumn":26},{"ruleId":"1688","severity":1,"message":"1707","line":13,"column":8,"nodeType":"1690","messageId":"1691","endLine":13,"endColumn":21},{"ruleId":"1688","severity":1,"message":"1776","line":15,"column":8,"nodeType":"1690","messageId":"1691","endLine":15,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1839","line":23,"column":8,"nodeType":"1690","messageId":"1691","endLine":23,"endColumn":15},{"ruleId":"1701","severity":1,"message":"1744","line":108,"column":32,"nodeType":"1703","messageId":"1700","endLine":108,"endColumn":34},{"ruleId":"1688","severity":1,"message":"1786","line":1,"column":10,"nodeType":"1690","messageId":"1691","endLine":1,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1734","line":5,"column":10,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":17},{"ruleId":"1688","severity":1,"message":"1759","line":5,"column":29,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":37},{"ruleId":"1688","severity":1,"message":"1840","line":5,"column":62,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":71},{"ruleId":"1688","severity":1,"message":"1787","line":5,"column":73,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":85},{"ruleId":"1688","severity":1,"message":"1788","line":5,"column":87,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":94},{"ruleId":"1688","severity":1,"message":"1789","line":5,"column":96,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":102},{"ruleId":"1688","severity":1,"message":"1790","line":5,"column":104,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":114},{"ruleId":"1688","severity":1,"message":"1791","line":5,"column":116,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":128},{"ruleId":"1688","severity":1,"message":"1792","line":5,"column":130,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":140},{"ruleId":"1688","severity":1,"message":"1780","line":5,"column":142,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":152},{"ruleId":"1688","severity":1,"message":"1841","line":7,"column":8,"nodeType":"1690","messageId":"1691","endLine":7,"endColumn":24},{"ruleId":"1688","severity":1,"message":"1776","line":10,"column":8,"nodeType":"1690","messageId":"1691","endLine":10,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1842","line":10,"column":17,"nodeType":"1690","messageId":"1691","endLine":10,"endColumn":29},{"ruleId":"1688","severity":1,"message":"1843","line":11,"column":8,"nodeType":"1690","messageId":"1691","endLine":11,"endColumn":16},{"ruleId":"1688","severity":1,"message":"1724","line":12,"column":8,"nodeType":"1690","messageId":"1691","endLine":12,"endColumn":14},{"ruleId":"1688","severity":1,"message":"1844","line":13,"column":10,"nodeType":"1690","messageId":"1691","endLine":13,"endColumn":20},{"ruleId":"1688","severity":1,"message":"1845","line":13,"column":22,"nodeType":"1690","messageId":"1691","endLine":13,"endColumn":27},{"ruleId":"1688","severity":1,"message":"1846","line":14,"column":8,"nodeType":"1690","messageId":"1691","endLine":14,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1795","line":1,"column":19,"nodeType":"1690","messageId":"1691","endLine":1,"endColumn":26},{"ruleId":"1688","severity":1,"message":"1724","line":5,"column":8,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":14},{"ruleId":"1688","severity":1,"message":"1734","line":5,"column":5,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":12},{"ruleId":"1688","severity":1,"message":"1805","line":9,"column":8,"nodeType":"1690","messageId":"1691","endLine":9,"endColumn":20},{"ruleId":"1688","severity":1,"message":"1776","line":10,"column":8,"nodeType":"1690","messageId":"1691","endLine":10,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1721","line":11,"column":8,"nodeType":"1690","messageId":"1691","endLine":11,"endColumn":18},{"ruleId":"1688","severity":1,"message":"1847","line":48,"column":13,"nodeType":"1690","messageId":"1691","endLine":48,"endColumn":23},{"ruleId":"1688","severity":1,"message":"1848","line":49,"column":13,"nodeType":"1690","messageId":"1691","endLine":49,"endColumn":25},{"ruleId":"1688","severity":1,"message":"1849","line":50,"column":13,"nodeType":"1690","messageId":"1691","endLine":50,"endColumn":23},{"ruleId":"1688","severity":1,"message":"1850","line":3,"column":10,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":15},{"ruleId":"1688","severity":1,"message":"1776","line":11,"column":8,"nodeType":"1690","messageId":"1691","endLine":11,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1724","line":12,"column":8,"nodeType":"1690","messageId":"1691","endLine":12,"endColumn":14},{"ruleId":"1688","severity":1,"message":"1847","line":50,"column":13,"nodeType":"1690","messageId":"1691","endLine":50,"endColumn":23},{"ruleId":"1688","severity":1,"message":"1848","line":51,"column":13,"nodeType":"1690","messageId":"1691","endLine":51,"endColumn":25},{"ruleId":"1688","severity":1,"message":"1849","line":52,"column":13,"nodeType":"1690","messageId":"1691","endLine":52,"endColumn":23},{"ruleId":"1688","severity":1,"message":"1840","line":5,"column":62,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":71},{"ruleId":"1688","severity":1,"message":"1787","line":5,"column":73,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":85},{"ruleId":"1688","severity":1,"message":"1789","line":5,"column":96,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":102},{"ruleId":"1688","severity":1,"message":"1790","line":5,"column":104,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":114},{"ruleId":"1688","severity":1,"message":"1791","line":5,"column":116,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":128},{"ruleId":"1688","severity":1,"message":"1721","line":9,"column":8,"nodeType":"1690","messageId":"1691","endLine":9,"endColumn":18},{"ruleId":"1688","severity":1,"message":"1776","line":10,"column":8,"nodeType":"1690","messageId":"1691","endLine":10,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1843","line":12,"column":8,"nodeType":"1690","messageId":"1691","endLine":12,"endColumn":16},{"ruleId":"1688","severity":1,"message":"1844","line":13,"column":10,"nodeType":"1690","messageId":"1691","endLine":13,"endColumn":20},{"ruleId":"1688","severity":1,"message":"1845","line":13,"column":22,"nodeType":"1690","messageId":"1691","endLine":13,"endColumn":27},{"ruleId":"1688","severity":1,"message":"1734","line":5,"column":5,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":12},{"ruleId":"1688","severity":1,"message":"1824","line":5,"column":24,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":38},{"ruleId":"1688","severity":1,"message":"1789","line":5,"column":40,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":46},{"ruleId":"1688","severity":1,"message":"1790","line":5,"column":48,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":58},{"ruleId":"1688","severity":1,"message":"1791","line":5,"column":60,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":72},{"ruleId":"1688","severity":1,"message":"1851","line":5,"column":74,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":82},{"ruleId":"1688","severity":1,"message":"1852","line":7,"column":8,"nodeType":"1690","messageId":"1691","endLine":7,"endColumn":23},{"ruleId":"1688","severity":1,"message":"1805","line":9,"column":8,"nodeType":"1690","messageId":"1691","endLine":9,"endColumn":20},{"ruleId":"1688","severity":1,"message":"1776","line":11,"column":8,"nodeType":"1690","messageId":"1691","endLine":11,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1721","line":12,"column":8,"nodeType":"1690","messageId":"1691","endLine":12,"endColumn":18},{"ruleId":"1688","severity":1,"message":"1759","line":5,"column":29,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":37},{"ruleId":"1688","severity":1,"message":"1791","line":5,"column":59,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":71},{"ruleId":"1688","severity":1,"message":"1780","line":5,"column":73,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":83},{"ruleId":"1688","severity":1,"message":"1805","line":6,"column":8,"nodeType":"1690","messageId":"1691","endLine":6,"endColumn":20},{"ruleId":"1688","severity":1,"message":"1776","line":8,"column":8,"nodeType":"1690","messageId":"1691","endLine":8,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1724","line":9,"column":8,"nodeType":"1690","messageId":"1691","endLine":9,"endColumn":14},{"ruleId":"1688","severity":1,"message":"1786","line":1,"column":10,"nodeType":"1690","messageId":"1691","endLine":1,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1734","line":5,"column":10,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":17},{"ruleId":"1688","severity":1,"message":"1759","line":5,"column":29,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":37},{"ruleId":"1688","severity":1,"message":"1840","line":5,"column":62,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":71},{"ruleId":"1688","severity":1,"message":"1787","line":5,"column":73,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":85},{"ruleId":"1688","severity":1,"message":"1788","line":5,"column":87,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":94},{"ruleId":"1688","severity":1,"message":"1789","line":5,"column":96,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":102},{"ruleId":"1688","severity":1,"message":"1790","line":5,"column":104,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":114},{"ruleId":"1688","severity":1,"message":"1791","line":5,"column":116,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":128},{"ruleId":"1688","severity":1,"message":"1834","line":6,"column":8,"nodeType":"1690","messageId":"1691","endLine":6,"endColumn":22},{"ruleId":"1688","severity":1,"message":"1776","line":10,"column":8,"nodeType":"1690","messageId":"1691","endLine":10,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1843","line":11,"column":8,"nodeType":"1690","messageId":"1691","endLine":11,"endColumn":16},{"ruleId":"1688","severity":1,"message":"1844","line":12,"column":10,"nodeType":"1690","messageId":"1691","endLine":12,"endColumn":20},{"ruleId":"1688","severity":1,"message":"1845","line":12,"column":22,"nodeType":"1690","messageId":"1691","endLine":12,"endColumn":27},{"ruleId":"1688","severity":1,"message":"1759","line":4,"column":29,"nodeType":"1690","messageId":"1691","endLine":4,"endColumn":37},{"ruleId":"1688","severity":1,"message":"1853","line":4,"column":73,"nodeType":"1690","messageId":"1691","endLine":4,"endColumn":80},{"ruleId":"1688","severity":1,"message":"1852","line":5,"column":8,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":23},{"ruleId":"1688","severity":1,"message":"1776","line":8,"column":8,"nodeType":"1690","messageId":"1691","endLine":8,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1854","line":12,"column":10,"nodeType":"1690","messageId":"1691","endLine":12,"endColumn":24},{"ruleId":"1688","severity":1,"message":"1855","line":12,"column":26,"nodeType":"1690","messageId":"1691","endLine":12,"endColumn":39},{"ruleId":"1688","severity":1,"message":"1786","line":1,"column":10,"nodeType":"1690","messageId":"1691","endLine":1,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1776","line":10,"column":8,"nodeType":"1690","messageId":"1691","endLine":10,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1843","line":11,"column":8,"nodeType":"1690","messageId":"1691","endLine":11,"endColumn":16},{"ruleId":"1688","severity":1,"message":"1844","line":13,"column":10,"nodeType":"1690","messageId":"1691","endLine":13,"endColumn":20},{"ruleId":"1688","severity":1,"message":"1846","line":14,"column":8,"nodeType":"1690","messageId":"1691","endLine":14,"endColumn":13},{"ruleId":"1762","severity":1,"message":"1763","line":641,"column":56,"nodeType":"1764","messageId":"1765","endLine":641,"endColumn":100},{"ruleId":"1701","severity":1,"message":"1702","line":641,"column":76,"nodeType":"1703","messageId":"1700","endLine":641,"endColumn":78},{"ruleId":"1762","severity":1,"message":"1763","line":642,"column":50,"nodeType":"1764","messageId":"1765","endLine":642,"endColumn":94},{"ruleId":"1701","severity":1,"message":"1702","line":642,"column":70,"nodeType":"1703","messageId":"1700","endLine":642,"endColumn":72},{"ruleId":"1762","severity":1,"message":"1763","line":643,"column":52,"nodeType":"1764","messageId":"1765","endLine":643,"endColumn":101},{"ruleId":"1701","severity":1,"message":"1702","line":643,"column":77,"nodeType":"1703","messageId":"1700","endLine":643,"endColumn":79},{"ruleId":"1688","severity":1,"message":"1734","line":5,"column":5,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":12},{"ruleId":"1688","severity":1,"message":"1789","line":5,"column":40,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":46},{"ruleId":"1688","severity":1,"message":"1790","line":5,"column":48,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":58},{"ruleId":"1688","severity":1,"message":"1791","line":5,"column":60,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":72},{"ruleId":"1688","severity":1,"message":"1852","line":7,"column":8,"nodeType":"1690","messageId":"1691","endLine":7,"endColumn":23},{"ruleId":"1688","severity":1,"message":"1805","line":9,"column":8,"nodeType":"1690","messageId":"1691","endLine":9,"endColumn":20},{"ruleId":"1688","severity":1,"message":"1776","line":10,"column":8,"nodeType":"1690","messageId":"1691","endLine":10,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1721","line":11,"column":8,"nodeType":"1690","messageId":"1691","endLine":11,"endColumn":18},{"ruleId":"1688","severity":1,"message":"1856","line":13,"column":10,"nodeType":"1690","messageId":"1691","endLine":13,"endColumn":16},{"ruleId":"1688","severity":1,"message":"1857","line":58,"column":13,"nodeType":"1690","messageId":"1691","endLine":58,"endColumn":24},{"ruleId":"1772","severity":1,"message":"1773","line":106,"column":29,"nodeType":"1774","endLine":106,"endColumn":175},{"ruleId":"1688","severity":1,"message":"1734","line":5,"column":5,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":12},{"ruleId":"1688","severity":1,"message":"1824","line":5,"column":24,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":38},{"ruleId":"1688","severity":1,"message":"1789","line":5,"column":40,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":46},{"ruleId":"1688","severity":1,"message":"1790","line":5,"column":48,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":58},{"ruleId":"1688","severity":1,"message":"1791","line":5,"column":60,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":72},{"ruleId":"1688","severity":1,"message":"1805","line":8,"column":8,"nodeType":"1690","messageId":"1691","endLine":8,"endColumn":20},{"ruleId":"1688","severity":1,"message":"1825","line":9,"column":8,"nodeType":"1690","messageId":"1691","endLine":9,"endColumn":18},{"ruleId":"1688","severity":1,"message":"1776","line":10,"column":8,"nodeType":"1690","messageId":"1691","endLine":10,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1721","line":11,"column":8,"nodeType":"1690","messageId":"1691","endLine":11,"endColumn":18},{"ruleId":"1772","severity":1,"message":"1773","line":102,"column":33,"nodeType":"1774","endLine":102,"endColumn":138},{"ruleId":"1772","severity":1,"message":"1773","line":112,"column":29,"nodeType":"1774","endLine":112,"endColumn":129},{"ruleId":"1772","severity":1,"message":"1773","line":195,"column":37,"nodeType":"1774","endLine":195,"endColumn":141},{"ruleId":"1772","severity":1,"message":"1773","line":211,"column":45,"nodeType":"1774","endLine":211,"endColumn":147},{"ruleId":"1688","severity":1,"message":"1759","line":5,"column":29,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":37},{"ruleId":"1688","severity":1,"message":"1853","line":5,"column":73,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":80},{"ruleId":"1688","severity":1,"message":"1805","line":7,"column":8,"nodeType":"1690","messageId":"1691","endLine":7,"endColumn":20},{"ruleId":"1688","severity":1,"message":"1776","line":8,"column":8,"nodeType":"1690","messageId":"1691","endLine":8,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1724","line":9,"column":8,"nodeType":"1690","messageId":"1691","endLine":9,"endColumn":14},{"ruleId":"1688","severity":1,"message":"1734","line":4,"column":10,"nodeType":"1690","messageId":"1691","endLine":4,"endColumn":17},{"ruleId":"1688","severity":1,"message":"1759","line":4,"column":29,"nodeType":"1690","messageId":"1691","endLine":4,"endColumn":37},{"ruleId":"1688","severity":1,"message":"1789","line":4,"column":39,"nodeType":"1690","messageId":"1691","endLine":4,"endColumn":45},{"ruleId":"1688","severity":1,"message":"1790","line":4,"column":47,"nodeType":"1690","messageId":"1691","endLine":4,"endColumn":57},{"ruleId":"1688","severity":1,"message":"1791","line":4,"column":59,"nodeType":"1690","messageId":"1691","endLine":4,"endColumn":71},{"ruleId":"1688","severity":1,"message":"1853","line":4,"column":73,"nodeType":"1690","messageId":"1691","endLine":4,"endColumn":80},{"ruleId":"1688","severity":1,"message":"1824","line":4,"column":82,"nodeType":"1690","messageId":"1691","endLine":4,"endColumn":96},{"ruleId":"1688","severity":1,"message":"1779","line":4,"column":98,"nodeType":"1690","messageId":"1691","endLine":4,"endColumn":107},{"ruleId":"1688","severity":1,"message":"1805","line":6,"column":8,"nodeType":"1690","messageId":"1691","endLine":6,"endColumn":20},{"ruleId":"1688","severity":1,"message":"1776","line":7,"column":8,"nodeType":"1690","messageId":"1691","endLine":7,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1724","line":8,"column":8,"nodeType":"1690","messageId":"1691","endLine":8,"endColumn":14},{"ruleId":"1688","severity":1,"message":"1780","line":11,"column":8,"nodeType":"1690","messageId":"1691","endLine":11,"endColumn":18},{"ruleId":"1688","severity":1,"message":"1759","line":5,"column":29,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":37},{"ruleId":"1688","severity":1,"message":"1791","line":5,"column":59,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":71},{"ruleId":"1688","severity":1,"message":"1853","line":5,"column":73,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":80},{"ruleId":"1688","severity":1,"message":"1805","line":8,"column":8,"nodeType":"1690","messageId":"1691","endLine":8,"endColumn":20},{"ruleId":"1688","severity":1,"message":"1776","line":9,"column":8,"nodeType":"1690","messageId":"1691","endLine":9,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1724","line":10,"column":8,"nodeType":"1690","messageId":"1691","endLine":10,"endColumn":14},{"ruleId":"1688","severity":1,"message":"1780","line":14,"column":8,"nodeType":"1690","messageId":"1691","endLine":14,"endColumn":18},{"ruleId":"1688","severity":1,"message":"1786","line":1,"column":10,"nodeType":"1690","messageId":"1691","endLine":1,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1734","line":5,"column":10,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":17},{"ruleId":"1688","severity":1,"message":"1759","line":5,"column":29,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":37},{"ruleId":"1688","severity":1,"message":"1840","line":5,"column":62,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":71},{"ruleId":"1688","severity":1,"message":"1787","line":5,"column":73,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":85},{"ruleId":"1688","severity":1,"message":"1788","line":5,"column":87,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":94},{"ruleId":"1688","severity":1,"message":"1789","line":5,"column":96,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":102},{"ruleId":"1688","severity":1,"message":"1790","line":5,"column":104,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":114},{"ruleId":"1688","severity":1,"message":"1791","line":5,"column":116,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":128},{"ruleId":"1688","severity":1,"message":"1792","line":5,"column":130,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":140},{"ruleId":"1688","severity":1,"message":"1858","line":6,"column":8,"nodeType":"1690","messageId":"1691","endLine":6,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1721","line":8,"column":8,"nodeType":"1690","messageId":"1691","endLine":8,"endColumn":18},{"ruleId":"1688","severity":1,"message":"1776","line":9,"column":8,"nodeType":"1690","messageId":"1691","endLine":9,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1843","line":10,"column":8,"nodeType":"1690","messageId":"1691","endLine":10,"endColumn":16},{"ruleId":"1688","severity":1,"message":"1724","line":11,"column":8,"nodeType":"1690","messageId":"1691","endLine":11,"endColumn":14},{"ruleId":"1688","severity":1,"message":"1844","line":12,"column":10,"nodeType":"1690","messageId":"1691","endLine":12,"endColumn":20},{"ruleId":"1688","severity":1,"message":"1845","line":12,"column":22,"nodeType":"1690","messageId":"1691","endLine":12,"endColumn":27},{"ruleId":"1688","severity":1,"message":"1786","line":1,"column":10,"nodeType":"1690","messageId":"1691","endLine":1,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1734","line":5,"column":10,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":17},{"ruleId":"1688","severity":1,"message":"1759","line":5,"column":29,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":37},{"ruleId":"1688","severity":1,"message":"1840","line":5,"column":62,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":71},{"ruleId":"1688","severity":1,"message":"1787","line":5,"column":73,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":85},{"ruleId":"1688","severity":1,"message":"1788","line":5,"column":87,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":94},{"ruleId":"1688","severity":1,"message":"1789","line":5,"column":96,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":102},{"ruleId":"1688","severity":1,"message":"1790","line":5,"column":104,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":114},{"ruleId":"1688","severity":1,"message":"1791","line":5,"column":116,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":128},{"ruleId":"1688","severity":1,"message":"1792","line":5,"column":130,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":140},{"ruleId":"1688","severity":1,"message":"1858","line":6,"column":8,"nodeType":"1690","messageId":"1691","endLine":6,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1721","line":8,"column":8,"nodeType":"1690","messageId":"1691","endLine":8,"endColumn":18},{"ruleId":"1688","severity":1,"message":"1776","line":9,"column":8,"nodeType":"1690","messageId":"1691","endLine":9,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1843","line":10,"column":8,"nodeType":"1690","messageId":"1691","endLine":10,"endColumn":16},{"ruleId":"1688","severity":1,"message":"1724","line":11,"column":8,"nodeType":"1690","messageId":"1691","endLine":11,"endColumn":14},{"ruleId":"1688","severity":1,"message":"1844","line":12,"column":10,"nodeType":"1690","messageId":"1691","endLine":12,"endColumn":20},{"ruleId":"1688","severity":1,"message":"1845","line":12,"column":22,"nodeType":"1690","messageId":"1691","endLine":12,"endColumn":27},{"ruleId":"1688","severity":1,"message":"1786","line":1,"column":10,"nodeType":"1690","messageId":"1691","endLine":1,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1734","line":5,"column":10,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":17},{"ruleId":"1688","severity":1,"message":"1759","line":5,"column":29,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":37},{"ruleId":"1688","severity":1,"message":"1840","line":5,"column":62,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":71},{"ruleId":"1688","severity":1,"message":"1787","line":5,"column":73,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":85},{"ruleId":"1688","severity":1,"message":"1788","line":5,"column":87,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":94},{"ruleId":"1688","severity":1,"message":"1789","line":5,"column":96,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":102},{"ruleId":"1688","severity":1,"message":"1790","line":5,"column":104,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":114},{"ruleId":"1688","severity":1,"message":"1791","line":5,"column":116,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":128},{"ruleId":"1688","severity":1,"message":"1792","line":5,"column":130,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":140},{"ruleId":"1688","severity":1,"message":"1858","line":6,"column":8,"nodeType":"1690","messageId":"1691","endLine":6,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1721","line":7,"column":8,"nodeType":"1690","messageId":"1691","endLine":7,"endColumn":18},{"ruleId":"1688","severity":1,"message":"1776","line":8,"column":8,"nodeType":"1690","messageId":"1691","endLine":8,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1843","line":9,"column":8,"nodeType":"1690","messageId":"1691","endLine":9,"endColumn":16},{"ruleId":"1688","severity":1,"message":"1724","line":10,"column":8,"nodeType":"1690","messageId":"1691","endLine":10,"endColumn":14},{"ruleId":"1688","severity":1,"message":"1844","line":11,"column":10,"nodeType":"1690","messageId":"1691","endLine":11,"endColumn":20},{"ruleId":"1688","severity":1,"message":"1845","line":11,"column":22,"nodeType":"1690","messageId":"1691","endLine":11,"endColumn":27},{"ruleId":"1688","severity":1,"message":"1786","line":1,"column":10,"nodeType":"1690","messageId":"1691","endLine":1,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1759","line":5,"column":29,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":37},{"ruleId":"1688","severity":1,"message":"1840","line":5,"column":62,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":71},{"ruleId":"1688","severity":1,"message":"1788","line":5,"column":87,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":94},{"ruleId":"1688","severity":1,"message":"1789","line":5,"column":96,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":102},{"ruleId":"1688","severity":1,"message":"1790","line":5,"column":104,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":114},{"ruleId":"1688","severity":1,"message":"1791","line":5,"column":116,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":128},{"ruleId":"1688","severity":1,"message":"1792","line":5,"column":130,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":140},{"ruleId":"1688","severity":1,"message":"1858","line":6,"column":8,"nodeType":"1690","messageId":"1691","endLine":6,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1776","line":9,"column":8,"nodeType":"1690","messageId":"1691","endLine":9,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1843","line":10,"column":8,"nodeType":"1690","messageId":"1691","endLine":10,"endColumn":16},{"ruleId":"1688","severity":1,"message":"1724","line":11,"column":8,"nodeType":"1690","messageId":"1691","endLine":11,"endColumn":14},{"ruleId":"1688","severity":1,"message":"1844","line":12,"column":10,"nodeType":"1690","messageId":"1691","endLine":12,"endColumn":20},{"ruleId":"1688","severity":1,"message":"1845","line":12,"column":22,"nodeType":"1690","messageId":"1691","endLine":12,"endColumn":27},{"ruleId":"1688","severity":1,"message":"1786","line":1,"column":10,"nodeType":"1690","messageId":"1691","endLine":1,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1759","line":5,"column":29,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":37},{"ruleId":"1688","severity":1,"message":"1840","line":5,"column":62,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":71},{"ruleId":"1688","severity":1,"message":"1787","line":5,"column":73,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":85},{"ruleId":"1688","severity":1,"message":"1791","line":5,"column":116,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":128},{"ruleId":"1688","severity":1,"message":"1792","line":5,"column":130,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":140},{"ruleId":"1688","severity":1,"message":"1858","line":6,"column":8,"nodeType":"1690","messageId":"1691","endLine":6,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1786","line":1,"column":10,"nodeType":"1690","messageId":"1691","endLine":1,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1840","line":5,"column":62,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":71},{"ruleId":"1688","severity":1,"message":"1787","line":5,"column":73,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":85},{"ruleId":"1688","severity":1,"message":"1791","line":5,"column":116,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":128},{"ruleId":"1688","severity":1,"message":"1792","line":5,"column":130,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":140},{"ruleId":"1688","severity":1,"message":"1858","line":6,"column":8,"nodeType":"1690","messageId":"1691","endLine":6,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1724","line":11,"column":8,"nodeType":"1690","messageId":"1691","endLine":11,"endColumn":14},{"ruleId":"1688","severity":1,"message":"1844","line":12,"column":10,"nodeType":"1690","messageId":"1691","endLine":12,"endColumn":20},{"ruleId":"1688","severity":1,"message":"1845","line":12,"column":22,"nodeType":"1690","messageId":"1691","endLine":12,"endColumn":27},{"ruleId":"1688","severity":1,"message":"1856","line":14,"column":10,"nodeType":"1690","messageId":"1691","endLine":14,"endColumn":16},{"ruleId":"1688","severity":1,"message":"1859","line":18,"column":8,"nodeType":"1690","messageId":"1691","endLine":18,"endColumn":17},{"ruleId":"1860","severity":1,"message":"1861","line":29,"column":13,"nodeType":"1862","messageId":"1700","endLine":29,"endColumn":16},{"ruleId":"1688","severity":1,"message":"1850","line":2,"column":10,"nodeType":"1690","messageId":"1691","endLine":2,"endColumn":15},{"ruleId":"1688","severity":1,"message":"1711","line":2,"column":8,"nodeType":"1690","messageId":"1691","endLine":2,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1718","line":3,"column":8,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1721","line":10,"column":8,"nodeType":"1690","messageId":"1691","endLine":10,"endColumn":18},{"ruleId":"1688","severity":1,"message":"1776","line":11,"column":8,"nodeType":"1690","messageId":"1691","endLine":11,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1786","line":1,"column":10,"nodeType":"1690","messageId":"1691","endLine":1,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1802","line":3,"column":8,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":23},{"ruleId":"1688","severity":1,"message":"1803","line":4,"column":10,"nodeType":"1690","messageId":"1691","endLine":4,"endColumn":17},{"ruleId":"1688","severity":1,"message":"1734","line":5,"column":10,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":17},{"ruleId":"1688","severity":1,"message":"1736","line":5,"column":19,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":27},{"ruleId":"1688","severity":1,"message":"1759","line":5,"column":29,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":37},{"ruleId":"1688","severity":1,"message":"1737","line":5,"column":39,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":46},{"ruleId":"1688","severity":1,"message":"1735","line":5,"column":48,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":60},{"ruleId":"1688","severity":1,"message":"1840","line":5,"column":62,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":71},{"ruleId":"1688","severity":1,"message":"1787","line":5,"column":73,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":85},{"ruleId":"1688","severity":1,"message":"1788","line":5,"column":87,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":94},{"ruleId":"1688","severity":1,"message":"1789","line":5,"column":96,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":102},{"ruleId":"1688","severity":1,"message":"1790","line":5,"column":104,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":114},{"ruleId":"1688","severity":1,"message":"1791","line":5,"column":116,"nodeType":"1690","messageId":"1691","endLine":5,"endColumn":128},{"ruleId":"1688","severity":1,"message":"1834","line":6,"column":8,"nodeType":"1690","messageId":"1691","endLine":6,"endColumn":22},{"ruleId":"1688","severity":1,"message":"1841","line":7,"column":8,"nodeType":"1690","messageId":"1691","endLine":7,"endColumn":24},{"ruleId":"1688","severity":1,"message":"1721","line":9,"column":8,"nodeType":"1690","messageId":"1691","endLine":9,"endColumn":18},{"ruleId":"1688","severity":1,"message":"1776","line":10,"column":8,"nodeType":"1690","messageId":"1691","endLine":10,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1843","line":11,"column":8,"nodeType":"1690","messageId":"1691","endLine":11,"endColumn":16},{"ruleId":"1688","severity":1,"message":"1844","line":12,"column":10,"nodeType":"1690","messageId":"1691","endLine":12,"endColumn":20},{"ruleId":"1688","severity":1,"message":"1845","line":12,"column":22,"nodeType":"1690","messageId":"1691","endLine":12,"endColumn":27},{"ruleId":"1798","severity":1,"message":"1863","line":68,"column":114,"nodeType":"1764","messageId":"1864","endLine":68,"endColumn":116},{"ruleId":"1688","severity":1,"message":"1736","line":3,"column":10,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":18},{"ruleId":"1688","severity":1,"message":"1759","line":3,"column":29,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":37},{"ruleId":"1688","severity":1,"message":"1737","line":3,"column":39,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":46},{"ruleId":"1688","severity":1,"message":"1735","line":3,"column":48,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":60},{"ruleId":"1688","severity":1,"message":"1840","line":3,"column":62,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":71},{"ruleId":"1688","severity":1,"message":"1787","line":3,"column":73,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":85},{"ruleId":"1688","severity":1,"message":"1791","line":3,"column":116,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":128},{"ruleId":"1688","severity":1,"message":"1792","line":3,"column":130,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":140},{"ruleId":"1688","severity":1,"message":"1761","line":7,"column":9,"nodeType":"1690","messageId":"1691","endLine":7,"endColumn":15},{"ruleId":"1688","severity":1,"message":"1711","line":2,"column":8,"nodeType":"1690","messageId":"1691","endLine":2,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1718","line":3,"column":8,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1711","line":2,"column":8,"nodeType":"1690","messageId":"1691","endLine":2,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1718","line":3,"column":8,"nodeType":"1690","messageId":"1691","endLine":3,"endColumn":19},{"ruleId":"1688","severity":1,"message":"1711","line":2,"column":8,"nodeType":"1690","messageId":"1691","endLine":2,"endColumn":13},{"ruleId":"1688","severity":1,"message":"1865","line":7,"column":10,"nodeType":"1690","messageId":"1691","endLine":7,"endColumn":14},{"ruleId":"1688","severity":1,"message":"1866","line":203,"column":7,"nodeType":"1690","messageId":"1691","endLine":203,"endColumn":15},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'appInit' is defined but never used.","no-native-reassign",["1867"],"no-negated-in-lhs",["1868"],"no-extend-native","Date prototype is read only, properties should not be added.","AssignmentExpression","unexpected","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'commonImg' is assigned a value but never used.","'CopyInviteModal' is defined but never used.","'DraggableModal' is defined but never used.","'iframeMessage' is defined but never used.","'CacheRoute' is defined but never used.","'dropByCacheKey' is defined but never used.","'getCachingKeys' is defined but never used.","'store' is defined but never used.","'combinReducers' is defined but never used.","'style' is assigned a value but never used.","no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral","'actionTypes' is defined but never used.","'Cookies' is defined but never used.","'Store' is defined but never used.","'interfaces' is defined but never used.","'getConfirmLocale' is defined but never used.","'react' is defined but never used.","'config' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'Button' is defined but never used.","'MailOutlined' is defined but never used.","'SettingOutlined' is defined but never used.","'BaseCmp' is defined but never used.","'PageLoading' is defined but never used.","'RLInput' is defined but never used.","'RLFilterTool' is defined but never used.","'RLButton' is defined but never used.","'RLTable' is defined but never used.","'PersonalMeeting' is defined but never used.","'MeetingList' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'dealTableTime' is defined but never used.","Expected '!==' and instead saw '!='.","'RLTag' is defined but never used.","'click_count' is assigned a value but never used.","'valueBtnStyle' is assigned a value but never used.","'basicBoxStyle' is assigned a value but never used.","'dealSearchTime' is defined but never used.","'ImgCrop' is defined but never used.","'useState' is defined but never used.","'useCallback' is defined but never used.","'useMemo' is defined but never used.","'useRef' is defined but never used.","'forwardRef' is defined but never used.","'LocaleReceiver' is defined but never used.","'MEDIA_CLASS' is assigned a value but never used.","'Route' is defined but never used.","'RLSelect' is defined but never used.","'actionMeeting' is defined but never used.","'Option' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'i'.","ArrowFunctionExpression","unsafeRefs","'ComExamineMeetingList' is defined but never used.","'Component' is defined but never used.","'PageHeaderWrapper' is defined but never used.","'message' is defined but never used.","'TabPane' is assigned a value but never used.","'Redirect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'RLSwitch' is defined but never used.","'utils' is defined but never used.","'dealDateTime' is defined but never used.","'locale' is defined but never used.","'RLDivider' is defined but never used.","'RLCheckbox' is defined but never used.","'StaticRouter' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'createRef' is defined but never used.","'RLDatePicker' is defined but never used.","'RLModal' is defined but never used.","'RLForm' is defined but never used.","'RLFormItem' is defined but never used.","'RLRadioGroup' is defined but never used.","'RLTextarea' is defined but never used.","'Checkbox' is defined but never used.","'commonActions' is defined but never used.","'getFile' is defined but never used.","'CmpPhoneImport' is defined but never used.","'RLCheckboxGroup' is defined but never used.","array-callback-return","Array.prototype.some() expects a value to be returned at the end of arrow function.","expectedAtEnd","'downloadUrl' is defined but never used.","'WindowContainer' is defined but never used.","'connect' is defined but never used.","'actionQAManage' is defined but never used.","'commonAction' is defined but never used.","'images' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'url' is assigned a value but never used.","'Alert' is defined but never used.","'param' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\_.","Literal","unnecessaryEscape",["1869","1870"],"Unnecessary escape character: \\..",["1871","1872"],["1873","1874"],["1875","1876"],"'hushKey' is assigned a value but never used.","'RLDisplayBoard' is defined but never used.","'commonImgs' is defined but never used.","'Tag' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'actionSeminar' is defined but never used.","'getFileType' is defined but never used.","'Tooltip' is defined but never used.",["1867"],["1868"],"'actionUserList' is defined but never used.","'AddGroupUser' is defined but never used.","'CmpAuthed' is defined but never used.","'HashRouter' is defined but never used.","'Divider' is defined but never used.","'CmpFile' is defined but never used.","'RLTooltip' is defined but never used.","'actionRoleManage' is defined but never used.","'downloadFile' is defined but never used.","'eventBus' is defined but never used.","'DatePicker' is defined but never used.","'Input' is defined but never used.","'axios' is defined but never used.","'inJobIsPDF' is assigned a value but never used.","'jobCardIsPDF' is assigned a value but never used.","'otherIsPDF' is assigned a value but never used.","'Radio' is defined but never used.","'RLKVList' is defined but never used.","'PhoneRegionView' is defined but never used.","'RLRadio' is defined but never used.","'UploadOutlined' is defined but never used.","'InboxOutlined' is defined but never used.","'Upload' is defined but never used.","'labelStyle2' is assigned a value but never used.","'actionVideo' is defined but never used.","'CmpUpload' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","Array.prototype.map() expects a return value from arrow function.","expectedInside","'uuid' is defined but never used.","'rowTitle' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"messageId":"1877","fix":"1878","desc":"1879"},{"messageId":"1880","fix":"1881","desc":"1882"},{"messageId":"1877","fix":"1883","desc":"1879"},{"messageId":"1880","fix":"1884","desc":"1882"},{"messageId":"1877","fix":"1885","desc":"1879"},{"messageId":"1880","fix":"1886","desc":"1882"},{"messageId":"1877","fix":"1887","desc":"1879"},{"messageId":"1880","fix":"1888","desc":"1882"},"removeEscape",{"range":"1889","text":"1890"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1891","text":"1892"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1893","text":"1890"},{"range":"1894","text":"1892"},{"range":"1895","text":"1890"},{"range":"1896","text":"1892"},{"range":"1897","text":"1890"},{"range":"1898","text":"1892"},[5076,5077],"",[5076,5076],"\\",[5079,5080],[5079,5079],[5114,5115],[5114,5114],[5117,5118],[5117,5117]]